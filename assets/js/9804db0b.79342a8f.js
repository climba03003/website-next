"use strict";(self.webpackChunkfastify_website=self.webpackChunkfastify_website||[]).push([[5693],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3599:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={title:"Reply",sidebar_label:"Reply",hide_title:!1},s=void 0,p={unversionedId:"Reply",id:"version-v1/Reply",isDocsHomePage:!1,title:"Reply",description:"The second parameter of the handler function is Reply.",source:"@site/versioned_docs/version-v1/Reply.md",sourceDirName:".",slug:"/Reply",permalink:"/website-next/docs/v1/Reply",editUrl:"https://github.com/fastify/website-next/edit/main/docs/versioned_docs/version-v1/Reply.md",tags:[],version:"v1",frontMatter:{title:"Reply",sidebar_label:"Reply",hide_title:!1},sidebar:"version-v1/sidebar",previous:{title:"Plugins",permalink:"/website-next/docs/v1/Plugins"},next:{title:"Request",permalink:"/website-next/docs/v1/Request"}},d=[{value:".code(statusCode)",id:"codestatuscode",children:[],level:3},{value:".header(key, value)",id:"headerkey-value",children:[],level:3},{value:".getHeader(key)",id:"getheaderkey",children:[],level:3},{value:".removeHeader(key)",id:"removeheaderkey",children:[],level:3},{value:".hasHeader(key)",id:"hasheaderkey",children:[],level:3},{value:".redirect(dest)",id:"redirectdest",children:[],level:3},{value:".type(contentType)",id:"typecontenttype",children:[],level:3},{value:".serializer(func)",id:"serializerfunc",children:[],level:3},{value:".sent",id:"sent",children:[],level:3},{value:".send(data)",id:"senddata",children:[{value:"Objects",id:"objects",children:[],level:4},{value:"Strings",id:"strings",children:[],level:4},{value:"Streams",id:"streams",children:[],level:4},{value:"Buffers",id:"buffers",children:[],level:4},{value:"Errors",id:"errors",children:[],level:4},{value:"Type of the final payload",id:"type-of-the-final-payload",children:[],level:4},{value:"Async-Await and Promises",id:"async-await-and-promises",children:[],level:4}],level:3}],u={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The second parameter of the handler function is ",(0,i.kt)("inlineCode",{parentName:"p"},"Reply"),".\nReply is a core Fastify object that exposes the following functions\nand properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".code(statusCode)")," - Sets the status code."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".status(statusCode)")," - An alias for ",(0,i.kt)("inlineCode",{parentName:"li"},".code(statusCode)"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".header(name, value)")," - Sets a response header."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".getHeader(name)")," - Retrieve value of already set header."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".hasHeader(name)")," - Determine if a header has been set."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".type(value)")," - Sets the header ",(0,i.kt)("inlineCode",{parentName:"li"},"Content-Type"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".redirect([code,] url)")," - Redirect to the specified url, the status code is optional (default to ",(0,i.kt)("inlineCode",{parentName:"li"},"302"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".serialize(payload)")," - Serializes the specified payload using the default json serializer and returns the serialized payload."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".serializer(function)")," - Sets a custom serializer for the payload."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".send(payload)")," - Sends the payload to the user, could be a plain text, a buffer, JSON, stream, or an Error object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".sent")," - A boolean value that you can use if you need to know if ",(0,i.kt)("inlineCode",{parentName:"li"},"send")," has already been called."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".res")," - The ",(0,i.kt)("a",{parentName:"li",href:"https://nodejs.org/dist/latest/docs/api/http.html#http_class_http_serverresponse"},(0,i.kt)("inlineCode",{parentName:"a"},"http.ServerResponse"))," from Node core.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', options, function (request, reply) {\n  // Your code\n  reply\n    .code(200)\n    .header('Content-Type', 'application/json; charset=utf-8')\n    .send({ hello: 'world' })\n})\n")),(0,i.kt)("p",null,"Additionally, ",(0,i.kt)("inlineCode",{parentName:"p"},"Reply")," provides access to the context of the request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', {config: {foo: 'bar'}}, function (request, reply) {\n  reply.send('handler config.foo = ' + reply.context.config.foo)\n})\n")),(0,i.kt)("h3",{id:"codestatuscode"},".code(statusCode)"),(0,i.kt)("a",{name:"code"}),(0,i.kt)("p",null,"If not set via ",(0,i.kt)("inlineCode",{parentName:"p"},"reply.code"),", the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"statusCode")," will be ",(0,i.kt)("inlineCode",{parentName:"p"},"200"),"."),(0,i.kt)("h3",{id:"headerkey-value"},".header(key, value)"),(0,i.kt)("a",{name:"header"}),(0,i.kt)("p",null,"Sets a response header. If the value is omitted or undefined it is coerced\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"''"),"."),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest/docs/api/http.html#http_response_setheader_name_value"},(0,i.kt)("inlineCode",{parentName:"a"},"http.ServerResponse#setHeader")),"."),(0,i.kt)("h3",{id:"getheaderkey"},".getHeader(key)"),(0,i.kt)("a",{name:"getHeader"}),(0,i.kt)("p",null,"Retrieves the value of a previously set header."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"reply.header('x-foo', 'foo')\nreply.getHeader('x-foo') // 'foo'\n")),(0,i.kt)("h3",{id:"removeheaderkey"},".removeHeader(key)"),(0,i.kt)("a",{name:"getHeader"}),(0,i.kt)("p",null,"Removed the value of a previously set header."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"reply.header('x-foo', 'foo')\nreply.removeHeader('x-foo')\nreply.getHeader('x-foo') // undefined\n")),(0,i.kt)("h3",{id:"hasheaderkey"},".hasHeader(key)"),(0,i.kt)("a",{name:"hasHeader"}),(0,i.kt)("p",null,"Returns a boolean indicating if the specified header has been set."),(0,i.kt)("h3",{id:"redirectdest"},".redirect(dest)"),(0,i.kt)("a",{name:"redirect"}),(0,i.kt)("p",null,"Redirects a request to the specified url, the status code is optional, default to ",(0,i.kt)("inlineCode",{parentName:"p"},"302")," (if status code is not already set by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"code"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"reply.redirect('/home')\n")),(0,i.kt)("h3",{id:"typecontenttype"},".type(contentType)"),(0,i.kt)("a",{name:"type"}),(0,i.kt)("p",null,"Sets the content type for the response.\nThis is a shortcut for ",(0,i.kt)("inlineCode",{parentName:"p"},"reply.header('Content-Type', 'the/type')"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"reply.type('text/html')\n")),(0,i.kt)("h3",{id:"serializerfunc"},".serializer(func)"),(0,i.kt)("a",{name:"serializer"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},".send()")," will by default JSON-serialize any value that is not one of: ",(0,i.kt)("inlineCode",{parentName:"p"},"Buffer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"stream"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Error"),". If you need to replace the default serializer with a custom serializer for a particular request, you can do so with the ",(0,i.kt)("inlineCode",{parentName:"p"},".serializer()")," utility. Be aware that if you are using a custom serializer, you must set a custom ",(0,i.kt)("inlineCode",{parentName:"p"},"'Content-Type'")," header."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"reply\n  .header('Content-Type', 'application/x-protobuf')\n  .serializer(protoBuf.serialize)\n")),(0,i.kt)("p",null,"Note that you don't need to use this utility inside a ",(0,i.kt)("inlineCode",{parentName:"p"},"handler")," because Buffers, streams, and strings (unless a serializer is set) are considered to already be serialized."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"reply\n  .header('Content-Type', 'application/x-protobuf')\n  .send(protoBuf.serialize(data))\n")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"#send"},(0,i.kt)("inlineCode",{parentName:"a"},".send()"))," for more information on sending different types of values."),(0,i.kt)("h3",{id:"sent"},".sent"),(0,i.kt)("a",{name:"sent"}),(0,i.kt)("p",null,"As the name suggests, ",(0,i.kt)("inlineCode",{parentName:"p"},".sent")," is a property to indicate if\na response has been sent via ",(0,i.kt)("inlineCode",{parentName:"p"},"reply.send()"),"."),(0,i.kt)("p",null,"In case a route handler is defined as an async function or it\nreturns a promise, it is possible to set ",(0,i.kt)("inlineCode",{parentName:"p"},"reply.sent = true"),"\nto indicate that the automatic invocation of ",(0,i.kt)("inlineCode",{parentName:"p"},"reply.send()")," once the\nhandler promise resolve should be skipped. By setting ",(0,i.kt)("inlineCode",{parentName:"p"},"reply.sent =\ntrue"),", an application claims full responsibility of the low-level\nrequest and response. Moreover, hooks will not be invoked."),(0,i.kt)("p",null,"As an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/', (req, reply) => {\n  reply.sent = true\n  reply.res.end('hello world')\n\n  return Promise.resolve('this will be skipped')\n})\n")),(0,i.kt)("p",null,"If the handler rejects, the error will be logged."),(0,i.kt)("h3",{id:"senddata"},".send(data)"),(0,i.kt)("a",{name:"send"}),(0,i.kt)("p",null,"As the name suggests, ",(0,i.kt)("inlineCode",{parentName:"p"},".send()")," is the function that sends the payload to the end user."),(0,i.kt)("h4",{id:"objects"},"Objects"),(0,i.kt)("a",{name:"send-object"}),(0,i.kt)("p",null,"As noted above, if you are sending JSON objects, ",(0,i.kt)("inlineCode",{parentName:"p"},"send")," will serialize the object with ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/fast-json-stringify"},"fast-json-stringify")," if you set an output schema, otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON.stringify()")," will be used."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/json', options, function (request, reply) {\n  reply.send({ hello: 'world' })\n})\n")),(0,i.kt)("h4",{id:"strings"},"Strings"),(0,i.kt)("a",{name:"send-string"}),(0,i.kt)("p",null,"If you pass a string to ",(0,i.kt)("inlineCode",{parentName:"p"},"send")," without a ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-Type"),", it will be sent as ",(0,i.kt)("inlineCode",{parentName:"p"},"text/plain; charset=utf-8"),". If you set the ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-Type")," header and pass a string to ",(0,i.kt)("inlineCode",{parentName:"p"},"send"),", it will be serialized with the custom serializer if one is set, otherwise it will be sent unmodified (unless the ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-Type")," header is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"application/json; charset=utf-8"),", in which case it will be JSON-serialized like an object \u2014 see the section above)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/json', options, function (request, reply) {\n  reply.send('plain string')\n})\n")),(0,i.kt)("h4",{id:"streams"},"Streams"),(0,i.kt)("a",{name:"send-streams"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"send")," can also handle streams out of the box, internally uses ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/pump"},"pump")," to avoid leaks of file descriptors. If you are sending a stream and you have not set a ",(0,i.kt)("inlineCode",{parentName:"p"},"'Content-Type'")," header, ",(0,i.kt)("em",{parentName:"p"},"send")," will set it at ",(0,i.kt)("inlineCode",{parentName:"p"},"'application/octet-stream'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/streams', function (request, reply) {\n  const fs = require('fs')\n  const stream = fs.createReadStream('some-file', 'utf8')\n  reply.send(stream)\n})\n")),(0,i.kt)("h4",{id:"buffers"},"Buffers"),(0,i.kt)("a",{name:"send-buffers"}),(0,i.kt)("p",null,"If you are sending a buffer and you have not set a ",(0,i.kt)("inlineCode",{parentName:"p"},"'Content-Type'")," header, ",(0,i.kt)("em",{parentName:"p"},"send")," will set it to ",(0,i.kt)("inlineCode",{parentName:"p"},"'application/octet-stream'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs')\nfastify.get('/streams', function (request, reply) {\n  fs.readFile('some-file', (err, fileBuffer) => {\n    reply.send(err || fileBuffer)\n  })\n})\n")),(0,i.kt)("h4",{id:"errors"},"Errors"),(0,i.kt)("a",{name:"errors"}),(0,i.kt)("p",null,"If you pass to ",(0,i.kt)("em",{parentName:"p"},"send")," an object that is an instance of ",(0,i.kt)("em",{parentName:"p"},"Error"),", Fastify will automatically create an error structured as the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  error: String        // the http error message\n  message: String      // the user error message\n  statusCode: Number   // the http status code\n}\n")),(0,i.kt)("p",null,"You can add some custom property to the Error object, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"code")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"headers"),", that will be used to enhance the http response."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: If you are passing an error to ",(0,i.kt)("inlineCode",{parentName:"em"},"send")," and the statusCode is less than 400, Fastify will automatically set it at 500.")),(0,i.kt)("p",null,"Tip: you can simplify errors by using the ",(0,i.kt)("a",{parentName:"p",href:"https://npm.im/http-errors"},(0,i.kt)("inlineCode",{parentName:"a"},"http-errors"))," module to generate errors:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', function (request, reply) {\n  reply.send(httpErrors.Gone())\n})\n")),(0,i.kt)("p",null,"If you want to completely customize the error response, checkout ",(0,i.kt)("a",{parentName:"p",href:"/website-next/docs/v1/Server#seterrorhandler"},(0,i.kt)("inlineCode",{parentName:"a"},"setErrorHandler"))," API."),(0,i.kt)("p",null,"Errors with a ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," or\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"statusCode")," property equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"404")," will be routed to the not found handler.\nSee ",(0,i.kt)("a",{parentName:"p",href:"/website-next/docs/v1/Server#setnotfoundhandler"},(0,i.kt)("inlineCode",{parentName:"a"},"server.setNotFoundHandler")),"\nAPI to learn more about handling such cases:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.setNotFoundHandler(function (request, reply) {\n  reply.type('text/plain').send('a custom not found')\n})\n\nfastify.get('/', function (request, reply) {\n  reply.send(new httpErrors.NotFound())\n})\n")),(0,i.kt)("h4",{id:"type-of-the-final-payload"},"Type of the final payload"),(0,i.kt)("a",{name:"payload-type"}),(0,i.kt)("p",null,"The type of the sent payload (after serialization and going through any ",(0,i.kt)("a",{parentName:"p",href:"/website-next/docs/v1/Hooks#the-onsend-hook"},(0,i.kt)("inlineCode",{parentName:"a"},"onSend")," hooks"),") must be one of the following types, otherwise an error will be thrown:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Buffer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stream")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"undefined")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"null"))),(0,i.kt)("h4",{id:"async-await-and-promises"},"Async-Await and Promises"),(0,i.kt)("a",{name:"async-await-promise"}),(0,i.kt)("p",null,"Fastify natively handles promises and supports async-await."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note that in the following examples we are not using reply.send.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/promises', options, function (request, reply) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, 200, { hello: 'world' })\n  })\n})\n\nfastify.get('/async-await', options, async function (request, reply) {\n  var res = await new Promise(function (resolve) {\n    setTimeout(resolve, 200, { hello: 'world' })\n  })\n  return res\n})\n")),(0,i.kt)("p",null,"Rejected promises default to a ",(0,i.kt)("inlineCode",{parentName:"p"},"500")," HTTP status code. Reject the promise, or ",(0,i.kt)("inlineCode",{parentName:"p"},"throw")," in an ",(0,i.kt)("inlineCode",{parentName:"p"},"async function"),", with an object that has ",(0,i.kt)("inlineCode",{parentName:"p"},"statusCode")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"status"),") and ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," properties to modify the reply."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/teapot', async function (request, reply) => {\n  const err = new Error()\n  err.statusCode = 418\n  err.message = 'short and stout'\n  throw err\n})\n")),(0,i.kt)("p",null,"If you want to know more please review ",(0,i.kt)("a",{parentName:"p",href:"/website-next/docs/v1/Routes#async-await"},"Routes#async-await"),"."))}c.isMDXComponent=!0}}]);