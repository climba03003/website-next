"use strict";(self.webpackChunkfastify_website=self.webpackChunkfastify_website||[]).push([[3351],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),g=o,f=d["".concat(l,".").concat(g)]||d[g]||c[g]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5509:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={title:"Logging",sidebar_label:"Logging",hide_title:!1},l=void 0,p={unversionedId:"Logging",id:"version-v2/Logging",isDocsHomePage:!1,title:"Logging",description:"Logging is disabled by default, and you can enable it by passing",source:"@site/versioned_docs/version-v2/Logging.md",sourceDirName:".",slug:"/Logging",permalink:"/website-next/docs/v2/Logging",editUrl:"https://github.com/fastify/website-next/edit/main/docs/versioned_docs/version-v2/Logging.md",tags:[],version:"v2",frontMatter:{title:"Logging",sidebar_label:"Logging",hide_title:!1},sidebar:"version-v2/tutorialSidebar",previous:{title:"Lifecycle",permalink:"/website-next/docs/v2/Lifecycle"},next:{title:"Middleware",permalink:"/website-next/docs/v2/Middleware"}},u=[{value:"Log Redaction",id:"log-redaction",children:[],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Logging is disabled by default, and you can enable it by passing\n",(0,a.kt)("inlineCode",{parentName:"p"},"{ logger: true }")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"{ logger: { level: 'info' } }")," when you create\na fastify instance. Note that if the logger is disabled, it is impossible to\nenable it at runtime. We use\n",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/abstract-logging"},"abstract-logging")," for\nthis purpose."),(0,a.kt)("p",null,"Since Fastify is focused on performance, it uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino"},"pino")," as its logger, with the default log level, when enabled, set to ",(0,a.kt)("inlineCode",{parentName:"p"},"'info'"),"."),(0,a.kt)("p",null,"Enabling the logger is extremely easy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  logger: true\n})\n\nfastify.get('/', options, function (request, reply) {\n  request.log.info('Some info about the current request')\n  reply.send({ hello: 'world' })\n})\n")),(0,a.kt)("p",null,"If you want to pass some options to the logger, just pass them to Fastify.\nYou can find all available options in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino/blob/master/docs/api.md#pinooptions-stream"},"Pino documentation"),". If you want to specify a file destination, use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  logger: {\n    level: 'info',\n    file: '/path/to/file' // Will use pino.destination()\n  }\n})\n\nfastify.get('/', options, function (request, reply) {\n  request.log.info('Some info about the current request')\n  reply.send({ hello: 'world' })\n})\n")),(0,a.kt)("p",null,"If you want to pass a custom stream to the Pino instance, just add a stream field to the logger object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const split = require('split2')\nconst stream = split(JSON.parse)\n\nconst fastify = require('fastify')({\n  logger: {\n    level: 'info',\n    stream: stream\n  }\n})\n")),(0,a.kt)("a",{name:"logging-request-id"}),(0,a.kt)("p",null,'By default, fastify adds an id to every request for easier tracking. If the "request-id" header is present its value is used, otherwise a new incremental id is generated. See Fastify Factory ',(0,a.kt)("a",{parentName:"p",href:"/website-next/docs/v2/Server#factory-request-id-header"},(0,a.kt)("inlineCode",{parentName:"a"},"requestIdHeader"))," and Fastify Factory ",(0,a.kt)("a",{parentName:"p",href:"/website-next/docs/v2/Server#gen-request-id"},(0,a.kt)("inlineCode",{parentName:"a"},"genReqId"))," for customization options."),(0,a.kt)("p",null,"The default logger is configured with a set of standard serializers that serialize objects with ",(0,a.kt)("inlineCode",{parentName:"p"},"req"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"res"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"err")," properties. This behaviour can be customized by specifying custom serializers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  logger: {\n    serializers: {\n      req: function (req) {\n        return { url: req.url }\n      }\n    }\n  }\n})\n")),(0,a.kt)("p",null,"For example, the response payload and headers could be logged using the approach below (even if it is ",(0,a.kt)("em",{parentName:"p"},"not recommended"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  logger: {\n    prettyPrint: true,\n    serializers: {\n      res(res) {\n        // The default\n        return {\n          statusCode: res.statusCode\n        }\n      },\n      req(req) {\n        return {\n          method: req.method,\n          url: req.url,\n          path: req.path,\n          parameters: req.parameters,\n          // Including the headers in the log could be in violation \n          // of privacy laws, e.g. GDPR. You should use the \"redact\" option to\n          // remove sensitive fields. It could also leak authentication data in\n          // the logs.\n          headers: req.headers\n        };\n      }\n    }\n  }\n});\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": The body cannot be serialized inside ",(0,a.kt)("inlineCode",{parentName:"p"},"req")," method because the request is serialized when we create the child logger. At that time, the body is not yet parsed."),(0,a.kt)("p",null,"See an approach to log ",(0,a.kt)("inlineCode",{parentName:"p"},"req.body")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"app.addHook('preHandler', function (req, reply, done) {\n  if (req.body) {\n    req.log.info({ body: req.body }, 'parsed body')\n  }\n  done()\n})\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"This option will be ignored by any logger other than Pino.")),(0,a.kt)("p",null,"You can also supply your own logger instance. Instead of passing configuration options, simply pass the instance.\nThe logger you supply must conform to the Pino interface; that is, it must have the following methods:\n",(0,a.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"debug"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"fatal"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"warn"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"trace"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"child"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const log = require('pino')({ level: 'info' })\nconst fastify = require('fastify')({ logger: log })\n\nlog.info('does not have request information')\n\nfastify.get('/', function (request, reply) {\n  request.log.info('includes request information, but is the same logger instance as `log`')\n  reply.send({ hello: 'world' })\n})\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"The logger instance for the current request is available in every part of the ",(0,a.kt)("a",{parentName:"em",href:"/website-next/docs/v2/Lifecycle"},"lifecycle"),".")),(0,a.kt)("h2",{id:"log-redaction"},"Log Redaction"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://getpino.io"},"Pino")," supports low-overhead log redaction for\nobscuring values of specific properties in recorded logs.\nAs an example, we might want to log all the HTTP headers minus the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Authorization")," header for security concerns:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = Fastify({\n  logger: {\n    stream: stream,\n    redact: ['req.headers.authorization'],\n    level: 'info',\n    serializers: {\n      req (req) {\n        return {\n          method: req.method,\n          url: req.url,\n          headers: req.headers,\n          hostname: req.hostname,\n          remoteAddress: req.ip,\n          remotePort: req.connection.remotePort\n        }\n      }\n    }\n  }\n})\n")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://getpino.io/#/docs/redaction"},"https://getpino.io/#/docs/redaction")," for more details."))}d.isMDXComponent=!0}}]);