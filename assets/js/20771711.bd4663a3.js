"use strict";(self.webpackChunk_fastify_website=self.webpackChunk_fastify_website||[]).push([[76091],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},11918:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,l={unversionedId:"Reference/Routes",id:"version-v4.6.x/Reference/Routes",title:"Routes",description:"Routes",source:"@site/versioned_docs/version-v4.6.x/Reference/Routes.md",sourceDirName:"Reference",slug:"/Reference/Routes",permalink:"/website-next/docs/v4.6.x/Reference/Routes",draft:!1,editUrl:"https://github.com/fastify/fastify/edit/main/docs/Reference/Routes.md",tags:[],version:"v4.6.x",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Request",permalink:"/website-next/docs/v4.6.x/Reference/Request"},next:{title:"Server",permalink:"/website-next/docs/v4.6.x/Reference/Server"}},s={},p=[{value:"Routes",id:"routes",level:2},{value:"Full declaration",id:"full-declaration",level:3},{value:"Routes options",id:"routes-options",level:3},{value:"Shorthand declaration",id:"shorthand-declaration",level:3},{value:"Url building",id:"url-building",level:3},{value:"Async Await",id:"async-await",level:3},{value:"Promise resolution",id:"promise-resolution",level:3},{value:"Route Prefixing",id:"route-prefixing",level:3},{value:"Route Prefixing and fastify-plugin",id:"route-prefixing-and-fastify-plugin",level:3},{value:"Handling of / route inside prefixed plugins",id:"handling-of--route-inside-prefixed-plugins",level:4},{value:"Custom Log Level",id:"custom-log-level",level:3},{value:"Custom Log Serializer",id:"custom-log-serializer",level:3},{value:"Config",id:"config",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Version Constraints",id:"version-constraints",level:4},{value:"Host Constraints",id:"host-constraints",level:4},{value:"\u26a0  HTTP version check",id:"--http-version-check",level:3}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"routes"},"Routes"),(0,r.kt)("p",null,"The route methods will configure the endpoints of your application. You have two\nways to declare a route with Fastify: the shorthand method and the full\ndeclaration."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#full-declaration"},"Full declaration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#routes-options"},"Routes options")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#shorthand-declaration"},"Shorthand declaration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#url-building"},"Url building")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#async-await"},"Async Await")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#promise-resolution"},"Promise resolution")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#route-prefixing"},"Route Prefixing"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#handling-of--route-inside-prefixed-plugins"},"Handling of / route inside prefixed\nplugins")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#custom-log-level"},"Custom Log Level")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#custom-log-serializer"},"Custom Log Serializer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#config"},"Config")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#constraints"},"Constraints"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#version-constraints"},"Version Constraints")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#host-constraints"},"Host Constraints"))))),(0,r.kt)("h3",{id:"full-declaration"},"Full declaration"),(0,r.kt)("a",{id:"full-declaration"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.route(options)\n")),(0,r.kt)("h3",{id:"routes-options"},"Routes options"),(0,r.kt)("a",{id:"options"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"method"),": currently it supports ",(0,r.kt)("inlineCode",{parentName:"p"},"'DELETE'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'GET'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'HEAD'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'PATCH'"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"'POST'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'PUT'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'OPTIONS'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'SEARCH'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'TRACE'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'PROPFIND'"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"'PROPPATCH'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'MKCOL'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'COPY'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'MOVE'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'LOCK'"),"  and ",(0,r.kt)("inlineCode",{parentName:"p"},"'UNLOCK'"),".\nIt could also be an array of methods.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"url"),": the path of the URL to match this route (alias: ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"schema"),": an object containing the schemas for the request and response. They\nneed to be in ",(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSON Schema")," format, check\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Validation-and-Serialization"},"here")," for more info."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"body"),": validates the body of the request if it is a POST, PUT, or PATCH\nmethod."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"querystring")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"query"),": validates the querystring. This can be a complete\nJSON Schema object, with the property ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"object")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"properties"),"\nobject of parameters, or simply the values of what would be contained in the\n",(0,r.kt)("inlineCode",{parentName:"li"},"properties")," object as shown below."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params"),": validates the params."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"response"),": filter and generate a schema for the response, setting a schema\nallows us to have 10-20% more throughput."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"exposeHeadRoute"),": creates a sibling ",(0,r.kt)("inlineCode",{parentName:"p"},"HEAD")," route for any ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," routes.\nDefaults to the value of ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Server#exposeHeadRoutes"},(0,r.kt)("inlineCode",{parentName:"a"},"exposeHeadRoutes")),"\ninstance option. If you want a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"HEAD")," handler without disabling this\noption, make sure to define it before the ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," route.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"attachValidation"),": attach ",(0,r.kt)("inlineCode",{parentName:"p"},"validationError")," to request, if there is a schema\nvalidation error, instead of sending the error to the error handler. The\ndefault ",(0,r.kt)("a",{parentName:"p",href:"https://ajv.js.org/api.html#error-objects"},"error format")," is the Ajv\none.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"onRequest(request, reply, done)"),": a ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks#onrequest"},"function")," called\nas soon as a request is received, it could also be an array of functions.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"preParsing(request, reply, done)"),": a ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks#preparsing"},"function")," called\nbefore parsing the request, it could also be an array of functions.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"preValidation(request, reply, done)"),": a ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks#prevalidation"},"function"),"\ncalled after the shared ",(0,r.kt)("inlineCode",{parentName:"p"},"preValidation")," hooks, useful if you need to perform\nauthentication at route level for example, it could also be an array of\nfunctions.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"preHandler(request, reply, done)"),": a ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks#prehandler"},"function")," called\njust before the request handler, it could also be an array of functions.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"preSerialization(request, reply, payload, done)"),": a\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks#preserialization"},"function")," called just before the serialization,\nit could also be an array of functions.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"onSend(request, reply, payload, done)"),": a ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks#route-hooks"},"function"),"\ncalled right before a response is sent, it could also be an array of\nfunctions.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"onResponse(request, reply, done)"),": a ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks#onresponse"},"function")," called\nwhen a response has been sent, so you will not be able to send more data to\nthe client. It could also be an array of functions.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"onTimeout(request, reply, done)"),": a ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks#ontimeout"},"function")," called\nwhen a request is timed out and the HTTP socket has been hanged up.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"onError(request, reply, error, done)"),": a ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks#onerror"},"function"),"\ncalled when an Error is thrown or sent to the client by the route handler.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"handler(request, reply)"),": the function that will handle this request. The\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Server"},"Fastify server")," will be bound to ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," when the handler is\ncalled. Note: using an arrow function will break the binding of ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"errorHandler(error, request, reply)"),": a custom error handler for the scope of\nthe request. Overrides the default error global handler, and anything set by\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Server#seterrorhandler"},(0,r.kt)("inlineCode",{parentName:"a"},"setErrorHandler")),", for requests to the route.\nTo access the default handler, you can access ",(0,r.kt)("inlineCode",{parentName:"p"},"instance.errorHandler"),". Note\nthat this will point to fastify's default ",(0,r.kt)("inlineCode",{parentName:"p"},"errorHandler")," only if a plugin\nhasn't overridden it already.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"validatorCompiler({ schema, method, url, httpPart })"),": function that builds\nschemas for request validations. See the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Validation-and-Serialization#schema-validator"},"Validation and\nSerialization"),"\ndocumentation.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"serializerCompiler({ { schema, method, url, httpStatus } })"),": function that\nbuilds schemas for response serialization. See the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Validation-and-Serialization#schema-serializer"},"Validation and\nSerialization"),"\ndocumentation.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"schemaErrorFormatter(errors, dataVar)"),": function that formats the errors from\nthe validation compiler. See the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Validation-and-Serialization#error-handling"},"Validation and\nSerialization"),"\ndocumentation. Overrides the global schema error formatter handler, and\nanything set by ",(0,r.kt)("inlineCode",{parentName:"p"},"setSchemaErrorFormatter"),", for requests to the route.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"bodyLimit"),": prevents the default JSON body parser from parsing request bodies\nlarger than this number of bytes. Must be an integer. You may also set this\noption globally when first creating the Fastify instance with\n",(0,r.kt)("inlineCode",{parentName:"p"},"fastify(options)"),". Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"1048576")," (1 MiB).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"logLevel"),": set log level for this route. See below.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"logSerializers"),": set serializers to log for this route.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"config"),": object used to store custom configuration.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"version"),": a ",(0,r.kt)("a",{parentName:"p",href:"https://semver.org/"},"semver")," compatible string that defined the\nversion of the endpoint. ",(0,r.kt)("a",{parentName:"p",href:"#version-constraints"},"Example"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"prefixTrailingSlash"),": string used to determine how to handle passing ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," as a\nroute with a prefix."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"both")," (default): Will register both ",(0,r.kt)("inlineCode",{parentName:"li"},"/prefix")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"/prefix/"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"slash"),": Will register only ",(0,r.kt)("inlineCode",{parentName:"li"},"/prefix/"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"no-slash"),": Will register only ",(0,r.kt)("inlineCode",{parentName:"li"},"/prefix"),".")),(0,r.kt)("p",{parentName:"li"},"Note: this option does not override ",(0,r.kt)("inlineCode",{parentName:"p"},"ignoreTrailingSlash")," in\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Server"},"Server")," configuration.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"request")," is defined in ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Request"},"Request"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"reply")," is defined in ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Reply"},"Reply"),"."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notice:")," The documentation of ",(0,r.kt)("inlineCode",{parentName:"p"},"onRequest"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"preParsing"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"preValidation"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"preHandler"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"preSerialization"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onSend"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"onResponse")," are described in\nmore detail in ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks"},"Hooks"),". Additionally, to send a response before the\nrequest is handled by the ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," please refer to ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Hooks#respond-to-a-request-from-a-hook"},"Respond to a request from a\nhook"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.route({\n  method: 'GET',\n  url: '/',\n  schema: {\n    querystring: {\n      name: { type: 'string' },\n      excitement: { type: 'integer' }\n    },\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          hello: { type: 'string' }\n        }\n      }\n    }\n  },\n  handler: function (request, reply) {\n    reply.send({ hello: 'world' })\n  }\n})\n")),(0,r.kt)("h3",{id:"shorthand-declaration"},"Shorthand declaration"),(0,r.kt)("a",{id:"shorthand-declaration"}),(0,r.kt)("p",null,"The above route declaration is more ",(0,r.kt)("em",{parentName:"p"},"Hapi"),"-like, but if you prefer an\n",(0,r.kt)("em",{parentName:"p"},"Express/Restify")," approach, we support it as well:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.get(path, [options], handler)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.head(path, [options], handler)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.post(path, [options], handler)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.put(path, [options], handler)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.delete(path, [options], handler)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.options(path, [options], handler)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.patch(path, [options], handler)")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const opts = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          hello: { type: 'string' }\n        }\n      }\n    }\n  }\n}\nfastify.get('/', opts, (request, reply) => {\n  reply.send({ hello: 'world' })\n})\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.all(path, [options], handler)")," will add the same handler to all the\nsupported methods."),(0,r.kt)("p",null,"The handler may also be supplied via the ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const opts = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          hello: { type: 'string' }\n        }\n      }\n    }\n  },\n  handler: function (request, reply) {\n    reply.send({ hello: 'world' })\n  }\n}\nfastify.get('/', opts)\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: if the handler is specified in both the ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," and as the third\nparameter to the shortcut method then throws duplicate ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," error.")),(0,r.kt)("h3",{id:"url-building"},"Url building"),(0,r.kt)("a",{id:"url-building"}),(0,r.kt)("p",null,"Fastify supports both static and dynamic URLs."),(0,r.kt)("p",null,"To register a ",(0,r.kt)("strong",{parentName:"p"},"parametric")," path, use the ",(0,r.kt)("em",{parentName:"p"},"colon")," before the parameter name.\nFor ",(0,r.kt)("strong",{parentName:"p"},"wildcard"),", use the ",(0,r.kt)("em",{parentName:"p"},"star"),". ",(0,r.kt)("em",{parentName:"p"},"Remember that static routes are always\nchecked before parametric and wildcard.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// parametric\nfastify.get('/example/:userId', function (request, reply) {\n  // curl ${app-url}/example/12345\n  // userId === '12345'\n  const { userId } = request.params;\n  // your code here\n})\nfastify.get('/example/:userId/:secretToken', function (request, reply) {\n  // curl ${app-url}/example/12345/abc.zHi\n  // userId === '12345'\n  // secretToken === 'abc.zHi'\n  const { userId, secretToken } = request.params;\n  // your code here\n})\n\n// wildcard\nfastify.get('/example/*', function (request, reply) {})\n")),(0,r.kt)("p",null,"Regular expression routes are supported as well, but be aware that you have to\nescape slashes. Take note that RegExp is also very expensive in terms of\nperformance!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// parametric with regexp\nfastify.get('/example/:file(^\\\\d+).png', function (request, reply) {\n  // curl ${app-url}/example/12345.png\n  // file === '12345'\n  const { file } = request.params;\n  // your code here\n})\n")),(0,r.kt)("p",null,'It is possible to define more than one parameter within the same couple of slash\n("/"). Such as:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'fastify.get(\'/example/near/:lat-:lng/radius/:r\', function (request, reply) {\n  // curl ${app-url}/example/near/15\xb0N-30\xb0E/radius/20\n  // lat === "15\xb0N"\n  // lng === "30\xb0E"\n  // r ==="20"\n  const { lat, lng, r } = request.params;\n  // your code here\n})\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},'Remember in this case to use the dash ("-") as parameters separator.')),(0,r.kt)("p",null,"Finally, it is possible to have multiple parameters with RegExp:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'fastify.get(\'/example/at/:hour(^\\\\d{2})h:minute(^\\\\d{2})m\', function (request, reply) {\n  // curl ${app-url}/example/at/08h24m\n  // hour === "08"\n  // minute === "24"\n  const { hour, minute } = request.params;\n  // your code here\n})\n')),(0,r.kt)("p",null,"In this case as parameter separator it is possible to use whatever character is\nnot matched by the regular expression."),(0,r.kt)("p",null,"Having a route with multiple parameters may negatively affect performance, so\nprefer a single parameter approach whenever possible, especially on routes that\nare on the hot path of your application. If you are interested in how we handle\nthe routing, check out ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/delvedor/find-my-way"},"find-my-way"),"."),(0,r.kt)("p",null,"If you want a path containing a colon without declaring a parameter, use a\ndouble colon. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.post('/name::verb') // will be interpreted as /name:verb\n")),(0,r.kt)("h3",{id:"async-await"},"Async Await"),(0,r.kt)("a",{id:"async-await"}),(0,r.kt)("p",null,"Are you an ",(0,r.kt)("inlineCode",{parentName:"p"},"async/await")," user? We have you covered!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', options, async function (request, reply) {\n  var data = await getData()\n  var processed = await processData(data)\n  return processed\n})\n")),(0,r.kt)("p",null,"As you can see, we are not calling ",(0,r.kt)("inlineCode",{parentName:"p"},"reply.send")," to send back the data to the\nuser. You just need to return the body and you are done!"),(0,r.kt)("p",null,"If you need it you can also send back the data to the user with ",(0,r.kt)("inlineCode",{parentName:"p"},"reply.send"),". In\nthis case do not forget to ",(0,r.kt)("inlineCode",{parentName:"p"},"return reply")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"await reply")," in your ",(0,r.kt)("inlineCode",{parentName:"p"},"async"),"\nhandler or you will introduce a race condition in certain situations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', options, async function (request, reply) {\n  var data = await getData()\n  var processed = await processData(data)\n  return reply.send(processed)\n})\n")),(0,r.kt)("p",null,"If the route is wrapping a callback-based API that will call ",(0,r.kt)("inlineCode",{parentName:"p"},"reply.send()"),"\noutside of the promise chain, it is possible to ",(0,r.kt)("inlineCode",{parentName:"p"},"await reply"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', options, async function (request, reply) {\n  setImmediate(() => {\n    reply.send({ hello: 'world' })\n  })\n  await reply\n})\n")),(0,r.kt)("p",null,"Returning reply also works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', options, async function (request, reply) {\n  setImmediate(() => {\n    reply.send({ hello: 'world' })\n  })\n  return reply\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Warning:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When using both ",(0,r.kt)("inlineCode",{parentName:"li"},"return value")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"reply.send(value)")," at the same time, the\nfirst one that happens takes precedence, the second value will be discarded,\nand a ",(0,r.kt)("em",{parentName:"li"},"warn")," log will also be emitted because you tried to send a response\ntwice."),(0,r.kt)("li",{parentName:"ul"},"Calling ",(0,r.kt)("inlineCode",{parentName:"li"},"reply.send()")," outside of the promise is possible but requires special\nattention. For more details read ",(0,r.kt)("a",{parentName:"li",href:"#promise-resolution"},"promise-resolution"),"."),(0,r.kt)("li",{parentName:"ul"},"You cannot return ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"),". For more details read\n",(0,r.kt)("a",{parentName:"li",href:"#promise-resolution"},"promise-resolution"),".")),(0,r.kt)("h3",{id:"promise-resolution"},"Promise resolution"),(0,r.kt)("a",{id:"promise-resolution"}),(0,r.kt)("p",null,"If your handler is an ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," function or returns a promise, you should be aware\nof the special behavior that is necessary to support the callback and promise\ncontrol-flow. When the handler's promise is resolved, the reply will be\nautomatically sent with its value unless you explicitly await or return ",(0,r.kt)("inlineCode",{parentName:"p"},"reply"),"\nin your handler."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If you want to use ",(0,r.kt)("inlineCode",{parentName:"li"},"async/await")," or promises but respond with a value with\n",(0,r.kt)("inlineCode",{parentName:"li"},"reply.send"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Do")," ",(0,r.kt)("inlineCode",{parentName:"li"},"return reply")," / ",(0,r.kt)("inlineCode",{parentName:"li"},"await reply"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Do not")," forget to call ",(0,r.kt)("inlineCode",{parentName:"li"},"reply.send"),"."))),(0,r.kt)("li",{parentName:"ol"},"If you want to use ",(0,r.kt)("inlineCode",{parentName:"li"},"async/await")," or promises:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Do not")," use ",(0,r.kt)("inlineCode",{parentName:"li"},"reply.send"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Do")," return the value that you want to send.")))),(0,r.kt)("p",null,"In this way, we can support both ",(0,r.kt)("inlineCode",{parentName:"p"},"callback-style")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"async-await"),", with the\nminimum trade-off. Despite so much freedom we highly recommend going with only\none style because error handling should be handled in a consistent way within\nyour application."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notice"),": Every async function returns a promise by itself."),(0,r.kt)("h3",{id:"route-prefixing"},"Route Prefixing"),(0,r.kt)("a",{id:"route-prefixing"}),(0,r.kt)("p",null,"Sometimes you need to maintain two or more different versions of the same API; a\nclassic approach is to prefix all the routes with the API version number,\n",(0,r.kt)("inlineCode",{parentName:"p"},"/v1/user")," for example. Fastify offers you a fast and smart way to create\ndifferent versions of the same API without changing all the route names by hand,\n",(0,r.kt)("em",{parentName:"p"},"route prefixing"),". Let's see how it works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// server.js\nconst fastify = require('fastify')()\n\nfastify.register(require('./routes/v1/users'), { prefix: '/v1' })\nfastify.register(require('./routes/v2/users'), { prefix: '/v2' })\n\nfastify.listen({ port: 3000 })\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// routes/v1/users.js\nmodule.exports = function (fastify, opts, done) {\n  fastify.get('/user', handler_v1)\n  done()\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// routes/v2/users.js\nmodule.exports = function (fastify, opts, done) {\n  fastify.get('/user', handler_v2)\n  done()\n}\n")),(0,r.kt)("p",null,"Fastify will not complain because you are using the same name for two different\nroutes, because at compilation time it will handle the prefix automatically\n",(0,r.kt)("em",{parentName:"p"},"(this also means that the performance will not be affected at all!)"),"."),(0,r.kt)("p",null,"Now your clients will have access to the following routes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/v1/user")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/v2/user"))),(0,r.kt)("p",null,"You can do this as many times as you want, it also works for nested ",(0,r.kt)("inlineCode",{parentName:"p"},"register"),",\nand route parameters are supported as well."),(0,r.kt)("p",null,"In case you want to use prefix for all of your routes, you can put them inside a\nplugin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')()\n\nconst route = {\n    method: 'POST',\n    url: '/login',\n    handler: () => {},\n    schema: {},\n}\n\nfastify.register(function(app, _, done) {\n  app.get('/users', () => {})\n  app.route(route)\n\n  done()\n}, { prefix: '/v1' }) // global route prefix\n\nawait fastify.listen({ port: 0 })\n")),(0,r.kt)("h3",{id:"route-prefixing-and-fastify-plugin"},"Route Prefixing and fastify-plugin"),(0,r.kt)("a",{id:"fastify-plugin"}),(0,r.kt)("p",null,"Be aware that if you use\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-plugin"},(0,r.kt)("inlineCode",{parentName:"a"},"fastify-plugin"))," for wrapping your\nroutes, this option will not work. You can still make it work by wrapping a\nplugin in a plugin, e. g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fp = require('fastify-plugin')\nconst routes = require('./lib/routes')\n\nmodule.exports = fp(async function (app, opts) {\n  app.register(routes, {\n    prefix: '/v1',\n  })\n}, {\n  name: 'my-routes'\n})\n")),(0,r.kt)("h4",{id:"handling-of--route-inside-prefixed-plugins"},"Handling of / route inside prefixed plugins"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," route has different behavior depending on if the prefix ends with ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," or\nnot. As an example, if we consider a prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"/something/"),", adding a ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," route\nwill only match ",(0,r.kt)("inlineCode",{parentName:"p"},"/something/"),". If we consider a prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"/something"),", adding a\n",(0,r.kt)("inlineCode",{parentName:"p"},"/"),"\xa0route will match both ",(0,r.kt)("inlineCode",{parentName:"p"},"/something")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"/something/"),"."),(0,r.kt)("p",null,"See the ",(0,r.kt)("inlineCode",{parentName:"p"},"prefixTrailingSlash")," route option above to change this behavior."),(0,r.kt)("h3",{id:"custom-log-level"},"Custom Log Level"),(0,r.kt)("a",{id:"custom-log-level"}),(0,r.kt)("p",null,"You might need different log levels in your routes; Fastify achieves this in a\nvery straightforward way."),(0,r.kt)("p",null,"You just need to pass the option ",(0,r.kt)("inlineCode",{parentName:"p"},"logLevel")," to the plugin option or the route\noption with the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino/blob/master/docs/api.md#level-string"},"value"),"\nthat you need."),(0,r.kt)("p",null,"Be aware that if you set the ",(0,r.kt)("inlineCode",{parentName:"p"},"logLevel")," at plugin level, also the\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Server#setnotfoundhandler"},(0,r.kt)("inlineCode",{parentName:"a"},"setNotFoundHandler"))," and\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Server#seterrorhandler"},(0,r.kt)("inlineCode",{parentName:"a"},"setErrorHandler"))," will be affected."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// server.js\nconst fastify = require('fastify')({ logger: true })\n\nfastify.register(require('./routes/user'), { logLevel: 'warn' })\nfastify.register(require('./routes/events'), { logLevel: 'debug' })\n\nfastify.listen({ port: 3000 })\n")),(0,r.kt)("p",null,"Or you can directly pass it to a route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', { logLevel: 'warn' }, (request, reply) => {\n  reply.send({ hello: 'world' })\n})\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Remember that the custom log level is applied only to the routes, and not to\nthe global Fastify Logger, accessible with ",(0,r.kt)("inlineCode",{parentName:"em"},"fastify.log"))),(0,r.kt)("h3",{id:"custom-log-serializer"},"Custom Log Serializer"),(0,r.kt)("a",{id:"custom-log-serializer"}),(0,r.kt)("p",null,"In some contexts, you may need to log a large object but it could be a waste of\nresources for some routes. In this case, you can define custom\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino/blob/master/docs/api.md#serializers-object"},(0,r.kt)("inlineCode",{parentName:"a"},"serializers")),"\nand attach them in the right context!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({ logger: true })\n\nfastify.register(require('./routes/user'), {\n  logSerializers: {\n    user: (value) => `My serializer one - ${value.name}`\n  }\n})\nfastify.register(require('./routes/events'), {\n  logSerializers: {\n    user: (value) => `My serializer two - ${value.name} ${value.surname}`\n  }\n})\n\nfastify.listen({ port: 3000 })\n")),(0,r.kt)("p",null,"You can inherit serializers by context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = Fastify({\n  logger: {\n    level: 'info',\n    serializers: {\n      user (req) {\n        return {\n          method: req.method,\n          url: req.url,\n          headers: req.headers,\n          hostname: req.hostname,\n          remoteAddress: req.ip,\n          remotePort: req.socket.remotePort\n        }\n      }\n    }\n  }\n})\n\nfastify.register(context1, {\n  logSerializers: {\n    user: value => `My serializer father - ${value}`\n  }\n})\n\nasync function context1 (fastify, opts) {\n  fastify.get('/', (req, reply) => {\n    req.log.info({ user: 'call father serializer', key: 'another key' })\n    // shows: { user: 'My serializer father - call father  serializer', key: 'another key' }\n    reply.send({})\n  })\n}\n\nfastify.listen({ port: 3000 })\n")),(0,r.kt)("h3",{id:"config"},"Config"),(0,r.kt)("a",{id:"routes-config"}),(0,r.kt)("p",null,"Registering a new handler, you can pass a configuration object to it and\nretrieve it in the handler."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// server.js\nconst fastify = require('fastify')()\n\nfunction handler (req, reply) {\n  reply.send(reply.context.config.output)\n}\n\nfastify.get('/en', { config: { output: 'hello world!' } }, handler)\nfastify.get('/it', { config: { output: 'ciao mondo!' } }, handler)\n\nfastify.listen({ port: 3000 })\n")),(0,r.kt)("h3",{id:"constraints"},"Constraints"),(0,r.kt)("a",{id:"constraints"}),(0,r.kt)("p",null,"Fastify supports constraining routes to match only certain requests based on\nsome property of the request, like the ",(0,r.kt)("inlineCode",{parentName:"p"},"Host")," header, or any other value via\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/delvedor/find-my-way"},(0,r.kt)("inlineCode",{parentName:"a"},"find-my-way"))," constraints.\nConstraints are specified in the ",(0,r.kt)("inlineCode",{parentName:"p"},"constraints")," property of the route options.\nFastify has two built-in constraints ready for use: the ",(0,r.kt)("inlineCode",{parentName:"p"},"version")," constraint and\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," constraint, and you can add your own custom constraint strategies to\ninspect other parts of a request to decide if a route should be executed for a\nrequest."),(0,r.kt)("h4",{id:"version-constraints"},"Version Constraints"),(0,r.kt)("p",null,"You can provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"version")," key in the ",(0,r.kt)("inlineCode",{parentName:"p"},"constraints")," option to a route.\nVersioned routes allow you to declare multiple handlers for the same HTTP route\npath, which will then be matched according to each request's ",(0,r.kt)("inlineCode",{parentName:"p"},"Accept-Version"),"\nheader. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Accept-Version")," header value should follow the\n",(0,r.kt)("a",{parentName:"p",href:"https://semver.org/"},"semver")," specification, and routes should be declared with\nexact semver versions for matching."),(0,r.kt)("p",null,"Fastify will require a request ",(0,r.kt)("inlineCode",{parentName:"p"},"Accept-Version")," header to be set if the route\nhas a version set, and will prefer a versioned route to a non-versioned route\nfor the same path. Advanced version ranges and pre-releases currently are not\nsupported."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Be aware that using this feature will cause a degradation of the overall\nperformances of the router.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.route({\n  method: 'GET',\n  url: '/',\n  constraints: { version: '1.2.0' },\n  handler: function (request, reply) {\n    reply.send({ hello: 'world' })\n  }\n})\n\nfastify.inject({\n  method: 'GET',\n  url: '/',\n  headers: {\n    'Accept-Version': '1.x' // it could also be '1.2.0' or '1.2.x'\n  }\n}, (err, res) => {\n  // { hello: 'world' }\n})\n")),(0,r.kt)("blockquote",null,(0,r.kt)("h2",{parentName:"blockquote",id:"--security-notice"},"\u26a0  Security Notice"),(0,r.kt)("p",{parentName:"blockquote"},"Remember to set a\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary"},(0,r.kt)("inlineCode",{parentName:"a"},"Vary")),"\nheader in your responses with the value you are using for defining the\nversioning (e.g.: ",(0,r.kt)("inlineCode",{parentName:"p"},"'Accept-Version'"),"), to prevent cache poisoning attacks. You\ncan also configure this as part of your Proxy/CDN."),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const append = require('vary').append\nfastify.addHook('onSend', (req, reply, payload, done) => {\n  if (req.headers['accept-version']) { // or the custom header you are using\n    let value = reply.getHeader('Vary') || ''\n    const header = Array.isArray(value) ? value.join(', ') : String(value)\n    if ((value = append(header, 'Accept-Version'))) { // or the custom header you are using\n      reply.header('Vary', value)\n    }\n  }\n done()\n})\n"))),(0,r.kt)("p",null,"If you declare multiple versions with the same major or minor, Fastify will\nalways choose the highest compatible with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Accept-Version")," header value."),(0,r.kt)("p",null,"If the request will not have the ",(0,r.kt)("inlineCode",{parentName:"p"},"Accept-Version")," header, a 404 error will be\nreturned."),(0,r.kt)("p",null,"It is possible to define a custom version matching logic. This can be done\nthrough the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Server#constraints"},(0,r.kt)("inlineCode",{parentName:"a"},"constraints"))," configuration when creating\na Fastify server instance."),(0,r.kt)("h4",{id:"host-constraints"},"Host Constraints"),(0,r.kt)("p",null,"You can provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," key in the ",(0,r.kt)("inlineCode",{parentName:"p"},"constraints")," route option for to limit that\nroute to only be matched for certain values of the request ",(0,r.kt)("inlineCode",{parentName:"p"},"Host")," header. ",(0,r.kt)("inlineCode",{parentName:"p"},"host"),"\nconstraint values can be specified as strings for exact matches or RegExps for\narbitrary host matching."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.route({\n  method: 'GET',\n  url: '/',\n  constraints: { host: 'auth.fastify.io' },\n  handler: function (request, reply) {\n    reply.send('hello world from auth.fastify.io')\n  }\n})\n\nfastify.inject({\n  method: 'GET',\n  url: '/',\n  headers: {\n    'Host': 'example.com'\n  }\n}, (err, res) => {\n  // 404 because the host doesn't match the constraint\n})\n\nfastify.inject({\n  method: 'GET',\n  url: '/',\n  headers: {\n    'Host': 'auth.fastify.io'\n  }\n}, (err, res) => {\n  // => 'hello world from auth.fastify.io'\n})\n")),(0,r.kt)("p",null,"RegExp ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," constraints can also be specified allowing constraining to hosts\nmatching wildcard subdomains (or any other pattern):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.route({\n  method: 'GET',\n  url: '/',\n  constraints: { host: /.*\\.fastify\\.io/ }, // will match any subdomain of fastify.io\n  handler: function (request, reply) {\n    reply.send('hello world from ' + request.headers.host)\n  }\n})\n")),(0,r.kt)("h3",{id:"--http-version-check"},"\u26a0  HTTP version check"),(0,r.kt)("p",null,"Fastify will check the HTTP version of every request, based on configuration\noptions (",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Server#http2"},"http2"),", ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Server#https"},"https"),", and\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.6.x/Reference/Server#serverfactory"},"serverFactory"),"), to determine if it matches one or\nall of the > following versions: ",(0,r.kt)("inlineCode",{parentName:"p"},"2.0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"1.1"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"1.0"),". If Fastify receives a\ndifferent HTTP version in the request it will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"505 HTTP Version Not\nSupported")," error."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:"center"},"2.0"),(0,r.kt)("th",{parentName:"tr",align:"center"},"1.1"),(0,r.kt)("th",{parentName:"tr",align:"center"},"1.0"),(0,r.kt)("th",{parentName:"tr",align:"center"},"skip"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"http2"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"http2 + https"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"http2 + https.allowHTTP1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"https"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"http"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"serverFactory"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713")))),(0,r.kt)("p",null," Note: The internal HTTP version check will be removed in the future when Node\nimplements ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nodejs/node/issues/43115"},"this feature"),"."))}d.isMDXComponent=!0}}]);