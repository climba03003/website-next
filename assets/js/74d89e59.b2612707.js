"use strict";(self.webpackChunkfastify_website=self.webpackChunkfastify_website||[]).push([[6597],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return t?a.createElement(f,o(o({ref:n},d),{},{components:t})):a.createElement(f,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1202:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],l={title:"Serverless"},s=void 0,p={unversionedId:"Serverless",id:"version-v2/Serverless",isDocsHomePage:!1,title:"Serverless",description:"Run serverless applications and REST APIs using your existing Fastify application.",source:"@site/versioned_docs/version-v2/Serverless.md",sourceDirName:".",slug:"/Serverless",permalink:"/website-next/docs/v2/Serverless",editUrl:"https://github.com/fastify/website-next/edit/main/docs/versioned_docs/version-v2/Serverless.md",tags:[],version:"v2",frontMatter:{title:"Serverless"},sidebar:"version-v2/tutorialSidebar",previous:{title:"Server",permalink:"/website-next/docs/v2/Server"},next:{title:"Testing",permalink:"/website-next/docs/v2/Testing"}},d=[{value:"Contents",id:"contents",children:[],level:3},{value:"Attention Readers:",id:"attention-readers",children:[],level:3},{value:"AWS Lambda",id:"aws-lambda",children:[{value:"app.js",id:"appjs",children:[],level:3},{value:"lambda.js",id:"lambdajs",children:[],level:3},{value:"Example",id:"example",children:[],level:3},{value:"Considerations",id:"considerations",children:[],level:3}],level:2},{value:"Google Cloud Run",id:"google-cloud-run",children:[{value:"Adjust Fastify server",id:"adjust-fastify-server",children:[],level:3},{value:"Add a Dockerfile",id:"add-a-dockerfile",children:[],level:3},{value:"Add a .dockerignore",id:"add-a-dockerignore",children:[],level:3},{value:"Submit build",id:"submit-build",children:[],level:3},{value:"Deploy Image",id:"deploy-image",children:[],level:3}],level:2},{value:"Vercel",id:"vercel",children:[],level:2}],u={toc:d};function c(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Run serverless applications and REST APIs using your existing Fastify application."),(0,i.kt)("h3",{id:"contents"},"Contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#aws-lambda"},"AWS Lambda"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#appjs"},"app.js")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#lambdajs"},"lambda.js")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#example"},"Example")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#considerations"},"Considerations")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#google-cloud-run"},"Google Cloud Run"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#adjust-fastify-server"},"Adjust Fastify server")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#add-a-dockerfile"},"Add a Dockerfile")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#add-a-dockerignore"},"Add a .dockerignore")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#submit-build"},"Submit build")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#deploy-image"},"Deploy Image")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#vercel"},"Vercel"))),(0,i.kt)("h3",{id:"attention-readers"},"Attention Readers:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Fastify is not designed to run on serverless environments.\nThe Fastify framework is designed to make implementing a traditional HTTP/S server easy.\nServerless environments requests differently than a standard HTTP/S server;\nthus, we cannot guarantee it will work as expected with Fastify.\nRegardless, based on the examples given in this document,\nit is possible to use Fastify in a serverless environment.\nAgain, keep in mind that this is not Fastify's intended use case and\nwe do not test for such integration scenarios.")),(0,i.kt)("h2",{id:"aws-lambda"},"AWS Lambda"),(0,i.kt)("p",null,"The sample provided allows you to easily build serverless web applications/services\nand RESTful APIs using Fastify on top of AWS Lambda and Amazon API Gateway."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: Using ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/fastify/aws-lambda-fastify"},"aws-lambda-fastify")," is just one possible way.")),(0,i.kt)("h3",{id:"appjs"},"app.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify');\n\nfunction init() {\n  const app = fastify();\n  app.get('/', (request, reply) => reply.send({ hello: 'world' }));\n  return app;\n}\n\nif (require.main === module) {\n  // called directly i.e. \"node app\"\n  init().listen(3000, (err) => {\n    if (err) console.error(err);\n    console.log('server listening on 3000');\n  });\n} else {\n  // required as a module => executed on aws lambda\n  module.exports = init;\n}\n")),(0,i.kt)("p",null,"When executed in your lambda function we don't need to listen to a specific port,\nso we just export the wrapper function ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," in this case.\nThe ",(0,i.kt)("a",{parentName:"p",href:"https://www.fastify.io/docs/latest/Serverless/#lambda-js"},(0,i.kt)("inlineCode",{parentName:"a"},"lambda.js"))," file will use this export."),(0,i.kt)("p",null,"When you execute your Fastify application like always,\ni.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"node app.js")," ",(0,i.kt)("em",{parentName:"p"},"(the detection for this could be ",(0,i.kt)("inlineCode",{parentName:"em"},"require.main === module"),")"),",\nyou can normally listen to your port, so you can still run your Fastify function locally."),(0,i.kt)("h3",{id:"lambdajs"},"lambda.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const awsLambdaFastify = require('aws-lambda-fastify')\nconst init = require('./app');\n\nconst proxy = awsLambdaFastify(init())\n// or\n// const proxy = awsLambdaFastify(init(), { binaryMimeTypes: ['application/octet-stream'] })\n\nexports.handler = proxy;\n// or\n// exports.handler = (event, context, callback) => proxy(event, context, callback);\n// or\n// exports.handler = (event, context) => proxy(event, context);\n// or\n// exports.handler = async (event, context) => proxy(event, context);\n")),(0,i.kt)("p",null,"We just require ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/aws-lambda-fastify"},"aws-lambda-fastify"),"\n(make sure you install the dependency ",(0,i.kt)("inlineCode",{parentName:"p"},"npm i --save aws-lambda-fastify"),") and our\n",(0,i.kt)("a",{parentName:"p",href:"https://www.fastify.io/docs/latest/Serverless/#app-js"},(0,i.kt)("inlineCode",{parentName:"a"},"app.js"))," file and call the\nexported ",(0,i.kt)("inlineCode",{parentName:"p"},"awsLambdaFastify")," function with the ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," as the only parameter.\nThe resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"proxy")," function has the correct signature to be used as lambda ",(0,i.kt)("inlineCode",{parentName:"p"},"handler")," function.\nThis way all the incoming events (API Gateway requests) are passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"proxy")," function of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/aws-lambda-fastify"},"aws-lambda-fastify"),"."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"An example deployable with ",(0,i.kt)("a",{parentName:"p",href:"https://claudiajs.com/tutorials/serverless-express.html"},"claudia.js")," can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/claudiajs/example-projects/tree/master/fastify-app-lambda"},"here"),"."),(0,i.kt)("h3",{id:"considerations"},"Considerations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"API Gateway doesn't support streams yet, so you're not able to handle ",(0,i.kt)("a",{parentName:"li",href:"https://www.fastify.io/docs/latest/Reply/#streams"},"streams"),". "),(0,i.kt)("li",{parentName:"ul"},"API Gateway has a timeout of 29 seconds, so it's important to provide a reply during this time.")),(0,i.kt)("h2",{id:"google-cloud-run"},"Google Cloud Run"),(0,i.kt)("p",null,"Unlike AWS Lambda or Google Cloud Functions, Google Cloud Run is a serverless ",(0,i.kt)("strong",{parentName:"p"},"container")," environment. It's primary purpose is to provide an infrastructure-abstracted environment to run arbitrary containers. As a result, Fastify can be deployed to Google Cloud Run with little-to-no code changes from the way you would write your Fastify app normally."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Follow the steps below to deploy to Google Cloud Run if you are already familiar with gcloud or just follow their ",(0,i.kt)("a",{parentName:"em",href:"https://cloud.google.com/run/docs/quickstarts/build-and-deploy"},"quickstart")),"."),(0,i.kt)("h3",{id:"adjust-fastify-server"},"Adjust Fastify server"),(0,i.kt)("p",null,"In order for Fastify to properly listen for requests within the container, be sure to set the correct port and address:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'function build() {\n  const fastify = Fastify({ trustProxy: true })\n  return fastify\n}\n\nasync function start() {\n  // Google Cloud Run will set this environment variable for you, so\n  // you can also use it to detect if you are running in Cloud Run\n  const IS_GOOGLE_CLOUD_RUN = process.env.K_SERVICE !== undefined\n\n  // You must listen on the port Cloud Run provides\n  const port = process.env.PORT || 3000\n\n  // You must listen on all IPV4 addresses in Cloud Run\n  const address = IS_GOOGLE_CLOUD_RUN ? "0.0.0.0" : undefined\n\n  try {\n    const server = build()\n    const address = await server.listen(port, address)\n    console.log(`Listening on ${address}`)\n  } catch (err) {\n    console.error(err)\n    process.exit(1)\n  }\n}\n\nmodule.exports = build\n\nif (require.main === module) {\n  start()\n}\n')),(0,i.kt)("h3",{id:"add-a-dockerfile"},"Add a Dockerfile"),(0,i.kt)("p",null,"You can add any valid ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," that packages and runs a Node app. A basic ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," can be found in the official ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/knative/docs/blob/2d654d1fd6311750cc57187a86253c52f273d924/docs/serving/samples/hello-world/helloworld-nodejs/Dockerfile"},"gcloud docs"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'# Use the official Node.js 10 image.\n# https://hub.docker.com/_/node\nFROM node:10\n\n# Create and change to the app directory.\nWORKDIR /usr/src/app\n\n# Copy application dependency manifests to the container image.\n# A wildcard is used to ensure both package.json AND package-lock.json are copied.\n# Copying this separately prevents re-running npm install on every code change.\nCOPY package*.json ./\n\n# Install production dependencies.\nRUN npm install --only=production\n\n# Copy local code to the container image.\nCOPY . .\n\n# Run the web service on container startup.\nCMD [ "npm", "start" ]\n')),(0,i.kt)("h3",{id:"add-a-dockerignore"},"Add a .dockerignore"),(0,i.kt)("p",null,"To keep build artifacts out of your container (which keeps it small and improves build times), add a ",(0,i.kt)("inlineCode",{parentName:"p"},".dockerignore")," file like the one below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-.dockerignore"},"Dockerfile\nREADME.md\nnode_modules\nnpm-debug.log\n")),(0,i.kt)("h3",{id:"submit-build"},"Submit build"),(0,i.kt)("p",null,"Next, submit your app to be built into a Docker image by running the following command (replacing ",(0,i.kt)("inlineCode",{parentName:"p"},"PROJECT-ID")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"APP-NAME")," with your GCP project id and an app name):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud builds submit --tag gcr.io/PROJECT-ID/APP-NAME\n")),(0,i.kt)("h3",{id:"deploy-image"},"Deploy Image"),(0,i.kt)("p",null,"After your image has built, you can deploy it with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud beta run deploy --image gcr.io/PROJECT-ID/APP-NAME --platform managed\n")),(0,i.kt)("p",null,"Your app will be accessible from the URL GCP provides."),(0,i.kt)("h2",{id:"vercel"},"Vercel"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://vercel.com/"},"Vercel")," provides zero configuration deployment for\nNode.js applications. In order to use now, it is as simple as\nconfiguring your ",(0,i.kt)("inlineCode",{parentName:"p"},"vercel.json")," file like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "version": 2,\n  "builds": [\n    {\n      "src": "api/serverless.js",\n      "use": "@vercel/node",\n      "config": {\n        "helpers": false\n      }\n    }\n  ],\n  "routes": [\n    { "src": "/.*", "dest": "/api/serverless.js"}\n  ]\n}\n')),(0,i.kt)("p",null,"Then, write a ",(0,i.kt)("inlineCode",{parentName:"p"},"api/serverless.js")," like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"'use strict'\n\nconst build = require('./index')\n\nconst app = build()\n\nmodule.exports = async function (req, res) {\n  await app.ready()\n  app.server.emit('request', req, res)\n}\n")),(0,i.kt)("p",null,"And a ",(0,i.kt)("inlineCode",{parentName:"p"},"api/index.js")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"'use strict'\n\nconst fastify = require('fastify')\n\nfunction build () {\n  const app = fastify({\n    logger: true\n  })\n\n  app.get('/', async (req, res) => {\n    const { name = 'World' } = req.query\n    req.log.info({ name }, 'hello world!')\n    return `Hello ${name}!`\n  })\n\n  return app\n}\n\nmodule.exports = build\n")),(0,i.kt)("p",null,"Note that you'll need to use Node 10 by setting it in ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'  "engines": {\n    "node": "10.x"\n  },\n')))}c.isMDXComponent=!0}}]);