"use strict";(self.webpackChunk_fastify_website=self.webpackChunk_fastify_website||[]).push([[62024],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,y=d["".concat(l,".").concat(c)]||d[c]||f[c]||s;return n?a.createElement(y,o(o({ref:t},u),{},{components:n})):a.createElement(y,o({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},57161:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const s={},o=void 0,i={unversionedId:"Guides/Getting-Started",id:"version-v4.11.x/Guides/Getting-Started",title:"Getting-Started",description:"Getting Started",source:"@site/versioned_docs/version-v4.11.x/Guides/Getting-Started.md",sourceDirName:"Guides",slug:"/Guides/Getting-Started",permalink:"/website-next/docs/v4.11.x/Guides/Getting-Started",draft:!1,editUrl:"https://github.com/fastify/fastify/edit/main/docs/Guides/Getting-Started.md",tags:[],version:"v4.11.x",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Fluent-Schema",permalink:"/website-next/docs/v4.11.x/Guides/Fluent-Schema"},next:{title:"V3 Migration Guide",permalink:"/website-next/docs/v4.11.x/Guides/Migration-Guide-V3"}},l={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Install",id:"install",level:3},{value:"Your first server",id:"your-first-server",level:3},{value:"Your first plugin",id:"your-first-plugin",level:3},{value:"Loading order of your plugins",id:"loading-order-of-your-plugins",level:3},{value:"Validate your data",id:"validate-your-data",level:3},{value:"Serialize your data",id:"serialize-your-data",level:3},{value:"Parsing request payloads",id:"parsing-request-payloads",level:3},{value:"Extend your server",id:"extend-your-server",level:3},{value:"Test your server",id:"test-your-server",level:3},{value:"Run your server from CLI",id:"run-your-server-from-cli",level:3},{value:"Slides and Videos",id:"slides-and-videos",level:3}],u={toc:p};function f(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"Hello! Thank you for checking out Fastify!"),(0,r.kt)("p",null,"This document aims to be a gentle introduction to the framework and its\nfeatures. It is an elementary preface with examples and links to other parts of\nthe documentation."),(0,r.kt)("p",null,"Let's start!"),(0,r.kt)("h3",{id:"install"},"Install"),(0,r.kt)("a",{id:"install"}),(0,r.kt)("p",null,"Install with npm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm i fastify\n")),(0,r.kt)("p",null,"Install with yarn:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"yarn add fastify\n")),(0,r.kt)("h3",{id:"your-first-server"},"Your first server"),(0,r.kt)("a",{id:"first-server"}),(0,r.kt)("p",null,"Let's write our first server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Require the framework and instantiate it\n\n// ESM\nimport Fastify from 'fastify'\nconst fastify = Fastify({\n  logger: true\n})\n// CommonJs\nconst fastify = require('fastify')({\n  logger: true\n})\n\n// Declare a route\nfastify.get('/', function (request, reply) {\n  reply.send({ hello: 'world' })\n})\n\n// Run the server!\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  // Server is now listening on ${address}\n})\n")),(0,r.kt)("p",null,"Do you prefer to use ",(0,r.kt)("inlineCode",{parentName:"p"},"async/await"),"? Fastify supports it out-of-the-box."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// ESM\nimport Fastify from 'fastify'\nconst fastify = Fastify({\n  logger: true\n})\n// CommonJs\nconst fastify = require('fastify')({\n  logger: true\n})\n\nfastify.get('/', async (request, reply) => {\n  return { hello: 'world' }\n})\n\n/**\n * Run the server!\n */\nconst start = async () => {\n  try {\n    await fastify.listen({ port: 3000 })\n  } catch (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n}\nstart()\n")),(0,r.kt)("p",null,"Awesome, that was easy."),(0,r.kt)("p",null,"Unfortunately, writing a complex application requires significantly more code\nthan this example. A classic problem when you are building a new application is\nhow to handle multiple files, asynchronous bootstrapping, and the architecture\nof your code."),(0,r.kt)("p",null,"Fastify offers an easy platform that helps to solve all of the problems outlined\nabove, and more!"),(0,r.kt)("blockquote",null,(0,r.kt)("h2",{parentName:"blockquote",id:"note"},"Note"),(0,r.kt)("p",{parentName:"blockquote"},"The above examples, and subsequent examples in this document, default to\nlistening ",(0,r.kt)("em",{parentName:"p"},"only")," on the localhost ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1")," interface. To listen on all\navailable IPv4 interfaces the example should be modified to listen on\n",(0,r.kt)("inlineCode",{parentName:"p"},"0.0.0.0")," like so:"),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.listen({ port: 3000, host: '0.0.0.0' }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  fastify.log.info(`server listening on ${address}`)\n})\n")),(0,r.kt)("p",{parentName:"blockquote"},"Similarly, specify ",(0,r.kt)("inlineCode",{parentName:"p"},"::1")," to accept only local connections via IPv6. Or specify\n",(0,r.kt)("inlineCode",{parentName:"p"},"::")," to accept connections on all IPv6 addresses, and, if the operating system\nsupports it, also on all IPv4 addresses."),(0,r.kt)("p",{parentName:"blockquote"},"When deploying to a Docker (or another type of) container using ",(0,r.kt)("inlineCode",{parentName:"p"},"0.0.0.0")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"::")," would be the easiest method for exposing the application.")),(0,r.kt)("h3",{id:"your-first-plugin"},"Your first plugin"),(0,r.kt)("a",{id:"first-plugin"}),(0,r.kt)("p",null,"As with JavaScript, where everything is an object, with Fastify everything is a\nplugin."),(0,r.kt)("p",null,"Before digging into it, let's see how it works!"),(0,r.kt)("p",null,"Let's declare our basic server, but instead of declaring the route inside the\nentry point, we'll declare it in an external file (check out the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/Routes"},"route\ndeclaration")," docs)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// ESM\nimport Fastify from 'fastify'\nimport firstRoute from './our-first-route'\n/**\n * @type {import('fastify').FastifyInstance} Instance of Fastify\n */\nconst fastify = Fastify({\n  logger: true\n})\n\nfastify.register(firstRoute)\n\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  // Server is now listening on ${address}\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// CommonJs\n/**\n * @type {import('fastify').FastifyInstance} Instance of Fastify\n */\nconst fastify = require('fastify')({\n  logger: true\n})\n\nfastify.register(require('./our-first-route'))\n\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  // Server is now listening on ${address}\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// our-first-route.js\n\n/**\n * Encapsulates the routes\n * @param {FastifyInstance} fastify  Encapsulated Fastify Instance\n * @param {Object} options plugin options, refer to https://www.fastify.io/docs/latest/Reference/Plugins/#plugin-options\n */\nasync function routes (fastify, options) {\n  fastify.get('/', async (request, reply) => {\n    return { hello: 'world' }\n  })\n}\n\nmodule.exports = routes\n")),(0,r.kt)("p",null,"In this example, we used the ",(0,r.kt)("inlineCode",{parentName:"p"},"register")," API, which is the core of the Fastify\nframework. It is the only way to add routes, plugins, et cetera."),(0,r.kt)("p",null,"At the beginning of this guide, we noted that Fastify provides a foundation that\nassists with asynchronous bootstrapping of your application. Why is this\nimportant?"),(0,r.kt)("p",null,"Consider the scenario where a database connection is needed to handle data\nstorage. The database connection needs to be available before the server is\naccepting connections. How do we address this problem?"),(0,r.kt)("p",null,"A typical solution is to use a complex callback, or promises - a system that\nwill mix the framework API with other libraries and the application code."),(0,r.kt)("p",null,"Fastify handles this internally, with minimum effort!"),(0,r.kt)("p",null,"Let's rewrite the above example with a database connection."),(0,r.kt)("p",null,"First, install ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify-plugin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@fastify/mongodb"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm i fastify-plugin @fastify/mongodb\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"server.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// ESM\nimport Fastify from 'fastify'\nimport dbConnector from './our-db-connector'\nimport firstRoute from './our-first-route'\n\n/**\n * @type {import('fastify').FastifyInstance} Instance of Fastify\n */\nconst fastify = Fastify({\n  logger: true\n})\nfastify.register(dbConnector)\nfastify.register(firstRoute)\n\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  // Server is now listening on ${address}\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// CommonJs\n/**\n * @type {import('fastify').FastifyInstance} Instance of Fastify\n */\nconst fastify = require('fastify')({\n  logger: true\n})\n\nfastify.register(require('./our-db-connector'))\nfastify.register(require('./our-first-route'))\n\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n  // Server is now listening on ${address}\n})\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"our-db-connector.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// ESM\nimport fastifyPlugin from 'fastify-plugin'\nimport fastifyMongo from '@fastify/mongodb'\n\n/**\n * @param {FastifyInstance} fastify\n * @param {Object} options\n */\nasync function dbConnector (fastify, options) {\n  fastify.register(fastifyMongo, {\n    url: 'mongodb://localhost:27017/test_database'\n  })\n}\n\n// Wrapping a plugin function with fastify-plugin exposes the decorators\n// and hooks, declared inside the plugin to the parent scope.\nmodule.exports = fastifyPlugin(dbConnector)\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// CommonJs\n/**\n * @type {import('fastify-plugin').FastifyPlugin}\n */\nconst fastifyPlugin = require('fastify-plugin')\n\n\n/**\n * Connects to a MongoDB database\n * @param {FastifyInstance} fastify Encapsulated Fastify Instance\n * @param {Object} options plugin options, refer to https://www.fastify.io/docs/latest/Reference/Plugins/#plugin-options\n */\nasync function dbConnector (fastify, options) {\n  fastify.register(require('@fastify/mongodb'), {\n    url: 'mongodb://localhost:27017/test_database'\n  })\n}\n\n// Wrapping a plugin function with fastify-plugin exposes the decorators\n// and hooks, declared inside the plugin to the parent scope.\nmodule.exports = fastifyPlugin(dbConnector)\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"our-first-route.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * A plugin that provide encapsulated routes\n * @param {FastifyInstance} fastify encapsulated fastify instance\n * @param {Object} options plugin options, refer to https://www.fastify.io/docs/latest/Reference/Plugins/#plugin-options\n */\nasync function routes (fastify, options) {\n  const collection = fastify.mongo.db.collection('test_collection')\n\n  fastify.get('/', async (request, reply) => {\n    return { hello: 'world' }\n  })\n\n  fastify.get('/animals', async (request, reply) => {\n    const result = await collection.find().toArray()\n    if (result.length === 0) {\n      throw new Error('No documents found')\n    }\n    return result\n  })\n\n  fastify.get('/animals/:animal', async (request, reply) => {\n    const result = await collection.findOne({ animal: request.params.animal })\n    if (!result) {\n      throw new Error('Invalid value')\n    }\n    return result\n  })\n\n  const animalBodyJsonSchema = {\n    type: 'object',\n    required: ['animal'],\n    properties: {\n      animal: { type: 'string' },\n    },\n  }\n\n  const schema = {\n    body: animalBodyJsonSchema,\n  }\n\n  fastify.post('/animals', { schema }, async (request, reply) => {\n    // we can use the `request.body` object to get the data sent by the client\n    const result = await collection.insertOne({ animal: request.body.animal })\n    return result\n  })\n}\n\nmodule.exports = routes\n")),(0,r.kt)("p",null,"Wow, that was fast!"),(0,r.kt)("p",null,"Let's recap what we have done here since we've introduced some new concepts."),(0,r.kt)("p",null,"As you can see, we used ",(0,r.kt)("inlineCode",{parentName:"p"},"register")," for both the database connector and the\nregistration of the routes."),(0,r.kt)("p",null,"This is one of the best features of Fastify, it will load your plugins in the\nsame order you declare them, and it will load the next plugin only once the\ncurrent one has been loaded. In this way, we can register the database connector\nin the first plugin and use it in the second ",(0,r.kt)("em",{parentName:"p"},"(read\n",(0,r.kt)("a",{parentName:"em",href:"/website-next/docs/v4.11.x/Reference/Plugins#handle-the-scope"},"here")," to understand how to handle the\nscope of a plugin)"),"."),(0,r.kt)("p",null,"Plugin loading starts when you call ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.listen()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.inject()")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.ready()")),(0,r.kt)("p",null,"The MongoDB plugin uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"decorate")," API to add custom objects to the Fastify\ninstance, making them available for use everywhere. Use of this API is\nencouraged to facilitate easy code reuse and to decrease code or logic\nduplication."),(0,r.kt)("p",null,"To dig deeper into how Fastify plugins work, how to develop new plugins, and for\ndetails on how to use the whole Fastify API to deal with the complexity of\nasynchronously bootstrapping an application, read ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Guides/Plugins-Guide"},"the hitchhiker's guide to\nplugins"),"."),(0,r.kt)("h3",{id:"loading-order-of-your-plugins"},"Loading order of your plugins"),(0,r.kt)("a",{id:"plugin-loading-order"}),(0,r.kt)("p",null,"To guarantee consistent and predictable behavior of your application, we highly\nrecommend to always load your code as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u2514\u2500\u2500 plugins (from the Fastify ecosystem)\n\u2514\u2500\u2500 your plugins (your custom plugins)\n\u2514\u2500\u2500 decorators\n\u2514\u2500\u2500 hooks\n\u2514\u2500\u2500 your services\n")),(0,r.kt)("p",null,"In this way, you will always have access to all of the properties declared in\nthe current scope."),(0,r.kt)("p",null,"As discussed previously, Fastify offers a solid encapsulation model, to help you\nbuild your application as single and independent services. If you want to\nregister a plugin only for a subset of routes, you just have to replicate the\nabove structure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u2514\u2500\u2500 plugins (from the Fastify ecosystem)\n\u2514\u2500\u2500 your plugins (your custom plugins)\n\u2514\u2500\u2500 decorators\n\u2514\u2500\u2500 hooks\n\u2514\u2500\u2500 your services\n    \u2502\n    \u2514\u2500\u2500  service A\n    \u2502     \u2514\u2500\u2500 plugins (from the Fastify ecosystem)\n    \u2502     \u2514\u2500\u2500 your plugins (your custom plugins)\n    \u2502     \u2514\u2500\u2500 decorators\n    \u2502     \u2514\u2500\u2500 hooks\n    \u2502     \u2514\u2500\u2500 your services\n    \u2502\n    \u2514\u2500\u2500  service B\n          \u2514\u2500\u2500 plugins (from the Fastify ecosystem)\n          \u2514\u2500\u2500 your plugins (your custom plugins)\n          \u2514\u2500\u2500 decorators\n          \u2514\u2500\u2500 hooks\n          \u2514\u2500\u2500 your services\n")),(0,r.kt)("h3",{id:"validate-your-data"},"Validate your data"),(0,r.kt)("a",{id:"validate-data"}),(0,r.kt)("p",null,"Data validation is extremely important and a core concept of the framework."),(0,r.kt)("p",null,"To validate incoming requests, Fastify uses ",(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSON\nSchema"),"."),(0,r.kt)("p",null,"(JTD schemas are loosely supported, but ",(0,r.kt)("inlineCode",{parentName:"p"},"jsonShorthand")," must be disabled first)"),(0,r.kt)("p",null,"Let's look at an example demonstrating validation for routes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @type {import('fastify').RouteShorthandOptions}\n * @const\n */\nconst opts = {\n  schema: {\n    body: {\n      type: 'object',\n      properties: {\n        someKey: { type: 'string' },\n        someOtherKey: { type: 'number' }\n      }\n    }\n  }\n}\n\nfastify.post('/', opts, async (request, reply) => {\n  return { hello: 'world' }\n})\n")),(0,r.kt)("p",null,"This example shows how to pass an options object to the route, which accepts a\n",(0,r.kt)("inlineCode",{parentName:"p"},"schema")," key that contains all of the schemas for route, ",(0,r.kt)("inlineCode",{parentName:"p"},"body"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"querystring"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"params"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"headers"),"."),(0,r.kt)("p",null,"Read ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/Validation-and-Serialization"},"Validation and\nSerialization")," to learn more."),(0,r.kt)("h3",{id:"serialize-your-data"},"Serialize your data"),(0,r.kt)("a",{id:"serialize-data"}),(0,r.kt)("p",null,"Fastify has first-class support for JSON. It is extremely optimized to parse\nJSON bodies and serialize JSON output."),(0,r.kt)("p",null,"To speed up JSON serialization (yes, it is slow!) use the ",(0,r.kt)("inlineCode",{parentName:"p"},"response")," key of the\nschema option as shown in the following example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @type {import('fastify').RouteShorthandOptions}\n * @const\n */\nconst opts = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          hello: { type: 'string' }\n        }\n      }\n    }\n  }\n}\n\nfastify.get('/', opts, async (request, reply) => {\n  return { hello: 'world' }\n})\n")),(0,r.kt)("p",null,"By specifying a schema as shown, you can speed up serialization by a factor of\n2-3. This also helps to protect against leakage of potentially sensitive data,\nsince Fastify will serialize only the data present in the response schema. Read\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/Validation-and-Serialization"},"Validation and Serialization")," to\nlearn more."),(0,r.kt)("h3",{id:"parsing-request-payloads"},"Parsing request payloads"),(0,r.kt)("a",{id:"request-payload"}),(0,r.kt)("p",null,"Fastify parses ",(0,r.kt)("inlineCode",{parentName:"p"},"'application/json'")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"'text/plain'")," request payloads\nnatively, with the result accessible from the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/Request"},"Fastify\nrequest")," object at ",(0,r.kt)("inlineCode",{parentName:"p"},"request.body"),"."),(0,r.kt)("p",null,"The following example returns the parsed body of a request back to the client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @type {import('fastify').RouteShorthandOptions}\n */\nconst opts = {}\nfastify.post('/', opts, async (request, reply) => {\n  return request.body\n})\n")),(0,r.kt)("p",null,"Read ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/ContentTypeParser"},"Content-Type Parser")," to learn more\nabout Fastify's default parsing functionality and how to support other content\ntypes."),(0,r.kt)("h3",{id:"extend-your-server"},"Extend your server"),(0,r.kt)("a",{id:"extend-server"}),(0,r.kt)("p",null,"Fastify is built to be extremely extensible and minimal, we believe that a\nbare-bones framework is all that is necessary to make great applications\npossible."),(0,r.kt)("p",null,'In other words, Fastify is not a "batteries included" framework, and relies on\nan amazing ',(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Guides/Ecosystem"},"ecosystem"),"!"),(0,r.kt)("h3",{id:"test-your-server"},"Test your server"),(0,r.kt)("a",{id:"test-server"}),(0,r.kt)("p",null,"Fastify does not offer a testing framework, but we do recommend a way to write\nyour tests that uses the features and architecture of Fastify."),(0,r.kt)("p",null,"Read the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Guides/Testing"},"testing")," documentation to learn more!"),(0,r.kt)("h3",{id:"run-your-server-from-cli"},"Run your server from CLI"),(0,r.kt)("a",{id:"cli"}),(0,r.kt)("p",null,"Fastify also has CLI integration thanks to\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-cli"},"fastify-cli"),"."),(0,r.kt)("p",null,"First, install ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify-cli"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm i fastify-cli\n")),(0,r.kt)("p",null,"You can also install it globally with ",(0,r.kt)("inlineCode",{parentName:"p"},"-g"),"."),(0,r.kt)("p",null,"Then, add the following lines to ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "start": "fastify start server.js"\n  }\n}\n')),(0,r.kt)("p",null,"And create your server file(s):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// server.js\n'use strict'\n\nmodule.exports = async function (fastify, opts) {\n  fastify.get('/', async (request, reply) => {\n    return { hello: 'world' }\n  })\n}\n")),(0,r.kt)("p",null,"Then run your server with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm start\n")),(0,r.kt)("h3",{id:"slides-and-videos"},"Slides and Videos"),(0,r.kt)("a",{id:"slides"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Slides"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://mcollina.github.io/take-your-http-server-to-ludicrous-speed"},"Take your HTTP server to ludicrous\nspeed"),"\nby ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/mcollina"},"@mcollina")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://delvedor.github.io/What-if-I-told-you-that-HTTP-can-be-fast"},"What if I told you that HTTP can be\nfast"),"\nby ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/delvedor"},"@delvedor")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Videos"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=5z46jJZNe8k"},"Take your HTTP server to ludicrous\nspeed")," by\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/mcollina"},"@mcollina")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.webexpo.net/prague2017/talk/what-if-i-told-you-that-http-can-be-fast/"},"What if I told you that HTTP can be\nfast"),"\nby ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/delvedor"},"@delvedor"))))))}f.isMDXComponent=!0}}]);