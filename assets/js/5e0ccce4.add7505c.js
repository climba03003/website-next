"use strict";(self.webpackChunk_fastify_website=self.webpackChunk_fastify_website||[]).push([[41247],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),c=l(n),f=s,d=c["".concat(p,".").concat(f)]||c[f]||y[f]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=c;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:s,i[1]=a;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},96973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(87462),s=(n(67294),n(3905));const o={},i=void 0,a={unversionedId:"Documentation/TypeScript",id:"version-v2.15.x/Documentation/TypeScript",title:"TypeScript",description:"TypeScript",source:"@site/versioned_docs/version-v2.15.x/Documentation/TypeScript.md",sourceDirName:"Documentation",slug:"/Documentation/TypeScript",permalink:"/website-next/docs/v2.15.x/Documentation/TypeScript",draft:!1,tags:[],version:"v2.15.x",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Testing",permalink:"/website-next/docs/v2.15.x/Documentation/Testing"},next:{title:"Validation-and-Serialization",permalink:"/website-next/docs/v2.15.x/Documentation/Validation-and-Serialization"}},p={},l=[{value:"TypeScript",id:"typescript",level:2},{value:"Types support",id:"types-support",level:2},{value:"Example",id:"example",level:2},{value:"Generic Parameters",id:"generic-parameters",level:2},{value:"HTTP Prototypes",id:"http-prototypes",level:2},{value:"Contributing",id:"contributing",level:2},{value:"Core Types",id:"core-types",level:3},{value:"Plugin Types",id:"plugin-types",level:3},{value:"Authoring Plugin Types",id:"authoring-plugin-types",level:3}],u={toc:l};function y(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("a",{id:"typescript"}),(0,s.kt)("h2",{id:"typescript"},"TypeScript"),(0,s.kt)("p",null,"Fastify is shipped with a typings file, but you may need to install ",(0,s.kt)("inlineCode",{parentName:"p"},"@types/node"),", depending on the Node.js version you are using."),(0,s.kt)("h2",{id:"types-support"},"Types support"),(0,s.kt)("p",null,"We do care about the TypeScript community, and one of our core team members is currently reworking all types.\nWe do our best to have the typings updated with the latest version of the API, but ",(0,s.kt)("em",{parentName:"p"},"it can happen")," that the typings are not in sync.",(0,s.kt)("br",null),"\nLuckily this is Open Source and you can contribute to fix them, we will be very happy to accept the fix and release it as soon as possible as a patch release. Checkout the ",(0,s.kt)("a",{parentName:"p",href:"#contributing"},"contributing")," rules!"),(0,s.kt)("p",null,"Plugins may or may not include typings. See ",(0,s.kt)("a",{parentName:"p",href:"#plugin-types"},"Plugin Types")," for more information."),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("p",null,"This example TypeScript app closely aligns with the JavaScript examples:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import * as fastify from 'fastify'\nimport { Server, IncomingMessage, ServerResponse } from 'http'\n\n// Create a http server. We pass the relevant typings for our http version used.\n// By passing types we get correctly typed access to the underlying http objects in routes.\n// If using http2 we'd pass <http2.Http2Server, http2.Http2ServerRequest, http2.Http2ServerResponse>\n// For https pass http2.Http2SecureServer or http.SecureServer instead of Server.\nconst server: fastify.FastifyInstance<Server, IncomingMessage, ServerResponse> = fastify({})\n\nconst opts: fastify.RouteShorthandOptions = {\n  schema: {\n    response: {\n      200: {\n        type: 'object',\n        properties: {\n          pong: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  }\n}\n\nserver.get('/ping', opts, (request, reply) => {\n  console.log(reply.res) // this is the http.ServerResponse with correct typings!\n  reply.code(200).send({ pong: 'it worked!' })\n})\n\n")),(0,s.kt)("a",{id:"generic-parameters"}),(0,s.kt)("h2",{id:"generic-parameters"},"Generic Parameters"),(0,s.kt)("p",null,"Since you can validate the querystring, params, body, and headers, you can also override the default types of those values on the request interface:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import * as fastify from 'fastify'\n\nconst server = fastify({})\n\ninterface Query {\n  foo?: number\n}\n\ninterface Params {\n  bar?: string\n}\n\ninterface Body {\n  baz?: string\n}\n\ninterface Headers {\n  a?: string\n}\n\nconst opts: fastify.RouteShorthandOptions = {\n  schema: {\n    querystring: {\n      type: 'object',\n      properties: {\n        foo: {\n          type: 'number'\n        }\n      }\n    },\n    params: {\n      type: 'object',\n      properties: {\n        bar: {\n          type: 'string'\n        }\n      }\n    },\n    body: {\n      type: 'object',\n      properties: {\n        baz: {\n          type: 'string'\n        }\n      }\n    },\n    headers: {\n      type: 'object',\n      properties: {\n        a: {\n          type: 'string'\n        }\n      }\n    }\n  }\n}\n\nserver.get<Query, Params, Headers, Body>('/ping/:bar', opts, (request, reply) => {\n  console.log(request.query) // this is of type Query!\n  console.log(request.params) // this is of type Params!\n  console.log(request.headers) // this is of type Headers!\n  console.log(request.body) // this is of type Body!\n  reply.code(200).send({ pong: 'it worked!' })\n})\n\n")),(0,s.kt)("p",null,"All generic types are optional, so you can also pass types for the parts you validate with schemas:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import * as fastify from 'fastify'\n\nconst server = fastify({})\n\ninterface Params {\n  bar?: string\n}\n\nconst opts: fastify.RouteShorthandOptions = {\n  schema: {\n    params: {\n      type: 'object',\n      properties: {\n        bar: {\n          type: 'string'\n        }\n      }\n    },\n  }\n}\n\nserver.get<fastify.DefaultQuery, Params, unknown>('/ping/:bar', opts, (request, reply) => {\n  console.log(request.query) // this is of type fastify.DefaultQuery!\n  console.log(request.params) // this is of type Params!\n  console.log(request.headers) // this is of type unknown!\n  console.log(request.body) // this is of type fastify.DefaultBody because typescript will use the default type value!\n  reply.code(200).send({ pong: 'it worked!' })\n})\n\n// Given that you haven't validated the querystring, body, or headers, it would be best\n// to type those params as 'unknown'. However, it's up to you. The example below is the\n// best way to prevent you from shooting yourself in the foot. In other words, don't\n// use values you haven't validated.\nserver.get<unknown, Params, unknown, unknown>('/ping/:bar', opts, (request, reply) => {\n  console.log(request.query) // this is of type unknown!\n  console.log(request.params) // this is of type Params!\n  console.log(request.headers) // this is of type unknown!\n  console.log(request.body) // this is of type unknown!\n  reply.code(200).send({ pong: 'it worked!' })\n})\n\n")),(0,s.kt)("a",{id:"http-prototypes"}),(0,s.kt)("h2",{id:"http-prototypes"},"HTTP Prototypes"),(0,s.kt)("p",null,"By default, fastify will determine which version of http is being used based on the options you pass to it. If for any\nreason you need to override this you can do so as shown below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"interface CustomIncomingMessage extends http.IncomingMessage {\n  getClientDeviceType: () => string\n}\n\n// Passing overrides for the http prototypes to fastify\nconst server: fastify.FastifyInstance<http.Server, CustomIncomingMessage, http.ServerResponse> = fastify()\n\nserver.get('/ping', (request, reply) => {\n  // Access our custom method on the http prototype\n  const clientDeviceType = request.raw.getClientDeviceType()\n\n  reply.send({ clientDeviceType: `you called this endpoint from a ${clientDeviceType}` })\n})\n\n")),(0,s.kt)("p",null,"In this example we pass a modified ",(0,s.kt)("inlineCode",{parentName:"p"},"http.IncomingMessage")," interface since it has been extended elsewhere in our\napplication."),(0,s.kt)("a",{id:"contributing"}),(0,s.kt)("h2",{id:"contributing"},"Contributing"),(0,s.kt)("p",null,"TypeScript related changes can be considered to fall into one of two categories:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#core-types"},(0,s.kt)("inlineCode",{parentName:"a"},"Core"))," - The typings bundled with fastify"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#plugin-types"},(0,s.kt)("inlineCode",{parentName:"a"},"Plugins"))," - Fastify ecosystem plugins")),(0,s.kt)("p",null,"Make sure to read our ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/master/CONTRIBUTING.md"},(0,s.kt)("inlineCode",{parentName:"a"},"CONTRIBUTING.md"))," file before getting started to make sure things go smoothly!"),(0,s.kt)("a",{id:"core-types"}),(0,s.kt)("h3",{id:"core-types"},"Core Types"),(0,s.kt)("p",null,"When updating core types you should make a PR to this repository. Ensure you:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Update ",(0,s.kt)("inlineCode",{parentName:"li"},"examples/typescript-server.ts")," to reflect the changes (if necessary)"),(0,s.kt)("li",{parentName:"ol"},"Update ",(0,s.kt)("inlineCode",{parentName:"li"},"test/types/index.ts")," to validate changes work as expected")),(0,s.kt)("a",{id:"plugin-types"}),(0,s.kt)("h3",{id:"plugin-types"},"Plugin Types"),(0,s.kt)("p",null,"Plugins maintained by and organized under the fastify organization on GitHub should ship with typings just like fastify itself does.\nSome plugins already include typings but many do not. We are happy to accept contributions to those plugins without any typings, see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-cors"},"fastify-cors")," for an example of a plugin that comes with it's own typings."),(0,s.kt)("p",null,"Typings for third-party-plugins may either be included with the plugin or hosted on DefinitelyTyped. Remember, if you author a plugin to either include typings or publish them on DefinitelyTyped! Information  of how to install typings from DefinitelyTyped can be found ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/DefinitelyTyped/DefinitelyTyped#npm"},"here"),"."),(0,s.kt)("p",null,"Some types might not be available yet, so don't be shy about contributing."),(0,s.kt)("a",{id:"authoring-plugin-types"}),(0,s.kt)("h3",{id:"authoring-plugin-types"},"Authoring Plugin Types"),(0,s.kt)("p",null,"Typings for many plugins that extend the ",(0,s.kt)("inlineCode",{parentName:"p"},"FastifyRequest"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"FastifyReply")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"FastifyInstance")," objects can be achieved as shown below."),(0,s.kt)("p",null,"This code shows the typings for the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-static"},(0,s.kt)("inlineCode",{parentName:"a"},"fastify-static"))," plugin."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'/// <reference types="node" />\n\n// require fastify typings\nimport * as fastify from \'fastify\';\n\n// require necessary http, http2, https typings\nimport { Server, IncomingMessage, ServerResponse } from "http";\nimport { Http2SecureServer, Http2Server, Http2ServerRequest, Http2ServerResponse } from "http2";\nimport * as https from "https";\n\ntype HttpServer = Server | Http2Server | Http2SecureServer | https.Server;\ntype HttpRequest = IncomingMessage | Http2ServerRequest;\ntype HttpResponse = ServerResponse | Http2ServerResponse;\n\n// extend fastify typings\ndeclare module "fastify" {\n  interface FastifyReply<HttpResponse> {\n    sendFile(filename: string): FastifyReply<HttpResponse>;\n  }\n}\n\n// declare plugin type using fastify.Plugin\ndeclare function fastifyStatic(): fastify.Plugin<\n  Server,\n  IncomingMessage,\n  ServerResponse,\n  {\n    root: string;\n    prefix?: string;\n    serve?: boolean;\n    decorateReply?: boolean;\n    schemaHide?: boolean;\n    setHeaders?: (...args: any[]) => void;\n    redirect?: boolean;\n    wildcard?: boolean | string;\n\n    // Passed on to `send`\n    acceptRanges?: boolean;\n    cacheControl?: boolean;\n    dotfiles?: boolean;\n    etag?: boolean;\n    extensions?: string[];\n    immutable?: boolean;\n    index?: string[];\n    lastModified?: boolean;\n    maxAge?: string | number;\n  }\n>;\n\ndeclare namespace fastifyStatic {\n  interface FastifyStaticOptions {}\n}\n\n// export plugin type\nexport = fastifyStatic;\n\n')),(0,s.kt)("p",null,"Now you are good to go and could use the plugin like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import * as Fastify from 'fastify'\nimport * as fastifyStatic from 'fastify-static'\n\nconst app = Fastify()\n\n// the options here are type-checked\napp.register(fastifyStatic, {\n  acceptRanges: true,\n  cacheControl: true,\n  decorateReply: true,\n  dotfiles: true,\n  etag: true,\n  extensions: ['.js'],\n  immutable: true,\n  index: ['1'],\n  lastModified: true,\n  maxAge: '',\n  prefix: '',\n  root: '',\n  schemaHide: true,\n  serve: true,\n  setHeaders: (res, pathName) => {\n    res.setHeader('some-header', pathName)\n  }\n})\n\napp.get('/file', (request, reply) => {\n  // using newly defined function on FastifyReply\n  reply.sendFile('some-file-name')\n})\n\n")),(0,s.kt)("p",null,"Adding typings to all our plugins is a community effort so feel free to contribute!"))}y.isMDXComponent=!0}}]);