"use strict";(self.webpackChunkfastify_website=self.webpackChunkfastify_website||[]).push([[6330],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),g=a,f=d["".concat(l,".").concat(g)]||d[g]||c[g]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5041:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"Logging",sidebar_label:"Logging",hide_title:!1},l=void 0,p={unversionedId:"Logging",id:"Logging",isDocsHomePage:!1,title:"Logging",description:"Enable logging",source:"@site/docs/Logging.md",sourceDirName:".",slug:"/Logging",permalink:"/docs/v3/Logging",editUrl:"https://github.com/fastify/website-next/edit/main/docs/docs/Logging.md",tags:[],version:"current",frontMatter:{title:"Logging",sidebar_label:"Logging",hide_title:!1},sidebar:"sidebar",previous:{title:"Lifecycle",permalink:"/docs/v3/Lifecycle"},next:{title:"Middleware",permalink:"/docs/v3/Middleware"}},u=[{value:"Enable logging",id:"enable-logging",children:[],level:3},{value:"Usage",id:"usage",children:[],level:3},{value:"Log Redaction",id:"log-redaction",children:[],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"enable-logging"},"Enable logging"),(0,o.kt)("p",null,"Logging is disabled by default, and you can enable it by passing\n",(0,o.kt)("inlineCode",{parentName:"p"},"{ logger: true }")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"{ logger: { level: 'info' } }")," when you create\na fastify instance. Note that if the logger is disabled, it is impossible to\nenable it at runtime. We use\n",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/abstract-logging"},"abstract-logging")," for\nthis purpose."),(0,o.kt)("p",null,"As Fastify is focused on performance, it uses ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino"},"pino")," as its logger, with the default log level, when enabled, set to ",(0,o.kt)("inlineCode",{parentName:"p"},"'info'"),"."),(0,o.kt)("p",null,"Enabling the production JSON logger:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  logger: true\n})\n")),(0,o.kt)("p",null,"Enabling the logger with appropriate configuration for both local development and production environment requires bit more configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  logger: {\n      prettyPrint:\n        environment === 'development'\n          ? {\n              translateTime: 'HH:MM:ss Z',\n              ignore: 'pid,hostname'\n            }\n          : false\n    }\n})\n")),(0,o.kt)("p",null,"\u26a0\ufe0f ",(0,o.kt)("inlineCode",{parentName:"p"},"pino-pretty")," needs to be installed as a dev dependency, it is not included by default for performance reasons."),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,"You can use the logger like this in your route handlers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', options, function (request, reply) {\n  request.log.info('Some info about the current request')\n  reply.send({ hello: 'world' })\n})\n")),(0,o.kt)("p",null,"You can trigger new logs outside route handlers by using the Pino instance from the Fastify instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"fastify.log.info('Something important happened!');\n")),(0,o.kt)("p",null,"If you want to pass some options to the logger, just pass them to Fastify.\nYou can find all available options in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino/blob/master/docs/api.md#pinooptions-stream"},"Pino documentation"),". If you want to specify a file destination, use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  logger: {\n    level: 'info',\n    file: '/path/to/file' // Will use pino.destination()\n  }\n})\n\nfastify.get('/', options, function (request, reply) {\n  request.log.info('Some info about the current request')\n  reply.send({ hello: 'world' })\n})\n")),(0,o.kt)("p",null,"If you want to pass a custom stream to the Pino instance, just add a stream field to the logger object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const split = require('split2')\nconst stream = split(JSON.parse)\n\nconst fastify = require('fastify')({\n  logger: {\n    level: 'info',\n    stream: stream\n  }\n})\n")),(0,o.kt)("a",{name:"logging-request-id"}),(0,o.kt)("p",null,'By default, Fastify adds an ID to every request for easier tracking. If the "request-id" header is present its value is used, otherwise a new incremental ID is generated. See Fastify Factory ',(0,o.kt)("a",{parentName:"p",href:"/docs/v3/Reference/Server#factory-request-id-header"},(0,o.kt)("inlineCode",{parentName:"a"},"requestIdHeader"))," and Fastify Factory ",(0,o.kt)("a",{parentName:"p",href:"/docs/v3/Reference/Server#genreqid"},(0,o.kt)("inlineCode",{parentName:"a"},"genReqId"))," for customization options."),(0,o.kt)("p",null,"The default logger is configured with a set of standard serializers that serialize objects with ",(0,o.kt)("inlineCode",{parentName:"p"},"req"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"res"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"err")," properties. The object received by ",(0,o.kt)("inlineCode",{parentName:"p"},"req")," is the Fastify ",(0,o.kt)("a",{parentName:"p",href:"/docs/v3/Request"},(0,o.kt)("inlineCode",{parentName:"a"},"Request"))," object, while the object received by ",(0,o.kt)("inlineCode",{parentName:"p"},"res")," is the Fastify ",(0,o.kt)("a",{parentName:"p",href:"/docs/v3/Reply"},(0,o.kt)("inlineCode",{parentName:"a"},"Reply"))," object.\nThis behaviour can be customized by specifying custom serializers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  logger: {\n    serializers: {\n      req (request) {\n        return { url: request.url }\n      }\n    }\n  }\n})\n")),(0,o.kt)("p",null,"For example, the response payload and headers could be logged using the approach below (even if it is ",(0,o.kt)("em",{parentName:"p"},"not recommended"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  logger: {\n    prettyPrint: true,\n    serializers: {\n      res (reply) {\n        // The default\n        return {\n          statusCode: reply.statusCode\n        }\n      },\n      req (request) {\n        return {\n          method: request.method,\n          url: request.url,\n          path: request.path,\n          parameters: request.parameters,\n          // Including the headers in the log could be in violation\n          // of privacy laws, e.g. GDPR. You should use the \"redact\" option to\n          // remove sensitive fields. It could also leak authentication data in\n          // the logs.\n          headers: request.headers\n        };\n      }\n    }\n  }\n});\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": The body cannot be serialized inside a ",(0,o.kt)("inlineCode",{parentName:"p"},"req")," method because the request is serialized when we create the child logger. At that time, the body is not yet parsed."),(0,o.kt)("p",null,"See an approach to log ",(0,o.kt)("inlineCode",{parentName:"p"},"req.body")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"app.addHook('preHandler', function (req, reply, done) {\n  if (req.body) {\n    req.log.info({ body: req.body }, 'parsed body')\n  }\n  done()\n})\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Any logger other than Pino will ignore this option.")),(0,o.kt)("p",null,"You can also supply your own logger instance. Instead of passing configuration options, pass the instance.\nThe logger you supply must conform to the Pino interface; that is, it must have the following methods:\n",(0,o.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"debug"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"fatal"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"warn"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"trace"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"child"),"."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const log = require('pino')({ level: 'info' })\nconst fastify = require('fastify')({ logger: log })\n\nlog.info('does not have request information')\n\nfastify.get('/', function (request, reply) {\n  request.log.info('includes request information, but is the same logger instance as `log`')\n  reply.send({ hello: 'world' })\n})\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"The logger instance for the current request is available in every part of the ",(0,o.kt)("a",{parentName:"em",href:"/docs/v3/Lifecycle"},"lifecycle"),".")),(0,o.kt)("h2",{id:"log-redaction"},"Log Redaction"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://getpino.io"},"Pino")," supports low-overhead log redaction for\nobscuring values of specific properties in recorded logs.\nAs an example, we might want to log all the HTTP headers minus the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Authorization")," header for security concerns:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = Fastify({\n  logger: {\n    stream: stream,\n    redact: ['req.headers.authorization'],\n    level: 'info',\n    serializers: {\n      req (request) {\n        return {\n          method: request.method,\n          url: request.url,\n          headers: request.headers,\n          hostname: request.hostname,\n          remoteAddress: request.ip,\n          remotePort: request.socket.remotePort\n        }\n      }\n    }\n  }\n})\n")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://getpino.io/#/docs/redaction"},"https://getpino.io/#/docs/redaction")," for more details."))}d.isMDXComponent=!0}}]);