"use strict";(self.webpackChunk_fastify_website=self.webpackChunk_fastify_website||[]).push([[75627],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),y=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=y(e.components);return r.createElement(p.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=y(n),d=o,u=c["".concat(p,".").concat(d)]||c[d]||f[d]||i;return n?r.createElement(u,a(a({ref:t},l),{},{components:n})):r.createElement(u,a({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var y=2;y<i;y++)a[y]=n[y];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},25885:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>y});var r=n(87462),o=(n(67294),n(3905));const i={},a=void 0,s={unversionedId:"Reference/Type-Providers",id:"version-latest/Reference/Type-Providers",title:"Type-Providers",description:"Type Providers",source:"@site/versioned_docs/version-latest/Reference/Type-Providers.md",sourceDirName:"Reference",slug:"/Reference/Type-Providers",permalink:"/website-next/docs/latest/Reference/Type-Providers",draft:!1,editUrl:"https://github.com/fastify/fastify/edit/main/docs/Reference/Type-Providers.md",tags:[],version:"latest",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Server",permalink:"/website-next/docs/latest/Reference/Server"},next:{title:"TypeScript",permalink:"/website-next/docs/latest/Reference/TypeScript"}},p={},y=[{value:"Type Providers",id:"type-providers",level:2},{value:"Providers",id:"providers",level:3},{value:"Json Schema to Ts",id:"json-schema-to-ts",level:3},{value:"TypeBox",id:"typebox",level:3},{value:"Scoped Type-Provider",id:"scoped-type-provider",level:3},{value:"Type Definition of FastifyInstance + TypeProvider",id:"type-definition-of-fastifyinstance--typeprovider",level:3}],l={toc:y};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"type-providers"},"Type Providers"),(0,o.kt)("p",null,"Type Providers are a TypeScript only feature that enables Fastify to statically\ninfer type information directly from inline JSON Schema. They are an alternative\nto specifying generic arguments on routes; and can greatly reduce the need to\nkeep associated types for each schema defined in your project."),(0,o.kt)("h3",{id:"providers"},"Providers"),(0,o.kt)("p",null,"Type Providers are offered as additional packages you will need to install into\nyour project. Each provider uses a different inference library under the hood;\nallowing you to select the library most appropriate for your needs. Type\nProvider packages follow a ",(0,o.kt)("inlineCode",{parentName:"p"},"@fastify/type-provider-{provider-name}")," naming\nconvention."),(0,o.kt)("p",null,"The following inference packages are supported:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"json-schema-to-ts")," -\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ThomasAribart/json-schema-to-ts"},"github")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"typebox")," - ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/sinclairzx81/typebox"},"github"))),(0,o.kt)("h3",{id:"json-schema-to-ts"},"Json Schema to Ts"),(0,o.kt)("p",null,"The following sets up a ",(0,o.kt)("inlineCode",{parentName:"p"},"json-schema-to-ts")," Type Provider"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @fastify/type-provider-json-schema-to-ts\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { JsonSchemaToTsProvider } from '@fastify/type-provider-json-schema-to-ts'\n\nimport fastify from 'fastify'\n\nconst server = fastify().withTypeProvider<JsonSchemaToTsProvider>()\n\nserver.get('/route', {\n    schema: {\n        querystring: {\n            type: 'object',\n            properties: {\n                foo: { type: 'number' },\n                bar: { type: 'string' },\n            },\n            required: ['foo', 'bar']\n        }\n    } as const // don't forget to use const !\n\n}, (request, reply) => {\n\n    // type Query = { foo: number, bar: string }\n\n    const { foo, bar } = request.query // type safe!\n})\n")),(0,o.kt)("h3",{id:"typebox"},"TypeBox"),(0,o.kt)("p",null,"The following sets up a TypeBox Type Provider"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @fastify/type-provider-typebox\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'\nimport { Type } from '@sinclair/typebox'\n\nimport fastify from 'fastify'\n\nconst server = fastify().withTypeProvider<TypeBoxTypeProvider>()\n\nserver.get('/route', {\n    schema: {\n        querystring: Type.Object({\n            foo: Type.Number(),\n            bar: Type.String()\n        })\n    }\n}, (request, reply) => {\n\n    // type Query = { foo: number, bar: string }\n\n    const { foo, bar } = request.query // type safe!\n})\n")),(0,o.kt)("p",null,"See also the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sinclairzx81/typebox#validation"},"TypeBox\ndocumentation")," on how to set\nup AJV to work with TypeBox."),(0,o.kt)("h3",{id:"scoped-type-provider"},"Scoped Type-Provider"),(0,o.kt)("p",null,"The provider types don't propagate globally. In encapsulated usage, one can\nremap the context to use one or more providers (for example, ",(0,o.kt)("inlineCode",{parentName:"p"},"typebox")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"json-schema-to-ts")," can be used in the same application)."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import Fastify from 'fastify'\nimport { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'\nimport { JsonSchemaToTsProvider } from '@fastify/type-provider-json-schema-to-ts'\nimport { Type } from '@sinclair/typebox'\n\nconst fastify = Fastify()\n\nfunction pluginWithTypebox(fastify: FastifyInstance, _opts, done): void {\n  fastify.withTypeProvider<TypeBoxTypeProvider>()\n    .get('/', {\n      schema: {\n        body: Type.Object({\n          x: Type.String(),\n          y: Type.Number(),\n          z: Type.Boolean()\n        })\n      }\n    }, (req) => {\n        const { x, y, z } = req.body // type safe\n    });\n  done()\n}\n\nfunction pluginWithJsonSchema(fastify: FastifyInstance, _opts, done): void {\n  fastify.withTypeProvider<JsonSchemaToTsProvider>()\n    .get('/', {\n      schema: {\n        body: {\n          type: 'object',\n          properties: {\n            x: { type: 'string' },\n            y: { type: 'number' },\n            z: { type: 'boolean' }\n          },\n        } as const\n      }\n    }, (req) => {\n      const { x, y, z } = req.body // type safe\n    });\n  done()\n}\n\nfastify.register(pluginWithJsonSchema)\nfastify.register(pluginWithTypebox)\n")),(0,o.kt)("p",null,"It's also important to mention that once the types don't propagate globally,\n",(0,o.kt)("em",{parentName:"p"},"currently")," is not possible to avoid multiple registrations on routes when\ndealing with several scopes, see below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import Fastify from 'fastify'\nimport { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'\nimport { Type } from '@sinclair/typebox'\n\nconst server = Fastify().withTypeProvider<TypeBoxTypeProvider>()\n\nserver.register(plugin1) // wrong\nserver.register(plugin2) // correct\n\nfunction plugin1(fastify: FastifyInstance, _opts, done): void {\n  fastify.get('/', {\n    schema: {\n      body: Type.Object({\n        x: Type.String(),\n        y: Type.Number(),\n        z: Type.Boolean()\n      })\n    }\n  }, (req) => {\n    // it doesn't works! in a new scope needs to call `withTypeProvider` again\n    const { x, y, z } = req.body\n  });\n  done()\n}\n\nfunction plugin2(fastify: FastifyInstance, _opts, done): void {\n  const server = fastify.withTypeProvider<TypeBoxTypeProvider>()\n\n  server.get('/', {\n    schema: {\n      body: Type.Object({\n        x: Type.String(),\n        y: Type.Number(),\n        z: Type.Boolean()\n      })\n    }\n  }, (req) => {\n    // works\n    const { x, y, z } = req.body\n  });\n  done()\n}\n")),(0,o.kt)("h3",{id:"type-definition-of-fastifyinstance--typeprovider"},"Type Definition of FastifyInstance + TypeProvider"),(0,o.kt)("p",null,"When working with modules one has to make use of ",(0,o.kt)("inlineCode",{parentName:"p"},"FastifyInstance")," with Type\nProvider generics. See the example below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// index.ts\nimport Fastify from 'fastify'\nimport { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'\nimport { registerRoutes } from './routes'\n\nconst server = Fastify().withTypeProvider<TypeBoxTypeProvider>()\n\nregisterRoutes(server)\n\nserver.listen({ port: 3000 })\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// routes.ts\nimport { Type } from '@sinclair/typebox'\nimport {\n  FastifyInstance,\n  FastifyBaseLogger,\n  RawReplyDefaultExpression,\n  RawRequestDefaultExpression,\n  RawServerDefault\n} from 'fastify'\nimport { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'\n\ntype FastifyTypebox = FastifyInstance<\n  RawServerDefault,\n  RawRequestDefaultExpression<RawServerDefault>,\n  RawReplyDefaultExpression<RawServerDefault>,\n  FastifyBaseLogger,\n  TypeBoxTypeProvider\n>;\n\nexport function registerRoutes(fastify: FastifyTypebox): void {\n  fastify.get('/', {\n    schema: {\n      body: Type.Object({\n        x: Type.String(),\n        y: Type.Number(),\n        z: Type.Boolean()\n      })\n    }\n  }, (req) => {\n    // works\n    const { x, y, z } = req.body\n  });\n}\n")))}f.isMDXComponent=!0}}]);