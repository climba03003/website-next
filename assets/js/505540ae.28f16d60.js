"use strict";(self.webpackChunk_fastify_website=self.webpackChunk_fastify_website||[]).push([[89430],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=i,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},14397:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={},o=void 0,l={unversionedId:"Reference/Request",id:"version-v4.7.x/Reference/Request",title:"Request",description:"Request",source:"@site/versioned_docs/version-v4.7.x/Reference/Request.md",sourceDirName:"Reference",slug:"/Reference/Request",permalink:"/website-next/docs/v4.7.x/Reference/Request",draft:!1,editUrl:"https://github.com/fastify/fastify/edit/main/docs/Reference/Request.md",tags:[],version:"v4.7.x",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Reply",permalink:"/website-next/docs/v4.7.x/Reference/Reply"},next:{title:"Routes",permalink:"/website-next/docs/v4.7.x/Reference/Routes"}},s={},p=[{value:"Request",id:"request",level:2},{value:"Headers",id:"headers",level:3},{value:".getValidationFunction(schema | httpPart)",id:"getvalidationfunctionschema--httppart",level:3},{value:".compileValidationSchema(schema, httpPart)",id:"compilevalidationschemaschema-httppart",level:3},{value:".validateInput(data, schema | httpStatus, httpStatus)",id:"validateinputdata-schema--httpstatus-httpstatus",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"request"},"Request"),(0,i.kt)("p",null,"The first parameter of the handler function is ",(0,i.kt)("inlineCode",{parentName:"p"},"Request"),"."),(0,i.kt)("p",null,"Request is a core Fastify object containing the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query")," - the parsed querystring, its format is specified by\n",(0,i.kt)("a",{parentName:"li",href:"/website-next/docs/v4.7.x/Reference/Server#querystringparser"},(0,i.kt)("inlineCode",{parentName:"a"},"querystringParser"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"body")," - the request payload, see ",(0,i.kt)("a",{parentName:"li",href:"/website-next/docs/v4.7.x/Reference/ContentTypeParser"},"Content-Type\nParser")," for details on what request payloads Fastify\nnatively parses and how to support other content types"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"params")," - the params matching the URL"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#headers"},(0,i.kt)("inlineCode",{parentName:"a"},"headers"))," - the headers getter and setter"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"raw")," - the incoming HTTP request from Node core"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"server")," - The Fastify server instance, scoped to the current ",(0,i.kt)("a",{parentName:"li",href:"/website-next/docs/v4.7.x/Reference/Encapsulation"},"encapsulation\ncontext")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id")," - the request ID"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log")," - the logger instance of the incoming request"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ip")," - the IP address of the incoming request"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ips")," - an array of the IP addresses, ordered from closest to furthest, in the\n",(0,i.kt)("inlineCode",{parentName:"li"},"X-Forwarded-For")," header of the incoming request (only when the\n",(0,i.kt)("a",{parentName:"li",href:"/website-next/docs/v4.7.x/Reference/Server#factory-trust-proxy"},(0,i.kt)("inlineCode",{parentName:"a"},"trustProxy"))," option is enabled)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hostname")," - the host of the incoming request (derived from ",(0,i.kt)("inlineCode",{parentName:"li"},"X-Forwarded-Host"),"\nheader when the ",(0,i.kt)("a",{parentName:"li",href:"/website-next/docs/v4.7.x/Reference/Server#factory-trust-proxy"},(0,i.kt)("inlineCode",{parentName:"a"},"trustProxy"))," option is\nenabled). For HTTP/2 compatibility it returns ",(0,i.kt)("inlineCode",{parentName:"li"},":authority")," if no host header\nexists."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"protocol")," - the protocol of the incoming request (",(0,i.kt)("inlineCode",{parentName:"li"},"https")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"http"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"method")," - the method of the incoming request"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"url")," - the URL of the incoming request"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"routerMethod")," - the method defined for the router that is handling the\nrequest"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"routerPath")," - the path pattern defined for the router that is handling the\nrequest"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is404")," - true if request is being handled by 404 handler, false if it is not"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"connection")," - Deprecated, use ",(0,i.kt)("inlineCode",{parentName:"li"},"socket")," instead. The underlying connection of\nthe incoming request."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"socket")," - the underlying connection of the incoming request"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"context")," - A Fastify internal object. You should not use it directly or\nmodify it. It is useful to access one special key:\t",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"context.config")," - The route ",(0,i.kt)("a",{parentName:"li",href:"/website-next/docs/v4.7.x/Reference/Routes#routes-config"},(0,i.kt)("inlineCode",{parentName:"a"},"config"))," object."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"routeSchema")," - the scheme definition set for the router that is\nhandling the request"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"routeConfig")," - The route ",(0,i.kt)("a",{parentName:"li",href:"/website-next/docs/v4.7.x/Reference/Routes#routes-config"},(0,i.kt)("inlineCode",{parentName:"a"},"config")),"\nobject."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#getvalidationfunction"},".getValidationFunction(schema | httpPart)")," -\nReturns a validation function for the specified schema or http part,\nif any of either are set or cached."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#compilevalidationschema"},".compileValidationSchema(schema, [httpPart])")," -\nCompiles the specified schema and returns a validation function\nusing the default (or customized) ",(0,i.kt)("inlineCode",{parentName:"li"},"ValidationCompiler"),".\nThe optional ",(0,i.kt)("inlineCode",{parentName:"li"},"httpPart")," is forwarded to the ",(0,i.kt)("inlineCode",{parentName:"li"},"ValidationCompiler"),"\nif provided, defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#validate"},".validateInput(data, schema | httpPart, [httpPart])")," -\nValidates the specified input by using the specified\nschema and returns the serialized payload. If the optional\n",(0,i.kt)("inlineCode",{parentName:"li"},"httpPart")," is provided, the function will use the serializer\nfunction given for that HTTP Status Code. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,i.kt)("h3",{id:"headers"},"Headers"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"request.headers")," is a getter that returns an Object with the headers of the\nincoming request. You can set custom headers like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"request.headers = {\n  'foo': 'bar',\n  'baz': 'qux'\n}\n")),(0,i.kt)("p",null,"This operation will add to the request headers the new values that can be read\ncalling ",(0,i.kt)("inlineCode",{parentName:"p"},"request.headers.bar"),". Moreover, you can still access the standard\nrequest's headers with the ",(0,i.kt)("inlineCode",{parentName:"p"},"request.raw.headers")," property."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: For performance reason on ",(0,i.kt)("inlineCode",{parentName:"p"},"not found")," route, you may see that we will\nadd an extra property ",(0,i.kt)("inlineCode",{parentName:"p"},"Symbol('fastify.RequestAcceptVersion')")," on the headers.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.post('/:params', options, function (request, reply) {\n  console.log(request.body)\n  console.log(request.query)\n  console.log(request.params)\n  console.log(request.headers)\n  console.log(request.raw)\n  console.log(request.server)\n  console.log(request.id)\n  console.log(request.ip)\n  console.log(request.ips)\n  console.log(request.hostname)\n  console.log(request.protocol)\n  console.log(request.url)\n  console.log(request.routerMethod)\n  console.log(request.routerPath)\n  request.log.info('some info')\n})\n")),(0,i.kt)("h3",{id:"getvalidationfunctionschema--httppart"},".getValidationFunction(schema | httpPart)"),(0,i.kt)("a",{id:"getvalidationfunction"}),(0,i.kt)("p",null,"By calling this function using a provided ",(0,i.kt)("inlineCode",{parentName:"p"},"schema")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"httpPart"),",\nit will return a ",(0,i.kt)("inlineCode",{parentName:"p"},"validation")," function that can be used to\nvalidate diverse inputs. It returns ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," if no\nserialization function was found using either of the provided inputs."),(0,i.kt)("p",null,"This function has property errors. Errors encountered during the last validation\nare assigned to errors"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const validate = request\n                  .getValidationFunction({\n                    type: 'object', \n                    properties: { \n                      foo: { \n                        type: 'string' \n                      } \n                    } \n                  })\nconsole.log(validate({ foo: 'bar' })) // true\nconsole.log(validate.errors) // null\n\n// or\n\nconst validate = request\n                  .getValidationFunction('body')\nconsole.log(validate({ foo: 0.5 })) // false\nconsole.log(validate.errors) // validation errors\n")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"#compilevalidationschema"},".compilaValidationSchema(schema, [httpStatus])"),"\nfor more information on how to compile validation function."),(0,i.kt)("h3",{id:"compilevalidationschemaschema-httppart"},".compileValidationSchema(schema, ","[httpPart]",")"),(0,i.kt)("a",{id:"compilevalidationschema"}),(0,i.kt)("p",null,"This function will compile a validation schema and\nreturn a function that can be used to validate data.\nThe function returned (a.k.a. ",(0,i.kt)("em",{parentName:"p"},"validation function"),") is compiled\nby using the provided ",(0,i.kt)("a",{parentName:"p",href:"/website-next/docs/v4.7.x/Reference/Server#schema-controller"},(0,i.kt)("inlineCode",{parentName:"a"},"SchemaControler#ValidationCompiler")),".\nA ",(0,i.kt)("inlineCode",{parentName:"p"},"WeakMap")," is used to cached this, reducing compilation calls."),(0,i.kt)("p",null,"The optional parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"httpPart"),", if provided, is forwarded directly\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidationCompiler"),", so it can be used to compile the validation\nfunction if a custom ",(0,i.kt)("inlineCode",{parentName:"p"},"ValidationCompiler")," is provided for the route."),(0,i.kt)("p",null,"This function has property errors. Errors encountered during the last validation\nare assigned to errors"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const validate = request\n                  .compileValidationSchema({\n                    type: 'object', \n                    properties: { \n                      foo: { \n                        type: 'string' \n                      } \n                    } \n                  })\nconsole.log(validate({ foo: 'bar' })) // true\nconsole.log(validate.errors) // null\n\n// or\n\nconst validate = request\n                  .compileValidationSchema({\n                    type: 'object', \n                    properties: { \n                      foo: { \n                        type: 'string' \n                      } \n                    } \n                  }, 200)\nconsole.log(validate({ hello: 'world' })) // false\nconsole.log(validate.errors) // validation errors\n")),(0,i.kt)("p",null,"Note that you should be careful when using this function, as it will cache\nthe compiled validation functions based on the schema provided. If the\nschemas provided are mutated or changed, the validation functions will not\ndetect that the schema has been altered and for instance it will reuse the\npreviously compiled validation function, as the cache is based on\nthe reference of the schema (Object) previously provided."),(0,i.kt)("p",null,"If there is a need to change the properties of a schema, always opt to create\na totally new schema (object), otherwise the implementation will not benefit from\nthe cache mechanism."),(0,i.kt)("p",null,"Using the following schema as an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const schema1 = {\n  type: 'object',\n  properties: {\n    foo: {\n      type: 'string'\n    }\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Not")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const validate = request.compileValidationSchema(schema1)\n\n// Later on...\nschema1.properties.foo.type. = 'integer'\nconst newValidate = request.compileValidationSchema(schema1)\n\nconsole.log(newValidate === validate) // true\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Instead")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const validate = request.compileValidationSchema(schema1)\n\n// Later on...\nconst newSchema = Object.assign({}, schema1)\nnewSchema.properties.foo.type = 'integer'\n\nconst newValidate = request.compileValidationSchema(newSchema)\n\nconsole.log(newValidate === validate) // false\n")),(0,i.kt)("h3",{id:"validateinputdata-schema--httpstatus-httpstatus"},".validateInput(data, ","[schema | httpStatus]",", ","[httpStatus]",")"),(0,i.kt)("a",{id:"validate"}),(0,i.kt)("p",null,"This function will validate the input based on the provided schema,\nor HTTP part passed. If both are provided, the ",(0,i.kt)("inlineCode",{parentName:"p"},"httpPart")," parameter\nwill take precedence."),(0,i.kt)("p",null,"If there is not a validation function for a given ",(0,i.kt)("inlineCode",{parentName:"p"},"schema"),", a new validation\nfunction will be compiled, forwarding the ",(0,i.kt)("inlineCode",{parentName:"p"},"httpPart")," if provided."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"request\n  .validateInput({ foo: 'bar'}, {  \n    type: 'object', \n    properties: { \n      foo: { \n        type: 'string' \n      } \n    } \n  }) // true\n\n// or\n\nrequest\n  .validateInput({ foo: 'bar'}, {\n    type: 'object', \n    properties: { \n      foo: { \n        type: 'string' \n      } \n    } \n  }, 'body') // true\n\n// or\n\nrequest\n  .validateInput({ hello: 'world'}, 'query') // false\n")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"#compileValidationSchema"},".compileValidationSchema(schema, [httpStatus])"),"\nfor more information on how to compile validation schemas."))}d.isMDXComponent=!0}}]);