"use strict";(self.webpackChunkfastify_website=self.webpackChunkfastify_website||[]).push([[4841],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8446:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"Validation and Serialization"},l=void 0,p={unversionedId:"Validation-and-Serialization",id:"version-v1/Validation-and-Serialization",isDocsHomePage:!1,title:"Validation and Serialization",description:"Fastify uses a schema-based approach, and even if it is not mandatory we recommend using JSON Schema to validate your routes and serialize your outputs. Internally, Fastify compiles the schema into a highly performant function.",source:"@site/versioned_docs/version-v1/Validation-and-Serialization.md",sourceDirName:".",slug:"/Validation-and-Serialization",permalink:"/website-next/docs/v1/Validation-and-Serialization",editUrl:"https://github.com/fastify/website-next/edit/main/docs/versioned_docs/version-v1/Validation-and-Serialization.md",tags:[],version:"v1",frontMatter:{title:"Validation and Serialization"},sidebar:"version-v1/sidebar",previous:{title:"TypeScript",permalink:"/website-next/docs/v1/TypeScript"},next:{title:"Write Plugin",permalink:"/website-next/docs/v1/Write-Plugin"}},d=[{value:"Validation",id:"validation",children:[{value:"Adding a shared schema",id:"adding-a-shared-schema",children:[],level:4},{value:"Retrieving a copy of all shared schemas",id:"retrieving-a-copy-of-all-shared-schemas",children:[],level:4},{value:"Schema Compiler",id:"schema-compiler",children:[],level:4}],level:3},{value:"Serialization",id:"serialization",children:[],level:3},{value:"Error Handling",id:"error-handling",children:[],level:3},{value:"JSON Schema and Shared Schema support",id:"json-schema-and-shared-schema-support",children:[{value:"Examples",id:"examples",children:[],level:4}],level:3},{value:"Resources",id:"resources",children:[],level:3}],c={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Fastify uses a schema-based approach, and even if it is not mandatory we recommend using ",(0,i.kt)("a",{parentName:"p",href:"http://json-schema.org/"},"JSON Schema")," to validate your routes and serialize your outputs. Internally, Fastify compiles the schema into a highly performant function."),(0,i.kt)("h3",{id:"validation"},"Validation"),(0,i.kt)("a",{id:"validation"}),(0,i.kt)("p",null,"The route validation internally relies upon ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/ajv"},"Ajv"),", which is a high-performance JSON schema validator. Validating the input is very easy: just add the fields that you need inside the route schema, and you are done! The supported validations are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"body"),": validates the body of the request if it is a POST or a PUT."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"querystring"),": validates the query string. This can be a complete JSON Schema object (with a ",(0,i.kt)("inlineCode",{parentName:"li"},"type")," property of ",(0,i.kt)("inlineCode",{parentName:"li"},"'object'")," and a ",(0,i.kt)("inlineCode",{parentName:"li"},"'properties'")," object containing parameters) or a simpler variation in which the ",(0,i.kt)("inlineCode",{parentName:"li"},"type")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"properties")," attributes are forgone and the query parameters are listed at the top level (see the example below)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"params"),": validates the route params."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headers"),": validates the request headers.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const schema = {\n  body: {\n    type: 'object',\n    properties: {\n      someKey: { type: 'string' },\n      someOtherKey: { type: 'number' }\n    }\n  },\n\n  querystring: {\n    name: { type: 'string' },\n    excitement: { type: 'integer' }\n  },\n\n  params: {\n    type: 'object',\n    properties: {\n      par1: { type: 'string' },\n      par2: { type: 'number' }\n    }\n  },\n\n  headers: {\n    type: 'object',\n    properties: {\n      'x-foo': { type: 'string' }\n    },\n    required: ['x-foo']\n  }\n}\n\nfastify.post('/the/url', { schema }, handler)\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note that Ajv will try to ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/epoberezkin/ajv#coercing-data-types"},"coerce")," the values to the types specified in your schema ",(0,i.kt)("inlineCode",{parentName:"em"},"type")," keywords, both to pass the validation and to use the correctly typed data afterwards.")),(0,i.kt)("h4",{id:"adding-a-shared-schema"},"Adding a shared schema"),(0,i.kt)("a",{id:"shared-schema"}),(0,i.kt)("p",null,"Thanks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"addSchema")," API, you can add multiple schemas to the Fastify instance and then reuse them in multiple parts of your application. ",(0,i.kt)("em",{parentName:"p"},"(Note that this API is not encapsulated)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')()\n\nfastify.addSchema({\n  $id: 'greetings',\n  type: 'object',\n  properties: {\n    hello: { type: 'string' }\n  }\n})\n\nfastify.route({\n  method: 'POST',\n  url: '/',\n  schema: {\n    body: 'greetings#'\n  },\n  handler: () => {}\n})\n")),(0,i.kt)("p",null,"You can use the shared schema everywhere, as top level schema or nested inside other schemas:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')()\n\nfastify.addSchema({\n  $id: 'greetings',\n  type: 'object',\n  properties: {\n    hello: { type: 'string' }\n  }\n})\n\nfastify.route({\n  method: 'POST',\n  url: '/',\n  schema: {\n    body: {\n      type: 'object',\n      properties: {\n        greeting: 'greetings#',\n        timestamp: { type: 'number' }\n      }\n    }\n  },\n  handler: () => {}\n})\n")),(0,i.kt)("h4",{id:"retrieving-a-copy-of-all-shared-schemas"},"Retrieving a copy of all shared schemas"),(0,i.kt)("a",{id:"get-shared-schema"}),(0,i.kt)("p",null,"The function ",(0,i.kt)("inlineCode",{parentName:"p"},"getSchemas")," returns all shared schemas that were added by ",(0,i.kt)("inlineCode",{parentName:"p"},"addSchema")," method."),(0,i.kt)("h4",{id:"schema-compiler"},"Schema Compiler"),(0,i.kt)("a",{id:"schema-compiler"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"schemaCompiler")," is a function that returns a function that validates the body, url parameters, headers, and query string. The default ",(0,i.kt)("inlineCode",{parentName:"p"},"schemaCompiler")," returns a function that implements the ",(0,i.kt)("a",{parentName:"p",href:"https://ajv.js.org/"},"ajv")," validation interface. Fastify uses it internally to speed the validation up."),(0,i.kt)("p",null,"Fastify's ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/epoberezkin/ajv#options-to-modify-validated-data"},"baseline ajv configuration")," is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  removeAdditional: true, // remove additional properties\n  useDefaults: true, // replace missing properties and items with the values from corresponding default keyword\n  coerceTypes: true  // change data type of data to match type keyword\n}\n")),(0,i.kt)("p",null,"This baseline configuration cannot be modified. If you want to change or set additional config options, you will need to create your own instance and override the existing one like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')()\nconst Ajv = require('ajv')\nconst ajv = new Ajv({\n  // the fastify defaults (if needed)\n  removeAdditional: true,\n  useDefaults: true,\n  coerceTypes: true\n  // any other options\n  // ...\n})\nfastify.setSchemaCompiler(function (schema) {\n  return ajv.compile(schema)\n})\n")),(0,i.kt)("p",null,"But maybe you want to change the validation library. Perhaps you like ",(0,i.kt)("inlineCode",{parentName:"p"},"Joi"),". In this case, you can use it to validate the url parameters, body, and query string!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Joi = require('joi')\n\nfastify.post('/the/url', {\n  schema: {\n    body: Joi.object().keys({\n      hello: Joi.string().required()\n    }).required()\n  },\n  schemaCompiler: schema => data => Joi.validate(data, schema)\n}, handler)\n")),(0,i.kt)("p",null,"In that case the function returned by ",(0,i.kt)("inlineCode",{parentName:"p"},"schemaCompiler")," returns an object like:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error"),": filled with an instance of ",(0,i.kt)("inlineCode",{parentName:"li"},"Error")," or a string that describes the validation error"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),": the coerced value that passed the validation")),(0,i.kt)("h3",{id:"serialization"},"Serialization"),(0,i.kt)("a",{id:"serialization"}),(0,i.kt)("p",null,"Usually you will send your data to the clients via JSON, and Fastify has a powerful tool to help you, ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/fast-json-stringify"},"fast-json-stringify"),", which is used if you have provided an output schema in the route options. We encourage you to use an output schema, as it will increase your throughput by 100-400% depending on your payload and will prevent accidental disclosure of sensitive information."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const schema = {\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        value: { type: 'string' },\n        otherValue: { type: 'boolean' }\n      }\n    }\n  }\n}\n\nfastify.post('/the/url', { schema }, handler)\n")),(0,i.kt)("p",null,"As you can see, the response schema is based on the status code. If you want to use the same schema for multiple status codes, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"'2xx'"),", for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const schema = {\n  response: {\n    '2xx': {\n      type: 'object',\n      properties: {\n        value: { type: 'string' },\n        otherValue: { type: 'boolean' }\n      }\n    },\n    201: {\n      type: 'object',\n      properties: {\n        value: { type: 'string' }\n      }\n    }\n  }\n}\n\nfastify.post('/the/url', { schema }, handler)\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"If you need a custom serializer in a very specific part of your code, you can set one with ",(0,i.kt)("inlineCode",{parentName:"em"},"reply.serializer(...)"),".")),(0,i.kt)("h3",{id:"error-handling"},"Error Handling"),(0,i.kt)("p",null,"When schema validation fails for a request, Fastify will automtically return a  status 400 response including the result from the validator in the payload. As an example, if you have the following schema for your route"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const schema = {\n  body: {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n    },\n    required: ['name']\n  }\n}\n")),(0,i.kt)("p",null,"and fail to satisfy it, the route will immediately return a response with the following payload"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{ \n  "statusCode": 400,\n  "error": "Bad Request",\n  "message": "body should have required property \'name\'" \n}\n')),(0,i.kt)("p",null,"If you want to handle errors inside the route, you can specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"attachValidation")," option for your route. If there is a validation error, the ",(0,i.kt)("inlineCode",{parentName:"p"},"validationError")," property of the request will contain the ",(0,i.kt)("inlineCode",{parentName:"p"},"Error")," object with the raw ",(0,i.kt)("inlineCode",{parentName:"p"},"validation")," result as shown below"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = Fastify()\n\nfastify.post('/', { schema, attachValidation: true }, function (req, reply) {\n  if (req.validation) {\n    // `req.validationError.validation` contains the raw validation error\n    reply.code(400).send(req.validationError)\n  }\n})\n")),(0,i.kt)("p",null,"You can also use ",(0,i.kt)("a",{parentName:"p",href:"https://www.fastify.io/docs/latest/Server/#seterrorhandler"},"setErrorHandler")," to define a custom response for validation errors such as"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fastify.setErrorHandler(function (error, request, reply) {\n  if (error.validation) {\n     reply.status(422).send(new Error('validation failed'))\n  }\n})\n")),(0,i.kt)("h3",{id:"json-schema-and-shared-schema-support"},"JSON Schema and Shared Schema support"),(0,i.kt)("p",null,"JSON Schema has some type of utilities in order to optimize your schemas that,\nin conjuction with the Fastify's shared schema, let you reuse all your schemas easily."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Use Case"),(0,i.kt)("th",{parentName:"tr",align:null},"Validator"),(0,i.kt)("th",{parentName:"tr",align:null},"Serializer"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"shared schema"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"$ref")," to ",(0,i.kt)("inlineCode",{parentName:"td"},"$id")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"$ref")," to ",(0,i.kt)("inlineCode",{parentName:"td"},"/definitions")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"$ref")," to shared schema ",(0,i.kt)("inlineCode",{parentName:"td"},"$id")),(0,i.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"$ref")," to shared schema ",(0,i.kt)("inlineCode",{parentName:"td"},"/definitions")),(0,i.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")))),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Usage of the Shared Schema feature\nfastify.addSchema({\n  $id: 'sharedAddress',\n  type: 'object',\n  properties: {\n    city: { 'type': 'string' }\n  }\n})\n\nconst sharedSchema = {\n  type: 'object',\n  properties: {\n    home: 'sharedAddress#',\n    work: 'sharedAddress#'\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Usage of $ref to $id in same JSON Schema\nconst refToId = {\n  type: 'object',\n  definitions: {\n    foo: {\n      $id: '#address',\n      type: 'object',\n      properties: {\n        city: { 'type': 'string' }\n      }\n    }\n  },\n  properties: {\n    home: { $ref: '#address' },\n    work: { $ref: '#address' }\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Usage of $ref to /definitions in same JSON Schema\nconst refToDefinitions = {\n  type: 'object',\n  definitions: {\n    foo: {\n      $id: '#address',\n      type: 'object',\n      properties: {\n        city: { 'type': 'string' }\n      }\n    }\n  },\n  properties: {\n    home: { $ref: '#/definitions/foo' },\n    work: { $ref: '#/definitions/foo' }\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Usage $ref to a shared schema $id as external schema\nfastify.addSchema({\n  $id: 'http://foo/common.json',\n  type: 'object',\n  definitions: {\n    foo: {\n      $id: '#address',\n      type: 'object',\n      properties: {\n        city: { 'type': 'string' }\n      }\n    }\n  }\n})\n\nconst refToSharedSchemaId = {\n  type: 'object',\n  properties: {\n    home: { $ref: 'http://foo/common.json#address' },\n    work: { $ref: 'http://foo/common.json#address' }\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Usage $ref to a shared schema /definitions as external schema\nfastify.addSchema({\n  $id: 'http://foo/common.json',\n  type: 'object',\n  definitions: {\n    foo: {\n      type: 'object',\n      properties: {\n        city: { 'type': 'string' }\n      }\n    }\n  }\n})\n\nconst refToSharedSchemaDefinitions = {\n  type: 'object',\n  properties: {\n    home: { $ref: 'http://foo/common.json#/definitions/foo' },\n    work: { $ref: 'http://foo/common.json#/definitions/foo' }\n  }\n}\n")),(0,i.kt)("h3",{id:"resources"},"Resources"),(0,i.kt)("a",{id:"resources"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://json-schema.org/"},"JSON Schema")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://spacetelescope.github.io/understanding-json-schema/"},"Understanding JSON schema")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/fastify/fast-json-stringify"},"fast-json-stringify documentation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/epoberezkin/ajv/blob/master/README.md"},"Ajv documentation"))))}m.isMDXComponent=!0}}]);