"use strict";(self.webpackChunkfastify_website=self.webpackChunkfastify_website||[]).push([[3048],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,k=c["".concat(o,".").concat(m)]||c[m]||u[m]||l;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5981:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],s={title:"Reply"},o=void 0,p={unversionedId:"Reference/Reply",id:"Reference/Reply",isDocsHomePage:!1,title:"Reply",description:"Reply",source:"@site/docs/Reference/Reply.md",sourceDirName:"Reference",slug:"/Reference/Reply",permalink:"/website-next/docs/v3/Reference/Reply",editUrl:"https://github.com/fastify/website-next/edit/main/docs/docs/Reference/Reply.md",tags:[],version:"current",frontMatter:{title:"Reply"},sidebar:"sidebar",previous:{title:"Plugins",permalink:"/website-next/docs/v3/Reference/Plugins"},next:{title:"Request",permalink:"/website-next/docs/v3/Reference/Request"}},d=[{value:"Reply",id:"reply",children:[{value:"Introduction",id:"introduction",children:[],level:3},{value:".code(statusCode)",id:"codestatuscode",children:[],level:3},{value:".statusCode",id:"statuscode",children:[],level:3},{value:".server",id:"server",children:[],level:3},{value:".header(key, value)",id:"headerkey-value",children:[],level:3},{value:".headers(object)",id:"headersobject",children:[],level:3},{value:".getHeader(key)",id:"getheaderkey",children:[],level:3},{value:".getHeaders()",id:"getheaders",children:[],level:3},{value:".removeHeader(key)",id:"removeheaderkey",children:[],level:3},{value:".hasHeader(key)",id:"hasheaderkey",children:[],level:3},{value:".redirect(code , dest)",id:"redirectcode--dest",children:[],level:3},{value:".callNotFound()",id:"callnotfound",children:[],level:3},{value:".getResponseTime()",id:"getresponsetime",children:[],level:3},{value:".type(contentType)",id:"typecontenttype",children:[],level:3},{value:".serializer(func)",id:"serializerfunc",children:[],level:3},{value:".raw",id:"raw",children:[],level:3},{value:".sent",id:"sent",children:[],level:3},{value:".hijack()",id:"hijack",children:[],level:3},{value:".send(data)",id:"senddata",children:[{value:"Objects",id:"objects",children:[],level:4},{value:"Strings",id:"strings",children:[],level:4},{value:"Streams",id:"streams",children:[],level:4},{value:"Buffers",id:"buffers",children:[],level:4},{value:"Errors",id:"errors",children:[],level:4},{value:"Type of the final payload",id:"type-of-the-final-payload",children:[],level:4},{value:"Async-Await and Promises",id:"async-await-and-promises",children:[],level:4}],level:3},{value:".then(fulfilled, rejected)",id:"thenfulfilled-rejected",children:[],level:3}],level:2}],u={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"reply"},"Reply"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#reply"},"Reply"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#codestatuscode"},".code(statusCode)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#statuscode"},".statusCode")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#server"},".server")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#headerkey-value"},".header(key, value)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#headersobject"},".headers(object)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#getheaderkey"},".getHeader(key)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#getheaders"},".getHeaders()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#removeheaderkey"},".removeHeader(key)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#hasheaderkey"},".hasHeader(key)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#redirectcode--dest"},".redirect([code ,] dest)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#callnotfound"},".callNotFound()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#getresponsetime"},".getResponseTime()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#typecontenttype"},".type(contentType)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#serializerfunc"},".serializer(func)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#raw"},".raw")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#sent"},".sent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#hijack"},".hijack()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#senddata"},".send(data)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#objects"},"Objects")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#strings"},"Strings")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#streams"},"Streams")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#buffers"},"Buffers")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#errors"},"Errors")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#type-of-the-final-payload"},"Type of the final payload")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#async-await-and-promises"},"Async-Await and Promises")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#thenfulfilled-rejected"},".then(fulfilled, rejected)"))))),(0,l.kt)("h3",{id:"introduction"},"Introduction"),(0,l.kt)("a",{id:"introduction"}),(0,l.kt)("p",null,"The second parameter of the handler function is ",(0,l.kt)("inlineCode",{parentName:"p"},"Reply"),".\nReply is a core Fastify object that exposes the following functions\nand properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".code(statusCode)")," - Sets the status code."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".status(statusCode)")," - An alias for ",(0,l.kt)("inlineCode",{parentName:"li"},".code(statusCode)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".statusCode")," - Read and set the HTTP status code."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".server")," - A reference to the fastify instance object."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".header(name, value)")," - Sets a response header."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".headers(object)")," - Sets all the keys of the object as response headers."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".getHeader(name)")," - Retrieve value of already set header."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".getHeaders()")," - Gets a shallow copy of all current response headers."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".removeHeader(key)")," - Remove the value of a previously set header."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".hasHeader(name)")," - Determine if a header has been set."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".type(value)")," - Sets the header ",(0,l.kt)("inlineCode",{parentName:"li"},"Content-Type"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".redirect([code,] dest)")," - Redirect to the specified url, the status code is optional (default to ",(0,l.kt)("inlineCode",{parentName:"li"},"302"),")."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".callNotFound()")," - Invokes the custom not found handler."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".serialize(payload)")," - Serializes the specified payload using the default JSON serializer or using the custom serializer (if one is set) and returns the serialized payload."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".serializer(function)")," - Sets a custom serializer for the payload."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".send(payload)")," - Sends the payload to the user, could be a plain text, a buffer, JSON, stream, or an Error object."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".sent")," - A boolean value that you can use if you need to know if ",(0,l.kt)("inlineCode",{parentName:"li"},"send")," has already been called."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".raw")," - The ",(0,l.kt)("a",{parentName:"li",href:"https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_class_http_serverresponse"},(0,l.kt)("inlineCode",{parentName:"a"},"http.ServerResponse"))," from Node core."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".res")," ",(0,l.kt)("em",{parentName:"li"},"(deprecated, use ",(0,l.kt)("inlineCode",{parentName:"em"},".raw")," instead)")," - The ",(0,l.kt)("a",{parentName:"li",href:"https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_class_http_serverresponse"},(0,l.kt)("inlineCode",{parentName:"a"},"http.ServerResponse"))," from Node core."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".log")," - The logger instance of the incoming request."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".request")," - The incoming request."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".context")," - Access the ",(0,l.kt)("a",{parentName:"li",href:"/website-next/docs/v3/Reference/Request#Request"},"Request's context")," property.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', options, function (request, reply) {\n  // Your code\n  reply\n    .code(200)\n    .header('Content-Type', 'application/json; charset=utf-8')\n    .send({ hello: 'world' })\n})\n")),(0,l.kt)("p",null,"Additionally, ",(0,l.kt)("inlineCode",{parentName:"p"},"Reply")," provides access to the context of the request:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', {config: {foo: 'bar'}}, function (request, reply) {\n  reply.send('handler config.foo = ' + reply.context.config.foo)\n})\n")),(0,l.kt)("h3",{id:"codestatuscode"},".code(statusCode)"),(0,l.kt)("a",{id:"code"}),(0,l.kt)("p",null,"If not set via ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.code"),", the resulting ",(0,l.kt)("inlineCode",{parentName:"p"},"statusCode")," will be ",(0,l.kt)("inlineCode",{parentName:"p"},"200"),"."),(0,l.kt)("h3",{id:"statuscode"},".statusCode"),(0,l.kt)("a",{id:"statusCode"}),(0,l.kt)("p",null,"This property reads and sets the HTTP status code. It is an alias for ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.code()")," when used as a setter."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"if (reply.statusCode >= 299) {\n  reply.statusCode = 500\n}\n")),(0,l.kt)("h3",{id:"server"},".server"),(0,l.kt)("a",{id:"server"}),(0,l.kt)("p",null,"The Fastify server instance, scoped to the current ",(0,l.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Encapsulation"},"encapsulation context"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.decorate('util', function util () {\n  return 'foo'\n})\n\nfastify.get('/', async function (req, rep) {\n  return rep.server.util() // foo\n})\n")),(0,l.kt)("h3",{id:"headerkey-value"},".header(key, value)"),(0,l.kt)("a",{id:"header"}),(0,l.kt)("p",null,"Sets a response header. If the value is omitted or undefined, it is coerced to ",(0,l.kt)("inlineCode",{parentName:"p"},"''"),"."),(0,l.kt)("p",null,"For more information, see ",(0,l.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_response_setheader_name_value"},(0,l.kt)("inlineCode",{parentName:"a"},"http.ServerResponse#setHeader")),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("h3",{parentName:"li",id:"set-cookie"},"set-cookie"),(0,l.kt)("a",{id:"set-cookie"}),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"- When sending different values as a cookie with `set-cookie` as the key, every value will be sent as a cookie instead of replacing the previous value.\n\n```js\nreply.header('set-cookie', 'foo');\nreply.header('set-cookie', 'bar');\n```\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The browser will only consider the latest reference of a key for the ",(0,l.kt)("inlineCode",{parentName:"p"},"set-cookie")," header. This is done to avoid parsing the ",(0,l.kt)("inlineCode",{parentName:"p"},"set-cookie")," header when added to a reply and speeds up the serialization of the reply.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"To reset the ",(0,l.kt)("inlineCode",{parentName:"p"},"set-cookie")," header, you need to make an explicit call to ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.removeHeader('set-cookie')"),", read more about ",(0,l.kt)("inlineCode",{parentName:"p"},".removeHeader(key)")," ",(0,l.kt)("a",{parentName:"p",href:"#removeheaderkey"},"here"),"."))))),(0,l.kt)("h3",{id:"headersobject"},".headers(object)"),(0,l.kt)("a",{id:"headers"}),(0,l.kt)("p",null,"Sets all the keys of the object as response headers. ",(0,l.kt)("a",{parentName:"p",href:"#headerkey-value"},(0,l.kt)("inlineCode",{parentName:"a"},".header"))," will be called under the hood."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply.headers({\n  'x-foo': 'foo',\n  'x-bar': 'bar'\n})\n")),(0,l.kt)("h3",{id:"getheaderkey"},".getHeader(key)"),(0,l.kt)("a",{id:"getHeader"}),(0,l.kt)("p",null,"Retrieves the value of a previously set header."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply.header('x-foo', 'foo') // setHeader: key, value\nreply.getHeader('x-foo') // 'foo'\n")),(0,l.kt)("h3",{id:"getheaders"},".getHeaders()"),(0,l.kt)("a",{id:"getHeaders"}),(0,l.kt)("p",null,"Gets a shallow copy of all current response headers, including those set via the raw ",(0,l.kt)("inlineCode",{parentName:"p"},"http.ServerResponse"),". Note that headers set via Fastify take precedence over those set via ",(0,l.kt)("inlineCode",{parentName:"p"},"http.ServerResponse"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply.header('x-foo', 'foo')\nreply.header('x-bar', 'bar')\nreply.raw.setHeader('x-foo', 'foo2')\nreply.getHeaders() // { 'x-foo': 'foo', 'x-bar': 'bar' }\n")),(0,l.kt)("h3",{id:"removeheaderkey"},".removeHeader(key)"),(0,l.kt)("a",{id:"getHeader"}),(0,l.kt)("p",null,"Remove the value of a previously set header."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply.header('x-foo', 'foo')\nreply.removeHeader('x-foo')\nreply.getHeader('x-foo') // undefined\n")),(0,l.kt)("h3",{id:"hasheaderkey"},".hasHeader(key)"),(0,l.kt)("a",{id:"hasHeader"}),(0,l.kt)("p",null,"Returns a boolean indicating if the specified header has been set."),(0,l.kt)("h3",{id:"redirectcode--dest"},".redirect(","[code ,]"," dest)"),(0,l.kt)("a",{id:"redirect"}),(0,l.kt)("p",null,"Redirects a request to the specified URL, the status code is optional, default to ",(0,l.kt)("inlineCode",{parentName:"p"},"302")," (if status code is not already set by calling ",(0,l.kt)("inlineCode",{parentName:"p"},"code"),")."),(0,l.kt)("p",null,"Example (no ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.code()")," call) sets status code to ",(0,l.kt)("inlineCode",{parentName:"p"},"302")," and redirects to ",(0,l.kt)("inlineCode",{parentName:"p"},"/home")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply.redirect('/home')\n")),(0,l.kt)("p",null,"Example (no ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.code()")," call) sets status code to ",(0,l.kt)("inlineCode",{parentName:"p"},"303")," and redirects to ",(0,l.kt)("inlineCode",{parentName:"p"},"/home")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply.redirect(303, '/home')\n")),(0,l.kt)("p",null,"Example (",(0,l.kt)("inlineCode",{parentName:"p"},"reply.code()")," call) sets status code to ",(0,l.kt)("inlineCode",{parentName:"p"},"303")," and redirects to ",(0,l.kt)("inlineCode",{parentName:"p"},"/home")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply.code(303).redirect('/home')\n")),(0,l.kt)("p",null,"Example (",(0,l.kt)("inlineCode",{parentName:"p"},"reply.code()")," call) sets status code to ",(0,l.kt)("inlineCode",{parentName:"p"},"302")," and redirects to ",(0,l.kt)("inlineCode",{parentName:"p"},"/home")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply.code(303).redirect(302, '/home')\n")),(0,l.kt)("h3",{id:"callnotfound"},".callNotFound()"),(0,l.kt)("a",{id:"call-not-found"}),(0,l.kt)("p",null,"Invokes the custom not found handler. Note that it will only call ",(0,l.kt)("inlineCode",{parentName:"p"},"preHandler")," hook specified in ",(0,l.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Server#set-not-found-handler"},(0,l.kt)("inlineCode",{parentName:"a"},"setNotFoundHandler")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply.callNotFound()\n")),(0,l.kt)("h3",{id:"getresponsetime"},".getResponseTime()"),(0,l.kt)("a",{id:"getResponseTime"}),(0,l.kt)("p",null,"Invokes the custom response time getter to calculate the amount of time passed since the request was started."),(0,l.kt)("p",null,"Note that unless this function is called in the ",(0,l.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Hooks#onresponse"},(0,l.kt)("inlineCode",{parentName:"a"},"onResponse")," hook")," it will always return ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const milliseconds = reply.getResponseTime()\n")),(0,l.kt)("h3",{id:"typecontenttype"},".type(contentType)"),(0,l.kt)("a",{id:"type"}),(0,l.kt)("p",null,"Sets the content type for the response.\nThis is a shortcut for ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.header('Content-Type', 'the/type')"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply.type('text/html')\n")),(0,l.kt)("h3",{id:"serializerfunc"},".serializer(func)"),(0,l.kt)("a",{id:"serializer"}),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},".send()")," will by default JSON-serialize any value that is not one of: ",(0,l.kt)("inlineCode",{parentName:"p"},"Buffer"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"stream"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Error"),". If you need to replace the default serializer with a custom serializer for a particular request, you can do so with the ",(0,l.kt)("inlineCode",{parentName:"p"},".serializer()")," utility. Be aware that if you are using a custom serializer, you must set a custom ",(0,l.kt)("inlineCode",{parentName:"p"},"'Content-Type'")," header."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply\n  .header('Content-Type', 'application/x-protobuf')\n  .serializer(protoBuf.serialize)\n")),(0,l.kt)("p",null,"Note that you don't need to use this utility inside a ",(0,l.kt)("inlineCode",{parentName:"p"},"handler")," because Buffers, streams, and strings (unless a serializer is set) are considered to already be serialized."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"reply\n  .header('Content-Type', 'application/x-protobuf')\n  .send(protoBuf.serialize(data))\n")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#send"},(0,l.kt)("inlineCode",{parentName:"a"},".send()"))," for more information on sending different types of values."),(0,l.kt)("h3",{id:"raw"},".raw"),(0,l.kt)("a",{id:"raw"}),(0,l.kt)("p",null,"This is the ",(0,l.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_class_http_serverresponse"},(0,l.kt)("inlineCode",{parentName:"a"},"http.ServerResponse"))," from Node core. Whilst you are using the Fastify ",(0,l.kt)("inlineCode",{parentName:"p"},"Reply")," object, the use of ",(0,l.kt)("inlineCode",{parentName:"p"},"Reply.raw")," functions is at your own risk as you are skipping all the Fastify\nlogic of handling the HTTP response. e.g.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/cookie-2', (req, reply) => {\n  reply.setCookie('session', 'value', { secure: false }) // this will not be used\n\n  // in this case we are using only the nodejs http server response object\n  reply.raw.writeHead(200, { 'Content-Type': 'text/plain' })\n  reply.raw.write('ok')\n  reply.raw.end()\n})\n")),(0,l.kt)("p",null,"Another example of the misuse of ",(0,l.kt)("inlineCode",{parentName:"p"},"Reply.raw")," is explained in ",(0,l.kt)("a",{parentName:"p",href:"#getheaders"},"Reply"),"."),(0,l.kt)("h3",{id:"sent"},".sent"),(0,l.kt)("a",{id:"sent"}),(0,l.kt)("p",null,"As the name suggests, ",(0,l.kt)("inlineCode",{parentName:"p"},".sent")," is a property to indicate if\na response has been sent via ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.send()"),"."),(0,l.kt)("p",null,"In case a route handler is defined as an async function or it\nreturns a promise, it is possible to set ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.sent = true"),"\nto indicate that the automatic invocation of ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.send()")," once the\nhandler promise resolve should be skipped. By setting ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.sent =\ntrue"),", an application claims full responsibility for the low-level\nrequest and response. Moreover, hooks will not be invoked."),(0,l.kt)("p",null,"As an example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"app.get('/', (req, reply) => {\n  reply.sent = true\n  reply.raw.end('hello world')\n\n  return Promise.resolve('this will be skipped')\n})\n")),(0,l.kt)("p",null,"If the handler rejects, the error will be logged."),(0,l.kt)("h3",{id:"hijack"},".hijack()"),(0,l.kt)("a",{id:"hijack"}),(0,l.kt)("p",null,"Sometimes you might need to halt the execution of the normal request lifecycle and handle sending the response manually."),(0,l.kt)("p",null,"To achieve this, Fastify provides the ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.hijack()")," method that can be called during the request lifecycle (At any point before ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.send()")," is called), and allows you to prevent Fastify from sending the response, and from running the remaining hooks (and user handler if the reply was hijacked before)."),(0,l.kt)("p",null,"NB (*): If ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.raw")," is used to send a response back to the user, ",(0,l.kt)("inlineCode",{parentName:"p"},"onResponse")," hooks will still be executed"),(0,l.kt)("h3",{id:"senddata"},".send(data)"),(0,l.kt)("a",{id:"send"}),(0,l.kt)("p",null,"As the name suggests, ",(0,l.kt)("inlineCode",{parentName:"p"},".send()")," is the function that sends the payload to the end user."),(0,l.kt)("h4",{id:"objects"},"Objects"),(0,l.kt)("a",{id:"send-object"}),(0,l.kt)("p",null,"As noted above, if you are sending JSON objects, ",(0,l.kt)("inlineCode",{parentName:"p"},"send")," will serialize the object with ",(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/fast-json-stringify"},"fast-json-stringify")," if you set an output schema, otherwise, ",(0,l.kt)("inlineCode",{parentName:"p"},"JSON.stringify()")," will be used."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/json', options, function (request, reply) {\n  reply.send({ hello: 'world' })\n})\n")),(0,l.kt)("h4",{id:"strings"},"Strings"),(0,l.kt)("a",{id:"send-string"}),(0,l.kt)("p",null,"If you pass a string to ",(0,l.kt)("inlineCode",{parentName:"p"},"send")," without a ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type"),", it will be sent as ",(0,l.kt)("inlineCode",{parentName:"p"},"text/plain; charset=utf-8"),". If you set the ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," header and pass a string to ",(0,l.kt)("inlineCode",{parentName:"p"},"send"),", it will be serialized with the custom serializer if one is set, otherwise, it will be sent unmodified (unless the ",(0,l.kt)("inlineCode",{parentName:"p"},"Content-Type")," header is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"application/json; charset=utf-8"),", in which case it will be JSON-serialized like an object \u2014 see the section above)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/json', options, function (request, reply) {\n  reply.send('plain string')\n})\n")),(0,l.kt)("h4",{id:"streams"},"Streams"),(0,l.kt)("a",{id:"send-streams"}),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"send")," can also handle streams out of the box. If you are sending a stream and you have not set a ",(0,l.kt)("inlineCode",{parentName:"p"},"'Content-Type'")," header, ",(0,l.kt)("em",{parentName:"p"},"send")," will set it at ",(0,l.kt)("inlineCode",{parentName:"p"},"'application/octet-stream'"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/streams', function (request, reply) {\n  const fs = require('fs')\n  const stream = fs.createReadStream('some-file', 'utf8')\n  reply.send(stream)\n})\n")),(0,l.kt)("h4",{id:"buffers"},"Buffers"),(0,l.kt)("a",{id:"send-buffers"}),(0,l.kt)("p",null,"If you are sending a buffer and you have not set a ",(0,l.kt)("inlineCode",{parentName:"p"},"'Content-Type'")," header, ",(0,l.kt)("em",{parentName:"p"},"send")," will set it to ",(0,l.kt)("inlineCode",{parentName:"p"},"'application/octet-stream'"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs')\nfastify.get('/streams', function (request, reply) {\n  fs.readFile('some-file', (err, fileBuffer) => {\n    reply.send(err || fileBuffer)\n  })\n})\n")),(0,l.kt)("h4",{id:"errors"},"Errors"),(0,l.kt)("a",{id:"errors"}),(0,l.kt)("p",null,"If you pass to ",(0,l.kt)("em",{parentName:"p"},"send")," an object that is an instance of ",(0,l.kt)("em",{parentName:"p"},"Error"),", Fastify will automatically create an error structured as the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  error: String        // the HTTP error message\n  code: String         // the Fastify error code\n  message: String      // the user error message\n  statusCode: Number   // the HTTP status code\n}\n")),(0,l.kt)("p",null,"You can add custom properties to the Error object, such as ",(0,l.kt)("inlineCode",{parentName:"p"},"headers"),", that will be used to enhance the HTTP response."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note: If you are passing an error to ",(0,l.kt)("inlineCode",{parentName:"em"},"send")," and the statusCode is less than 400, Fastify will automatically set it at 500.")),(0,l.kt)("p",null,"Tip: you can simplify errors by using the ",(0,l.kt)("a",{parentName:"p",href:"https://npm.im/http-errors"},(0,l.kt)("inlineCode",{parentName:"a"},"http-errors"))," module or ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-sensible"},(0,l.kt)("inlineCode",{parentName:"a"},"fastify-sensible"))," plugin to generate errors:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', function (request, reply) {\n  reply.send(httpErrors.Gone())\n})\n")),(0,l.kt)("p",null,"To customize the JSON error output you can do it by:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"setting a response JSON schema for the status code you need"),(0,l.kt)("li",{parentName:"ul"},"add the additional properties to the ",(0,l.kt)("inlineCode",{parentName:"li"},"Error")," instance")),(0,l.kt)("p",null,"Notice that if the returned status code is not in the response schema list, the default behaviour will be applied."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', {\n  schema: {\n    response: {\n      501: {\n        type: 'object',\n        properties: {\n          statusCode: { type: 'number' },\n          code: { type: 'string' },\n          error: { type: 'string' },\n          message: { type: 'string' },\n          time: { type: 'string' }\n        }\n      }\n    }\n  }\n}, function (request, reply) {\n  const error = new Error('This endpoint has not been implemented')\n  error.time = 'it will be implemented in two weeks'\n  reply.code(501).send(error)\n})\n")),(0,l.kt)("p",null,"If you want to customize error handling, check out ",(0,l.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Server#seterrorhandler"},(0,l.kt)("inlineCode",{parentName:"a"},"setErrorHandler"))," API."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note: you are responsible for logging when customizing the error handler")),(0,l.kt)("p",null,"API:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.setErrorHandler(function (error, request, reply) {\n  request.log.warn(error)\n  var statusCode = error.statusCode >= 400 ? error.statusCode : 500\n  reply\n    .code(statusCode)\n    .type('text/plain')\n    .send(statusCode >= 500 ? 'Internal server error' : error.message)\n})\n")),(0,l.kt)("p",null,"The not found errors generated by the router will use the  ",(0,l.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Server#setnotfoundhandler"},(0,l.kt)("inlineCode",{parentName:"a"},"setNotFoundHandler"))),(0,l.kt)("p",null,"API:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.setNotFoundHandler(function (request, reply) {\n  reply\n    .code(404)\n    .type('text/plain')\n    .send('a custom not found')\n})\n")),(0,l.kt)("h4",{id:"type-of-the-final-payload"},"Type of the final payload"),(0,l.kt)("a",{id:"payload-type"}),(0,l.kt)("p",null,"The type of the sent payload (after serialization and going through any ",(0,l.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Hooks#the-onsend-hook"},(0,l.kt)("inlineCode",{parentName:"a"},"onSend")," hooks"),") must be one of the following types, otherwise, an error will be thrown:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Buffer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"stream")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"undefined")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"null"))),(0,l.kt)("h4",{id:"async-await-and-promises"},"Async-Await and Promises"),(0,l.kt)("a",{id:"async-await-promise"}),(0,l.kt)("p",null,"Fastify natively handles promises and supports async-await."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Note that in the following examples we are not using reply.send.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const delay = promisify(setTimeout)\n\nfastify.get('/promises', options, function (request, reply) {\n return delay(200).then(() => { return { hello: 'world' }})\n})\n\nfastify.get('/async-await', options, async function (request, reply) {\n  await delay(200)\n  return { hello: 'world' }\n})\n")),(0,l.kt)("p",null,"Rejected promises default to a ",(0,l.kt)("inlineCode",{parentName:"p"},"500")," HTTP status code. Reject the promise, or ",(0,l.kt)("inlineCode",{parentName:"p"},"throw")," in an ",(0,l.kt)("inlineCode",{parentName:"p"},"async function"),", with an object that has ",(0,l.kt)("inlineCode",{parentName:"p"},"statusCode")," (or ",(0,l.kt)("inlineCode",{parentName:"p"},"status"),") and ",(0,l.kt)("inlineCode",{parentName:"p"},"message")," properties to modify the reply."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/teapot', async function (request, reply) {\n  const err = new Error()\n  err.statusCode = 418\n  err.message = 'short and stout'\n  throw err\n})\n\nfastify.get('/botnet', async function (request, reply) {\n  throw { statusCode: 418, message: 'short and stout' }\n  // will return to the client the same json\n})\n")),(0,l.kt)("p",null,"If you want to know more please review ",(0,l.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Routes#async-await"},"Routes#async-await"),"."),(0,l.kt)("h3",{id:"thenfulfilled-rejected"},".then(fulfilled, rejected)"),(0,l.kt)("a",{id:"then"}),(0,l.kt)("p",null,"As the name suggests, a ",(0,l.kt)("inlineCode",{parentName:"p"},"Reply")," object can be awaited upon, i.e. ",(0,l.kt)("inlineCode",{parentName:"p"},"await reply")," will wait until the reply is sent.\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"await")," syntax calls the ",(0,l.kt)("inlineCode",{parentName:"p"},"reply.then()"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"reply.then(fulfilled, rejected)")," accepts two parameters:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fulfilled")," will be called when a response has been fully sent,"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rejected")," will be called if the underlying stream had an error, e.g.\nthe socket has been destroyed.")),(0,l.kt)("p",null,"For more details, see:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/fastify/fastify/issues/1864"},"https://github.com/fastify/fastify/issues/1864")," for the discussion about this feature"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://promisesaplus.com/"},"https://promisesaplus.com/")," for the definition of thenables"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then")," for the signature")))}c.isMDXComponent=!0}}]);