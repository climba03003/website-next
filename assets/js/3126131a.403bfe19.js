"use strict";(self.webpackChunk_fastify_website=self.webpackChunk_fastify_website||[]).push([[86362],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=l(n),d=o,m=f["".concat(p,".").concat(d)]||f[d]||u[d]||a;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},76264:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={},i=void 0,s={unversionedId:"Documentation/HTTP2",id:"version-v2.15.x/Documentation/HTTP2",title:"HTTP2",description:"HTTP2",source:"@site/versioned_docs/version-v2.15.x/Documentation/HTTP2.md",sourceDirName:"Documentation",slug:"/Documentation/HTTP2",permalink:"/website-next/docs/v2.15.x/Documentation/HTTP2",draft:!1,tags:[],version:"v2.15.x",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Getting-Started",permalink:"/website-next/docs/v2.15.x/Documentation/Getting-Started"},next:{title:"Hooks",permalink:"/website-next/docs/v2.15.x/Documentation/Hooks"}},p={},l=[{value:"HTTP2",id:"http2",level:2},{value:"Secure (HTTPS)",id:"secure-https",level:3},{value:"Plain or insecure",id:"plain-or-insecure",level:3}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"http2"},"HTTP2"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Fastify")," offers ",(0,o.kt)("strong",{parentName:"p"},"experimental support")," for HTTP2 starting from Node\n8.8.0, which includes HTTP2 without a flag. ",(0,o.kt)("em",{parentName:"p"},"Fastify")," supports HTTP2\nboth over HTTPS or over plaintext. Note that HTTP2 is available only for node versions >= ",(0,o.kt)("inlineCode",{parentName:"p"},"8.8.1"),"."),(0,o.kt)("p",null,"Currently none of the HTTP2-specific APIs are available through\n",(0,o.kt)("em",{parentName:"p"},"Fastify"),", but Node's ",(0,o.kt)("inlineCode",{parentName:"p"},"req")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"res")," can be access through our\n",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Reply")," interface. PRs are welcome."),(0,o.kt)("h3",{id:"secure-https"},"Secure (HTTPS)"),(0,o.kt)("p",null,"HTTP2 is supported in all modern browsers ",(0,o.kt)("strong",{parentName:"p"},"only over a secure\nconnection"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\nconst fastify = require('fastify')({\n  http2: true,\n  https: {\n    key: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.key')),\n    cert: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.cert'))\n  }\n})\n\nfastify.get('/', function (request, reply) {\n  reply.code(200).send({ hello: 'world' })\n})\n\nfastify.listen(3000)\n\n")),(0,o.kt)("p",null,"ALPN negotiation allows support for both HTTPS and HTTP/2 over the same socket.\nNode core ",(0,o.kt)("inlineCode",{parentName:"p"},"req")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"res")," objects can be either ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http.html"},"HTTP/1"),"\nor ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http2.html"},"HTTP/2"),".\n",(0,o.kt)("em",{parentName:"p"},"Fastify")," supports this out of the box:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\nconst fastify = require('fastify')({\n  http2: true,\n  https: {\n    allowHTTP1: true, // fallback support for HTTP1\n    key: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.key')),\n    cert: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.cert'))\n  }\n})\n\n// this route can be accessed through both protocols\nfastify.get('/', function (request, reply) {\n  reply.code(200).send({ hello: 'world' })\n})\n\nfastify.listen(3000)\n\n")),(0,o.kt)("p",null,"You can test your new server with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ npx h2url https://localhost:3000\n\n")),(0,o.kt)("h3",{id:"plain-or-insecure"},"Plain or insecure"),(0,o.kt)("p",null,"If you are building microservices, you can connect to HTTP2 in plain\ntext, however this is not supported by browsers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"'use strict'\n\nconst fastify = require('fastify')({\n  http2: true\n})\n\nfastify.get('/', function (request, reply) {\n  reply.code(200).send({ hello: 'world' })\n})\n\nfastify.listen(3000)\n\n")),(0,o.kt)("p",null,"You can test your new server with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ npx h2url http://localhost:3000\n\n")))}u.isMDXComponent=!0}}]);