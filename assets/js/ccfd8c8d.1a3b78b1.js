"use strict";(self.webpackChunkfastify_website=self.webpackChunkfastify_website||[]).push([[8787],{3905:function(e,t,a){a.d(t,{Zo:function(){return f},kt:function(){return y}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),l=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},f=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,f=o(e,["components","mdxType","originalType","parentName"]),d=l(a),y=n,h=d["".concat(p,".").concat(y)]||d[y]||u[y]||i;return a?r.createElement(h,s(s({ref:t},f),{},{components:a})):r.createElement(h,s({ref:t},f))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var l=2;l<i;l++)s[l]=a[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3195:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return f},default:function(){return d}});var r=a(7462),n=a(3366),i=(a(7294),a(3905)),s=["components"],o={title:"TypeScript"},p=void 0,l={unversionedId:"Reference/TypeScript",id:"Reference/TypeScript",isDocsHomePage:!1,title:"TypeScript",description:"The Fastify framework is written in vanilla JavaScript, and as such type definitions are not as easy to maintain; however, since version 2 and beyond, maintainers and contributors have put in a great effort to improve the types.",source:"@site/docs/Reference/TypeScript.md",sourceDirName:"Reference",slug:"/Reference/TypeScript",permalink:"/website-next/docs/v3/Reference/TypeScript",editUrl:"https://github.com/fastify/website-next/edit/main/docs/docs/Reference/TypeScript.md",tags:[],version:"current",frontMatter:{title:"TypeScript"},sidebar:"sidebar",previous:{title:"Server",permalink:"/website-next/docs/v3/Reference/Server"},next:{title:"Validation and Serialization",permalink:"/website-next/docs/v3/Reference/Validation-and-Serialization"}},f=[{value:"Learn By Example",id:"learn-by-example",children:[{value:"Getting Started",id:"getting-started",children:[],level:3},{value:"Using Generics",id:"using-generics",children:[],level:3},{value:"JSON Schema",id:"json-schema",children:[{value:"typebox",id:"typebox",children:[],level:4},{value:"Schemas in JSON Files",id:"schemas-in-json-files",children:[],level:4},{value:"json-schema-to-ts",id:"json-schema-to-ts",children:[],level:4}],level:3},{value:"Plugins",id:"plugins",children:[{value:"Creating a TypeScript Fastify Plugin",id:"creating-a-typescript-fastify-plugin",children:[],level:4},{value:"Creating Type Definitions for a Fastify Plugin",id:"creating-type-definitions-for-a-fastify-plugin",children:[],level:4},{value:"Using a Plugin",id:"using-a-plugin",children:[],level:4}],level:3}],level:2},{value:"Code Completion In Vanilla JavaScript",id:"code-completion-in-vanilla-javascript",children:[],level:2},{value:"API Type System Documentation",id:"api-type-system-documentation",children:[{value:"How to import",id:"how-to-import",children:[],level:4},{value:"Generics",id:"generics",children:[{value:"RawServer",id:"rawserver",children:[],level:5},{value:"RawRequest",id:"rawrequest",children:[],level:5},{value:"RawReply",id:"rawreply",children:[],level:5},{value:"Logger",id:"logger",children:[],level:5},{value:"RawBody",id:"rawbody",children:[],level:5}],level:4},{value:"Fastify",id:"fastify",children:[{value:"fastify&lt;RawServer, RawRequest, RawReply, Logger&gt;(opts?: FastifyServerOptions): FastifyInstance",id:"fastifyrawserver-rawrequest-rawreply-loggeropts-fastifyserveroptions-fastifyinstance",children:[{value:"Example 1: Standard HTTP server",id:"example-1-standard-http-server",children:[],level:6},{value:"Example 2: HTTPS sever",id:"example-2-https-sever",children:[],level:6},{value:"Example 3: HTTP2 server",id:"example-3-http2-server",children:[],level:6},{value:"Example 4: Extended HTTP server",id:"example-4-extended-http-server",children:[],level:6},{value:"Example 5: Specifying logger types",id:"example-5-specifying-logger-types",children:[],level:6}],level:5},{value:"fastify.HTTPMethods",id:"fastifyhttpmethods",children:[],level:5},{value:"fastify.RawServerBase",id:"fastifyrawserverbase",children:[],level:5},{value:"fastify.RawServerDefault",id:"fastifyrawserverdefault",children:[],level:5},{value:"fastify.FastifyServerOptions&lt;RawServer, Logger&gt;",id:"fastifyfastifyserveroptionsrawserver-logger",children:[],level:5},{value:"fastify.FastifyInstance&lt;RawServer, RawRequest, RequestGeneric, Logger&gt;",id:"fastifyfastifyinstancerawserver-rawrequest-requestgeneric-logger",children:[],level:5}],level:4},{value:"Request",id:"request",children:[{value:"fastify.FastifyRequest&lt;RequestGeneric, RawServer, RawRequest&gt;",id:"fastifyfastifyrequestrequestgeneric-rawserver-rawrequest",children:[{value:"Example",id:"example",children:[],level:6}],level:5},{value:"fastify.RequestGenericInterface",id:"fastifyrequestgenericinterface",children:[],level:5},{value:"fastify.RawRequestDefaultExpression&lt;RawServer&gt;",id:"fastifyrawrequestdefaultexpressionrawserver",children:[],level:5}],level:4},{value:"Reply",id:"reply",children:[{value:"fastify.FastifyReply&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;",id:"fastifyfastifyreplyrawserver-rawrequest-rawreply-requestgeneric-contextconfig",children:[{value:"Example",id:"example-1",children:[],level:6}],level:5},{value:"fastify.RawReplyDefaultExpression&lt;RawServer&gt;",id:"fastifyrawreplydefaultexpressionrawserver",children:[],level:5}],level:4},{value:"Plugin",id:"plugin",children:[{value:"fastify.FastifyPluginCallback&lt;Options&gt;",id:"fastifyfastifyplugincallbackoptions",children:[],level:5},{value:"fastify.FastifyPluginAsync&lt;Options&gt;",id:"fastifyfastifypluginasyncoptions",children:[],level:5},{value:"fastify.FastifyPlugin&lt;Options&gt;",id:"fastifyfastifypluginoptions",children:[],level:5},{value:"fastify.FastifyPluginOptions",id:"fastifyfastifypluginoptions-1",children:[],level:5}],level:4},{value:"Register",id:"register",children:[{value:"fastify.FastifyRegister(plugin: FastifyPluginCallback, opts: FastifyRegisterOptions)",id:"fastifyfastifyregisterplugin-fastifyplugincallback-opts-fastifyregisteroptions",children:[],level:5},{value:"fastify.FastifyRegister(plugin: FastifyPluginAsync, opts: FastifyRegisterOptions)",id:"fastifyfastifyregisterplugin-fastifypluginasync-opts-fastifyregisteroptions",children:[],level:5},{value:"fastify.FastifyRegister(plugin: FastifyPlugin, opts: FastifyRegisterOptions)",id:"fastifyfastifyregisterplugin-fastifyplugin-opts-fastifyregisteroptions",children:[],level:5},{value:"fastify.FastifyRegisterOptions",id:"fastifyfastifyregisteroptions",children:[],level:5}],level:4},{value:"Logger",id:"logger-1",children:[{value:"fastify.FastifyLoggerOptions&lt;RawServer, RawRequest, RawReply&gt;",id:"fastifyfastifyloggeroptionsrawserver-rawrequest-rawreply",children:[],level:5},{value:"fastify.FastifyLogFn",id:"fastifyfastifylogfn",children:[],level:5},{value:"fastify.LogLevel",id:"fastifyloglevel",children:[],level:5}],level:4},{value:"Context",id:"context",children:[{value:"fastify.FastifyContext",id:"fastifyfastifycontext",children:[],level:5}],level:4},{value:"Routing",id:"routing",children:[{value:"fastify.RouteHandlerMethod&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;",id:"fastifyroutehandlermethodrawserver-rawrequest-rawreply-requestgeneric-contextconfig",children:[],level:5},{value:"fastify.RouteOptions&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;",id:"fastifyrouteoptionsrawserver-rawrequest-rawreply-requestgeneric-contextconfig",children:[],level:5},{value:"fastify.RouteShorthandMethod&lt;RawServer, RawRequest, RawReply&gt;",id:"fastifyrouteshorthandmethodrawserver-rawrequest-rawreply",children:[],level:5},{value:"fastify.RouteShorthandOptions&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;",id:"fastifyrouteshorthandoptionsrawserver-rawrequest-rawreply-requestgeneric-contextconfig",children:[],level:5},{value:"fastify.RouteShorthandOptionsWithHandler&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;",id:"fastifyrouteshorthandoptionswithhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfig",children:[],level:5}],level:4},{value:"Parsers",id:"parsers",children:[{value:"RawBody",id:"rawbody-1",children:[],level:5},{value:"fastify.FastifyBodyParser&lt;RawBody, RawServer, RawRequest&gt;",id:"fastifyfastifybodyparserrawbody-rawserver-rawrequest",children:[],level:5},{value:"fastify.FastifyContentTypeParser&lt;RawServer, RawRequest&gt;",id:"fastifyfastifycontenttypeparserrawserver-rawrequest",children:[],level:5},{value:"fastify.AddContentTypeParser&lt;RawServer, RawRequest&gt;",id:"fastifyaddcontenttypeparserrawserver-rawrequest",children:[],level:5},{value:"fastify.hasContentTypeParser",id:"fastifyhascontenttypeparser",children:[],level:5}],level:4},{value:"Errors",id:"errors",children:[{value:"fastify.FastifyError",id:"fastifyfastifyerror",children:[],level:5},{value:"fastify.ValidationResult",id:"fastifyvalidationresult",children:[],level:5}],level:4},{value:"Hooks",id:"hooks",children:[{value:"fastify.onRequestHookHandler&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;(request: FastifyRequest, reply: FastifyReply, done: (err?: FastifyError) =&gt; void): Promise&lt;unknown&gt; | void",id:"fastifyonrequesthookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-done-err-fastifyerror--void-promiseunknown--void",children:[],level:5},{value:"fastify.preParsingHookHandler&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;(request: FastifyRequest, reply: FastifyReply, done: (err?: FastifyError) =&gt; void): Promise&lt;unknown&gt; | void",id:"fastifypreparsinghookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-done-err-fastifyerror--void-promiseunknown--void",children:[],level:5},{value:"fastify.preValidationHookHandler&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;(request: FastifyRequest, reply: FastifyReply, done: (err?: FastifyError) =&gt; void): Promise&lt;unknown&gt; | void",id:"fastifyprevalidationhookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-done-err-fastifyerror--void-promiseunknown--void",children:[],level:5},{value:"fastify.preHandlerHookHandler&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;(request: FastifyRequest, reply: FastifyReply, done: (err?: FastifyError) =&gt; void): Promise&lt;unknown&gt; | void",id:"fastifyprehandlerhookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-done-err-fastifyerror--void-promiseunknown--void",children:[],level:5},{value:"fastify.preSerializationHookHandler&lt;PreSerializationPayload, RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;(request: FastifyRequest, reply: FastifyReply, payload: PreSerializationPayload, done: (err: FastifyError | null, res?: unknown) =&gt; void): Promise&lt;unknown&gt; | void",id:"fastifypreserializationhookhandlerpreserializationpayload-rawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-payload-preserializationpayload-done-err-fastifyerror--null-res-unknown--void-promiseunknown--void",children:[],level:5},{value:"fastify.onSendHookHandler&lt;OnSendPayload, RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;(request: FastifyRequest, reply: FastifyReply, payload: OnSendPayload, done: (err: FastifyError | null, res?: unknown) =&gt; void): Promise&lt;unknown&gt; | void",id:"fastifyonsendhookhandleronsendpayload-rawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-payload-onsendpayload-done-err-fastifyerror--null-res-unknown--void-promiseunknown--void",children:[],level:5},{value:"fastify.onResponseHookHandler&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;(request: FastifyRequest, reply: FastifyReply, done: (err?: FastifyError) =&gt; void): Promise&lt;unknown&gt; | void",id:"fastifyonresponsehookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-done-err-fastifyerror--void-promiseunknown--void",children:[],level:5},{value:"fastify.onErrorHookHandler&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;(request: FastifyRequest, reply: FastifyReply, error: FastifyError, done: () =&gt; void): Promise&lt;unknown&gt; | void",id:"fastifyonerrorhookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-error-fastifyerror-done---void-promiseunknown--void",children:[],level:5},{value:"fastify.onRouteHookHandler&lt;RawServer, RawRequest, RawReply, RequestGeneric, ContextConfig&gt;(opts: RouteOptions &amp; { path: string; prefix: string }): Promise&lt;unknown&gt; | void",id:"fastifyonroutehookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigopts-routeoptions---path-string-prefix-string--promiseunknown--void",children:[],level:5},{value:"fastify.onRegisterHookHandler&lt;RawServer, RawRequest, RawReply, Logger&gt;(instance: FastifyInstance, done: (err?: FastifyError) =&gt; void): Promise&lt;unknown&gt; | void",id:"fastifyonregisterhookhandlerrawserver-rawrequest-rawreply-loggerinstance-fastifyinstance-done-err-fastifyerror--void-promiseunknown--void",children:[],level:5},{value:"fastify.onCloseHookHandler&lt;RawServer, RawRequest, RawReply, Logger&gt;(instance: FastifyInstance, done: (err?: FastifyError) =&gt; void): Promise&lt;unknown&gt; | void",id:"fastifyonclosehookhandlerrawserver-rawrequest-rawreply-loggerinstance-fastifyinstance-done-err-fastifyerror--void-promiseunknown--void",children:[],level:5}],level:4}],level:2}],u={toc:f};function d(e){var t=e.components,a=(0,n.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Fastify framework is written in vanilla JavaScript, and as such type definitions are not as easy to maintain; however, since version 2 and beyond, maintainers and contributors have put in a great effort to improve the types."),(0,i.kt)("p",null,"The type system was changed in Fastify version 3. The new type system introduces generic constraining and defaulting, plus a new way to define schema types such as a request body, querystring, and more! As the team works on improving framework and type definition synergy, sometimes parts of the API will not be typed or may be typed incorrectly. We encourage you to ",(0,i.kt)("strong",{parentName:"p"},"contribute")," to help us fill in the gaps. Just make sure to read our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/CONTRIBUTING.md"},(0,i.kt)("inlineCode",{parentName:"a"},"CONTRIBUTING.md"))," file before getting started to make sure things go smoothly!"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The documentation in this section covers Fastify version 3.x typings")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Plugins may or may not include typings. See ",(0,i.kt)("a",{parentName:"p",href:"#plugins"},"Plugins")," for more information. We encourage users to send pull requests to improve typings support.")),(0,i.kt)("p",null,"\ud83d\udea8 Don't forget to install ",(0,i.kt)("inlineCode",{parentName:"p"},"@types/node")),(0,i.kt)("h2",{id:"learn-by-example"},"Learn By Example"),(0,i.kt)("p",null,"The best way to learn the Fastify type system is by example! The following four examples should cover the most common Fastify development cases. After the examples there is further, more detailed documentation for the type system."),(0,i.kt)("h3",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"This example will get you up and running with Fastify and TypeScript. It results in a blank http Fastify server."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a new npm project, install Fastify, and install typescript & node.js types as peer dependencies:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\nnpm i fastify\nnpm i -D typescript @types/node\n"))),(0,i.kt)("li",{parentName:"ol"},"Add the following lines to the ",(0,i.kt)("inlineCode",{parentName:"li"},'"scripts"')," section of the ",(0,i.kt)("inlineCode",{parentName:"li"},"package.json"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "build": "tsc -p tsconfig.json",\n    "start": "node index.js"\n  }\n}\n')))),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: Set ",(0,i.kt)("inlineCode",{parentName:"em"},"target")," property in ",(0,i.kt)("inlineCode",{parentName:"em"},"tsconfig.json")," to ",(0,i.kt)("inlineCode",{parentName:"em"},"es2017")," or greater to avoid ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/fastify/fastify/issues/3284"},"FastifyDeprecation")," warning.")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize a TypeScript configuration file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx tsc --init\n")),(0,i.kt)("p",{parentName:"li"},"or use one of the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tsconfig/bases#node-10-tsconfigjson"},"recommended ones"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create an ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts")," file - this will contain the server code")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the following code block to your file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import fastify from 'fastify'\n\nconst server = fastify()\n\nserver.get('/ping', async (request, reply) => {\n  return 'pong\\n'\n})\n\nserver.listen(8080, (err, address) => {\n  if (err) {\n    console.error(err)\n    process.exit(1)\n  }\n  console.log(`Server listening at ${address}`)\n})\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run build")," - this will compile ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," which can be executed using Node.js. If you run into any errors please open an issue in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/help/"},"fastify/help"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run start")," to run the Fastify server")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You should see ",(0,i.kt)("inlineCode",{parentName:"p"},"Server listening at http://127.0.0.1:8080")," in your console")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Try out your server using ",(0,i.kt)("inlineCode",{parentName:"p"},"curl localhost:8080/ping"),", it should return ",(0,i.kt)("inlineCode",{parentName:"p"},"pong")," \ud83c\udfd3"))),(0,i.kt)("p",null,"\ud83c\udf89 You now have a working Typescript Fastify server! This example demonstrates the simplicity of the version 3.x type system. By default, the type system assumes you are using an ",(0,i.kt)("inlineCode",{parentName:"p"},"http")," server. The later examples will demonstrate how to create more complex servers such as ",(0,i.kt)("inlineCode",{parentName:"p"},"https")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"http2"),", how to specify route schemas, and more!"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"For more examples on initializing Fastify with TypeScript (such as enabling HTTP2) check out the detailed API section ",(0,i.kt)("a",{parentName:"p",href:"#fastifyrawserver-rawrequest-rawreply-loggeropts-fastifyserveroptions-fastifyinstance"},"here"))),(0,i.kt)("h3",{id:"using-generics"},"Using Generics"),(0,i.kt)("p",null,"The type system heavily relies on generic properties to provide the most accurate development experience. While some may find the overhead a bit cumbersome, the tradeoff is worth it! This example will dive into implementing generic types for route schemas and the dynamic properties located on the route-level ",(0,i.kt)("inlineCode",{parentName:"p"},"request")," object."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"If you did not complete the previous example, follow steps 1-4 to get set up.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Inside ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts"),", define two interfaces ",(0,i.kt)("inlineCode",{parentName:"p"},"IQuerystring")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"IHeaders"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface IQuerystring {\n  username: string;\n  password: string;\n}\n\ninterface IHeaders {\n  'h-Custom': string;\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Using the two interfaces, define a new API route and pass them as generics. The shorthand route methods (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},".get"),") accept a generic object ",(0,i.kt)("inlineCode",{parentName:"p"},"RouteGenericInterface")," containing five named properties: ",(0,i.kt)("inlineCode",{parentName:"p"},"Body"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Querystring"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Params"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Headers")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Reply"),". The interfaces ",(0,i.kt)("inlineCode",{parentName:"p"},"Body"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Querystring"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Params")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Headers")," will be passed down through the route method into the route method handler ",(0,i.kt)("inlineCode",{parentName:"p"},"request")," instance and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Reply")," interface to the ",(0,i.kt)("inlineCode",{parentName:"p"},"reply")," instance."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"server.get<{\n  Querystring: IQuerystring,\n  Headers: IHeaders\n}>('/auth', async (request, reply) => {\n  const { username, password } = request.query\n  const customerHeader = request.headers['h-Custom']\n  // do something with request data\n\n  return `logged in!`\n})\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Build and run the server code with ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run build")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run start"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Query the api"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl localhost:8080/auth?username=admin&password=Password123!\n")),(0,i.kt)("p",{parentName:"li"},"And it should return back ",(0,i.kt)("inlineCode",{parentName:"p"},"logged in!"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"But wait theres more! The generic interfaces are also available inside route level hook methods. Modify the previous route by adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"preValidation")," hook:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"server.get<{\n  Querystring: IQuerystring,\n  Headers: IHeaders\n}>('/auth', {\n  preValidation: (request, reply, done) => {\n    const { username, password } = request.query\n    done(username !== 'admin' ? new Error('Must be admin') : undefined) // only validate `admin` account\n  }\n}, async (request, reply) => {\n  const customerHeader = request.headers['h-Custom']\n  // do something with request data\n  return `logged in!`\n})\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Build and run and query with the ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," query string option set to anything other than ",(0,i.kt)("inlineCode",{parentName:"p"},"admin"),". The API should now return a HTTP 500 error ",(0,i.kt)("inlineCode",{parentName:"p"},'{"statusCode":500,"error":"Internal Server Error","message":"Must be admin"}')))),(0,i.kt)("p",null,"\ud83c\udf89 Good work, now you can define interfaces for each route and have strictly typed request and reply instances. Other parts of the Fastify type system rely on generic properties. Make sure to reference the detailed type system documentation below to learn more about what is available."),(0,i.kt)("h3",{id:"json-schema"},"JSON Schema"),(0,i.kt)("p",null,"To validate your requests and responses you can use JSON Schema files. If you didn't know already, defining schemas for your Fastify routes can increase their throughput! Check out the ",(0,i.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Validation-and-Serialization"},"Validation and Serialization")," documentation for more info."),(0,i.kt)("p",null,"Also it has the advantage to use the defined type within your handlers (including pre-validation, etc.)."),(0,i.kt)("p",null,"Here are some options how to achieve this."),(0,i.kt)("h4",{id:"typebox"},"typebox"),(0,i.kt)("p",null,"A useful library for building types and a schema at once is ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@sinclair/typebox"},"typebox"),".\nWith typebox you define your schema within your code and use them directly as types or schemas as you need them."),(0,i.kt)("p",null,"When you want to use it for validation of some payload in a fastify route you can do it as follows:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"typebox")," in your project."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @sinclair/typebox\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Define the schema you need with ",(0,i.kt)("inlineCode",{parentName:"p"},"Type")," and create the respective type  with ",(0,i.kt)("inlineCode",{parentName:"p"},"Static"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Static, Type } from '@sinclair/typebox'\n\nconst User = Type.Object({\n  name: Type.String(),\n  mail: Type.Optional(Type.String({ format: \"email\" })),\n});\ntype UserType = Static<typeof User>;\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use the defined type and schema during the definition of your route"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const app = fastify();\n\napp.post<{ Body: UserType; Reply: UserType }>(\n  "/",\n  {\n    schema: {\n      body: User,\n      response: {\n        200: User,\n      },\n    },\n  },\n  (req, rep) => {\n    const { body: user } = req;\n    /* user has type\n    * const user: StaticProperties<{\n    *  name: TString;\n    *  mail: TOptional<TString>;\n    * }>\n    */\n    //...\n    rep.status(200).send(user);\n  }\n);\n')))),(0,i.kt)("h4",{id:"schemas-in-json-files"},"Schemas in JSON Files"),(0,i.kt)("p",null,"In the last example we used interfaces to define the types for the request querystring and headers. Many users will already be using JSON Schemas to define these properties, and luckily there is a way to transform existing JSON Schemas into TypeScript interfaces!"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"If you did not complete the 'Getting Started' example, go back and follow steps 1-4 first.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install the ",(0,i.kt)("inlineCode",{parentName:"p"},"json-schema-to-typescript")," module:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -D json-schema-to-typescript\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a new folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"schemas")," and add two files ",(0,i.kt)("inlineCode",{parentName:"p"},"headers.json")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"querystring.json"),". Copy and paste the following schema definitions into the respective files:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "Headers Schema",\n  "type": "object",\n  "properties": {\n    "h-Custom": { "type": "string" }\n  },\n  "additionalProperties": false,\n  "required": ["h-Custom"]\n}\n')),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "Querystring Schema",\n  "type": "object",\n  "properties": {\n    "username": { "type": "string" },\n    "password": { "type": "string" }\n  },\n  "additionalProperties": false,\n  "required": ["username", "password"]\n}\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add a ",(0,i.kt)("inlineCode",{parentName:"p"},"compile-schemas")," script to the package.json:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'   {\n     "scripts": {\n       "compile-schemas": "json2ts -i schemas -o types"\n     }\n   }\n')),(0,i.kt)("p",null,"   ",(0,i.kt)("inlineCode",{parentName:"p"},"json2ts")," is a CLI utility included in ",(0,i.kt)("inlineCode",{parentName:"p"},"json-schema-to-typescript"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"schemas")," is the input path, and ",(0,i.kt)("inlineCode",{parentName:"p"},"types")," is the output path.\n5. Run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run compile-schemas"),". Two new files should have been created in the ",(0,i.kt)("inlineCode",{parentName:"p"},"types")," directory.\n6. Update ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts")," to have the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"   import fastify from 'fastify'\n\n   // import json schemas as normal\n   import QuerystringSchema from './schemas/querystring.json'\n   import HeadersSchema from './schemas/headers.json'\n\n   // import the generated interfaces\n   import { QuerystringSchema as QuerystringSchemaInterface } from './types/querystring'\n   import { HeadersSchema as HeadersSchemaInterface } from './types/headers'\n\n   const server = fastify()\n\n   server.get<{\n     Querystring: QuerystringSchemaInterface,\n     Headers: HeadersSchemaInterface\n   }>('/auth', {\n     schema: {\n       querystring: QuerystringSchema,\n       headers: HeadersSchema\n     },\n     preValidation: (request, reply, done) => {\n       const { username, password } = request.query\n       done(username !== 'admin' ? new Error('Must be admin') : undefined)\n     }\n     //  or if using async\n     //  preValidation: async (request, reply) => {\n     //    const { username, password } = request.query\n     //    return username !== \"admin\" ? new Error(\"Must be admin\") : undefined;\n     //  }\n   }, async (request, reply) => {\n     const customerHeader = request.headers['h-Custom']\n     // do something with request data\n     return `logged in!`\n   })\n\n   server.route<{\n     Querystring: QuerystringSchemaInterface,\n     Headers: HeadersSchemaInterface\n   }>({\n     method: 'GET',\n     url: '/auth2',\n     schema: {\n       querystring: QuerystringSchema,\n       headers: HeadersSchema\n     },\n     preHandler: (request, reply, done) => {\n       const { username, password } = request.query\n       const customerHeader = request.headers['h-Custom']\n       done()\n     },\n     handler: (request, reply) => {\n       const { username, password } = request.query\n       const customerHeader = request.headers['h-Custom']\n       reply.status(200).send({username});\n     }\n   })\n\n   server.listen(8080, (err, address) => {\n     if (err) {\n       console.error(err)\n       process.exit(0)\n     }\n     console.log(`Server listening at ${address}`)\n   })\n")),(0,i.kt)("p",null,"   Pay special attention to the imports at the top of this file. It might seem redundant, but you need to import both the schema files and the generated interfaces."),(0,i.kt)("p",null,"Great work! Now you can make use of both JSON Schemas and TypeScript definitions."),(0,i.kt)("h4",{id:"json-schema-to-ts"},"json-schema-to-ts"),(0,i.kt)("p",null,"If you do not want to generate types from your schemas, but want to use them diretly from your code, you can use the package\n",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/json-schema-to-ts"},"json-schema-to-ts"),"."),(0,i.kt)("p",null,"You can install it as dev-dependency."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -D json-schema-to-ts\n")),(0,i.kt)("p",null,"In your code you can define your schema like a normal object. But be aware of making it ",(0,i.kt)("em",{parentName:"p"},"const")," like explained in the docs of the module."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const todo = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    description: { type: 'string' },\n    done: { type: 'boolean' },\n  },\n  required: ['name'],\n} as const;\n")),(0,i.kt)("p",null,"With the provided type ",(0,i.kt)("inlineCode",{parentName:"p"},"FromSchema")," you can build a type from your schema and use it in your handler."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FromSchema } from \"json-schema-to-ts\";\nfastify.post<{ Body: FromSchema<typeof todo> }>(\n  '/todo',\n  {\n    schema: {\n      body: todo,\n      response: {\n        201: {\n          type: 'string',\n        },\n      },\n    }\n  },\n  async (request, reply): Promise<void> => {\n\n    /*\n    request.body has type\n    {\n      [x: string]: unknown;\n      description?: string;\n      done?: boolean;\n      name: string;\n    }\n    */\n\n    request.body.name // will not throw type error\n    request.body.notthere // will throw type error\n\n    reply.status(201).send();\n  },\n);\n")),(0,i.kt)("h3",{id:"plugins"},"Plugins"),(0,i.kt)("p",null,"One of Fastify's most distinguishable features is its extensive plugin ecosystem. Plugin types are fully supported, and take advantage of the ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"},"declaration merging")," pattern. This example is broken up into three parts: Creating a TypeScript Fastify Plugin, Creating Type Definitions for a Fastify Plugin, and Using a Fastify Plugin in a TypeScript Project."),(0,i.kt)("h4",{id:"creating-a-typescript-fastify-plugin"},"Creating a TypeScript Fastify Plugin"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize a new npm project and install required dependencies"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\nnpm i fastify fastify-plugin\nnpm i -D typescript @types/node\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add a ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," script to the ",(0,i.kt)("inlineCode",{parentName:"p"},'"scripts"')," section and ",(0,i.kt)("inlineCode",{parentName:"p"},"'index.d.ts'")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},'"types"')," section of the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "types": "index.d.ts",\n  "scripts": {\n    "build": "tsc -p tsconfig.json"\n  }\n}\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize a TypeScript configuration file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx typescript --init\n")),(0,i.kt)("p",{parentName:"li"},"Once the file is generated, enable the ",(0,i.kt)("inlineCode",{parentName:"p"},'"declaration"')," option in the ",(0,i.kt)("inlineCode",{parentName:"p"},'"compilerOptions"')," object."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compileOptions": {\n    "declaration": true\n  }\n}\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create an ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts")," file - this will contain the plugin code")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the following code to ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FastifyPluginCallback, FastifyPluginAsync } from 'fastify'\nimport fp from 'fastify-plugin'\n\n// using declaration merging, add your plugin props to the appropriate fastify interfaces\ndeclare module 'fastify' {\n  interface FastifyRequest {\n    myPluginProp: string\n  }\n  interface FastifyReply {\n    myPluginProp: number\n  }\n}\n\n// define options\nexport interface MyPluginOptions {\n  myPluginOption: string\n}\n\n// define plugin using callbacks\nconst myPluginCallback: FastifyPluginCallback<MyPluginOptions> = (fastify, options, done) => {\n  fastify.decorateRequest('myPluginProp', 'super_secret_value')\n  fastify.decorateReply('myPluginProp', options.myPluginOption)\n\n  done()\n}\n\n// define plugin using promises\nconst myPluginAsync: FastifyPluginAsync<MyPluginOptions> = async (fastify, options) => {\n  fastify.decorateRequest('myPluginProp', 'super_secret_value')\n  fastify.decorateReply('myPluginProp', options.myPluginOption)\n}\n\n// export plugin using fastify-plugin\nexport default fp(myPluginCallback, '3.x')\n// or\n// export default fp(myPluginAsync, '3.x')\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run build")," to compile the plugin code and produce both a JavaScript source file and a type definition file.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"With the plugin now complete you can ","[publish to npm]"," or use it locally."),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"You do not ",(0,i.kt)("em",{parentName:"p"},"need")," to publish your plugin to npm to use it. You can include it in a Fastify project and reference it as you would any piece of code! As a TypeScript user, make sure the declaration override exists somewhere that will be included in your project compilation so the TypeScript interpreter can process it.")))),(0,i.kt)("h4",{id:"creating-type-definitions-for-a-fastify-plugin"},"Creating Type Definitions for a Fastify Plugin"),(0,i.kt)("p",null,"This plugin guide is for Fastify plugins written in JavaScript. The steps outlined in this example are for adding TypeScript support for users consuming your plugin."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize a new npm project and install required dependencies"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\nnpm i fastify-plugin\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create two files ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"index.d.ts"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Modify the package json to include these files under the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"types")," properties (the name does not have to be ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," explicitly, but it is recommended the files have the same name):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "main": "index.js",\n  "types": "index.d.ts"\n}\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," and add the following code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// fastify-plugin is highly recommended for any plugin you write\nconst fp = require('fastify-plugin')\n\nfunction myPlugin (instance, options, done) {\n\n  // decorate the fastify instance with a custom function called myPluginFunc\n  instance.decorate('myPluginFunc', (input) => {\n    return input.toUpperCase()\n  })\n\n  done()\n}\n\nmodule.exports = fp(myPlugin, {\n  fastify: '3.x',\n  name: 'my-plugin' // this is used by fastify-plugin to derive the property name\n})\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"index.d.ts")," and add the following code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FastifyPlugin } from 'fastify'\n\ninterface PluginOptions {\n  //...\n}\n\n// Optionally, you can add any additional exports.\n// Here we are exporting the decorator we added.\nexport interface myPluginFunc {\n  (input: string): string\n}\n\n// Most importantly, use declaration merging to add the custom property to the Fastify type system\ndeclare module 'fastify' {\n  interface FastifyInstance {\n    myPluginFunc: myPluginFunc\n  }\n}\n\n// fastify-plugin automatically adds named export, so be sure to add also this type\n// the variable name is derived from `options.name` property if `module.exports.myPlugin` is missing\nexport const myPlugin: FastifyPlugin<PluginOptions>\n\n// fastify-plugin automatically adds `.default` property to the exported plugin. See the note below\nexport default myPlugin\n")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-plugin"},"fastify-plugin")," v2.3.0 and newer, automatically adds ",(0,i.kt)("inlineCode",{parentName:"p"},".default")," property and a named export to the exported plugin. Be sure to ",(0,i.kt)("inlineCode",{parentName:"p"},"export default")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"export const myPlugin")," in your typings to provide the best developer experience. For a complete example you can check out ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-swagger/blob/master/index.d.ts"},"fastify-swagger"),"."),(0,i.kt)("p",null,"With those files completed, the plugin is now ready to be consumed by any TypeScript project!"),(0,i.kt)("p",null,"The Fastify plugin system enables developers to decorate the Fastify instance, and the request/reply instances. For more information check out this blog post on ",(0,i.kt)("a",{parentName:"p",href:"https://dev.to/ethanarrowood/is-declaration-merging-and-generic-inheritance-at-the-same-time-impossible-53cp"},"Declaration Merging and Generic Inheritance"),"."),(0,i.kt)("h4",{id:"using-a-plugin"},"Using a Plugin"),(0,i.kt)("p",null,"Using a Fastify plugin in TypeScript is just as easy as using one in JavaScript. Import the plugin with ",(0,i.kt)("inlineCode",{parentName:"p"},"import/from")," and you're all set -- except there is one exception users should be aware of."),(0,i.kt)("p",null,"Fastify plugins use declaration merging to modify existing Fastify type interfaces (check out the previous two examples for more details). Declaration merging is not very ",(0,i.kt)("em",{parentName:"p"},"smart"),", meaning if the plugin type definition for a plugin is within the scope of the TypeScript interpreter, then the plugin types will be included ",(0,i.kt)("strong",{parentName:"p"},"regardless")," of if the plugin is being used or not. This is an unfortunate limitation of using TypeScript and is unavoidable as of right now."),(0,i.kt)("p",null,"However, there are a couple of suggestions to help improve this experience:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Make sure the ",(0,i.kt)("inlineCode",{parentName:"li"},"no-unused-vars")," rule is enabled in ",(0,i.kt)("a",{parentName:"li",href:"https://eslint.org/docs/rules/no-unused-vars"},"ESLint")," and any imported plugin are actually being loaded."),(0,i.kt)("li",{parentName:"ul"},"Use a module such as ",(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/depcheck"},"depcheck")," or ",(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/npm-check"},"npm-check")," to verify plugin dependencies are being used somewhere in your project.")),(0,i.kt)("h2",{id:"code-completion-in-vanilla-javascript"},"Code Completion In Vanilla JavaScript"),(0,i.kt)("p",null,"Vanilla JavaScript can use the published types to provide code completion (e.g. ",(0,i.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/intellisense"},"Intellisense"),") by following the ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html"},"TypeScript JSDoc Reference"),"."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**  @type {import('fastify').FastifyPluginAsync<{ optionA: boolean, optionB: string }>} */\nmodule.exports = async function (fastify, { optionA, optionB }) {\n  fastify.get('/look', () => 'at me');\n}\n")),(0,i.kt)("h2",{id:"api-type-system-documentation"},"API Type System Documentation"),(0,i.kt)("p",null,"This section is a detailed account of all the types available to you in Fastify version 3.x"),(0,i.kt)("p",null,"All ",(0,i.kt)("inlineCode",{parentName:"p"},"http"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"https"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"http2")," types are inferred from ",(0,i.kt)("inlineCode",{parentName:"p"},"@types/node")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#generics"},"Generics")," are documented by their default value as well as their constraint value(s). Read these articles for more information on TypeScript generics."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-3.html#generic-parameter-defaults"},"Generic Parameter Default")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/generics.html#generic-constraints"},"Generic Constraints"))),(0,i.kt)("h4",{id:"how-to-import"},"How to import"),(0,i.kt)("p",null,"The Fastify API is powered by the ",(0,i.kt)("inlineCode",{parentName:"p"},"fastify()")," method. In JavaScript you would import it using ",(0,i.kt)("inlineCode",{parentName:"p"},"const fastify = require('fastify')"),". In TypeScript it is recommended to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"import/from")," syntax instead so types can be resolved. There are a couple supported import methods with the Fastify type system."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"import fastify from 'fastify'")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Types are resolved but not accessible using dot notation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import fastify from 'fastify'\n\nconst f = fastify()\nf.listen(8080, () => { console.log('running') })\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Gain access to types with destructuring:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import fastify, { FastifyInstance } from 'fastify'\n\nconst f: FastifyInstance = fastify()\nf.listen(8080, () => { console.log('running') })\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Destructuring also works for the main API method:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { fastify, FastifyInstance } from 'fastify'\n\nconst f: FastifyInstance = fastify()\nf.listen(8080, () => { console.log('running') })\n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"import * as Fastify from 'fastify'")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Types are resolved and accessible using dot notation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Calling the main Fastify API method requires a slightly different syntax (see example)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import * as Fastify from 'fastify'\n\nconst f: Fastify.FastifyInstance = Fastify.fastify()\nf.listen(8080, () => { console.log('running') })\n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"const fastify = require('fastify')")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This syntax is valid and will import fastify as expected; however, types will ",(0,i.kt)("strong",{parentName:"p"},"not")," be resolved")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const fastify = require('fastify')\n\nconst f = fastify()\nf.listen(8080, () => { console.log('running') })\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Destructuring is supported and will resolve types properly"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const { fastify } = require('fastify')\n\nconst f = fastify()\nf.listen(8080, () => { console.log('running') })\n")))))),(0,i.kt)("h4",{id:"generics"},"Generics"),(0,i.kt)("p",null,"Many type definitions share the same generic parameters; they are all documented, in detail, within this section."),(0,i.kt)("p",null,"Most definitions depend on ",(0,i.kt)("inlineCode",{parentName:"p"},"@node/types")," modules ",(0,i.kt)("inlineCode",{parentName:"p"},"http"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"https"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"http2")),(0,i.kt)("h5",{id:"rawserver"},"RawServer"),(0,i.kt)("p",null,"Underlying Node.js server type"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("inlineCode",{parentName:"p"},"http.Server")),(0,i.kt)("p",null,"Constraints: ",(0,i.kt)("inlineCode",{parentName:"p"},"http.Server"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"https.Server"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"http2.Http2Server"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"http2.Http2SecureServer")),(0,i.kt)("p",null,"Enforces generic parameters: ",(0,i.kt)("a",{parentName:"p",href:"#rawrequest"},(0,i.kt)("inlineCode",{parentName:"a"},"RawRequest")),", ",(0,i.kt)("a",{parentName:"p",href:"#rawreply"},(0,i.kt)("inlineCode",{parentName:"a"},"RawReply"))),(0,i.kt)("h5",{id:"rawrequest"},"RawRequest"),(0,i.kt)("p",null,"Underlying Node.js request type"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("a",{parentName:"p",href:"#fastifyrawrequestdefaultexpressionrawserver"},(0,i.kt)("inlineCode",{parentName:"a"},"RawRequestDefaultExpression"))),(0,i.kt)("p",null,"Constraints: ",(0,i.kt)("inlineCode",{parentName:"p"},"http.IncomingMessage"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"http2.Http2ServerRequest")),(0,i.kt)("p",null,"Enforced by: ",(0,i.kt)("a",{parentName:"p",href:"#rawserver"},(0,i.kt)("inlineCode",{parentName:"a"},"RawServer"))),(0,i.kt)("h5",{id:"rawreply"},"RawReply"),(0,i.kt)("p",null,"Underlying Node.js response type"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("a",{parentName:"p",href:"#fastifyrawreplydefaultexpression"},(0,i.kt)("inlineCode",{parentName:"a"},"RawReplyDefaultExpression"))),(0,i.kt)("p",null,"Constraints: ",(0,i.kt)("inlineCode",{parentName:"p"},"http.ServerResponse"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"http2.Http2ServerResponse")),(0,i.kt)("p",null,"Enforced by: ",(0,i.kt)("a",{parentName:"p",href:"#rawserver"},(0,i.kt)("inlineCode",{parentName:"a"},"RawServer"))),(0,i.kt)("h5",{id:"logger"},"Logger"),(0,i.kt)("p",null,"Fastify logging utility"),(0,i.kt)("p",null,"Default: ",(0,i.kt)("a",{parentName:"p",href:"#fastifyfastifyloggeroptions"},(0,i.kt)("inlineCode",{parentName:"a"},"FastifyLoggerOptions"))),(0,i.kt)("p",null,"Enforced by: ",(0,i.kt)("a",{parentName:"p",href:"#rawserver"},(0,i.kt)("inlineCode",{parentName:"a"},"RawServer"))),(0,i.kt)("h5",{id:"rawbody"},"RawBody"),(0,i.kt)("p",null,"A generic parameter for the content-type-parser methods."),(0,i.kt)("p",null,"Constraints: ",(0,i.kt)("inlineCode",{parentName:"p"},"string | Buffer")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"fastify"},"Fastify"),(0,i.kt)("h5",{id:"fastifyrawserver-rawrequest-rawreply-loggeropts-fastifyserveroptions-fastifyinstance"},"fastify<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#logger"},"Logger"),">(opts?: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyserveroptions-rawserver-logger"},"FastifyServerOptions"),"): ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyinstance"},"FastifyInstance")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/fastify.d.ts#L19"},"src")),(0,i.kt)("p",null,"The main Fastify API method. By default creates an HTTP server. Utilizing discriminant unions and overload methods, the type system will automatically infer which type of server (http, https, or http2) is being created purely based on the options based to the method (see the examples below for more information). It also supports an extensive generic type system to allow the user to extend the underlying Node.js Server, Request, and Reply objects. Additionally, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Logger")," generic exists for custom log types. See the examples and generic breakdown below for more information."),(0,i.kt)("h6",{id:"example-1-standard-http-server"},"Example 1: Standard HTTP server"),(0,i.kt)("p",null,"No need to specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"Server")," generic as the type system defaults to HTTP."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import fastify from 'fastify'\n\nconst server = fastify()\n")),(0,i.kt)("p",null,"Check out the Learn By Example - ",(0,i.kt)("a",{parentName:"p",href:"#getting-started"},"Getting Started")," example for a more detailed http server walkthrough."),(0,i.kt)("h6",{id:"example-2-https-sever"},"Example 2: HTTPS sever"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create the following imports from ",(0,i.kt)("inlineCode",{parentName:"p"},"@types/node")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"fastify")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import fs from 'fs'\nimport path from 'path'\nimport fastify from 'fastify'\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Follow the steps in this official ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/en/knowledge/HTTP/servers/how-to-create-a-HTTPS-server/"},"Node.js https server guide")," to create the ",(0,i.kt)("inlineCode",{parentName:"p"},"key.pem")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cert.pem")," files")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Instantiate a Fastify https server and add a route:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const server = fastify({\n  https: {\n    key: fs.readFileSync(path.join(__dirname, 'key.pem')),\n    cert: fs.readFileSync(path.join(__dirname, 'cert.pem'))\n  }\n})\n\nserver.get('/', async function (request, reply) {\n  return { hello: 'world' }\n})\n\nserver.listen(8080, (err, address) => {\n  if (err) {\n    console.error(err)\n    process.exit(0)\n  }\n  console.log(`Server listening at ${address}`)\n})\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Build and run! Test your server out by querying with: ",(0,i.kt)("inlineCode",{parentName:"p"},"curl -k https://localhost:8080")))),(0,i.kt)("h6",{id:"example-3-http2-server"},"Example 3: HTTP2 server"),(0,i.kt)("p",null,"There are two types of HTTP2 server types, insecure and secure. Both require specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"http2")," property as ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," object. The ",(0,i.kt)("inlineCode",{parentName:"p"},"https")," property is used for creating a secure http2 server; omitting the ",(0,i.kt)("inlineCode",{parentName:"p"},"https")," property will create an insecure http2 server."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const insecureServer = fastify({ http2: true })\nconst secureServer = fastify({\n  http2: true,\n  https: {} // use the `key.pem` and `cert.pem` files from the https section\n})\n")),(0,i.kt)("p",null,"For more details on using HTTP2 check out the Fastify ",(0,i.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/HTTP2"},"HTTP2")," documentation page."),(0,i.kt)("h6",{id:"example-4-extended-http-server"},"Example 4: Extended HTTP server"),(0,i.kt)("p",null,"Not only can you specify the server type, but also the request and reply types. Thus, allowing you to specify special properties, methods, and more! When specified at server instantiation, the custom type becomes available on all further instances of the custom type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import fastify from 'fastify'\nimport http from 'http'\n\ninterface customRequest extends http.IncomingMessage {\n  mySpecialProp: string\n}\n\nconst server = fastify<http.Server, customRequest>()\n\nserver.get('/', async (request, reply) => {\n  const someValue = request.raw.mySpecialProp // TS knows this is a string, because of the `customRequest` interface\n  return someValue.toUpperCase()\n})\n")),(0,i.kt)("h6",{id:"example-5-specifying-logger-types"},"Example 5: Specifying logger types"),(0,i.kt)("p",null,"Fastify uses ",(0,i.kt)("a",{parentName:"p",href:"https://getpino.io/#/"},"Pino")," logging library under the hood. Some of it's properties can be configured via ",(0,i.kt)("inlineCode",{parentName:"p"},"logger")," field when constructing Fastify's instance. If properties you need aren't exposed, it's also possible to pass a preconfigured external instance of Pino (or any other compatible logger) to Fastify via the same field. This allows creating custom serializers as well, see the ",(0,i.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Logging"},"Logging")," documentation for more info."),(0,i.kt)("p",null,"To use an external instance of Pino, add ",(0,i.kt)("inlineCode",{parentName:"p"},"@types/pino")," to devDependencies and pass the instance to ",(0,i.kt)("inlineCode",{parentName:"p"},"logger")," field:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import fastify from 'fastify'\nimport pino from 'pino'\n\nconst server = fastify({\n  logger: pino({\n    level: 'info',\n    redact: ['x-userinfo'],\n    messageKey: 'message'\n  })\n})\n\nserver.get('/', async (request, reply) => {\n  server.log.info('log message')\n  return 'another message'\n})\n")),(0,i.kt)("hr",null),(0,i.kt)("h5",{id:"fastifyhttpmethods"},"fastify.HTTPMethods"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/utils.d.ts#L8"},"src")),(0,i.kt)("p",null,"Union type of: ",(0,i.kt)("inlineCode",{parentName:"p"},"'DELETE' | 'GET' | 'HEAD' | 'PATCH' | 'POST' | 'PUT' | 'OPTIONS'")),(0,i.kt)("h5",{id:"fastifyrawserverbase"},"fastify.RawServerBase"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/utils.d.ts#L13"},"src")),(0,i.kt)("p",null,"Dependant on ",(0,i.kt)("inlineCode",{parentName:"p"},"@types/node")," modules ",(0,i.kt)("inlineCode",{parentName:"p"},"http"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"https"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"http2")),(0,i.kt)("p",null,"Union type of: ",(0,i.kt)("inlineCode",{parentName:"p"},"http.Server | https.Server | http2.Http2Server | http2.Http2SecureServer")),(0,i.kt)("h5",{id:"fastifyrawserverdefault"},"fastify.RawServerDefault"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/utils.d.ts#L18"},"src")),(0,i.kt)("p",null,"Dependant on ",(0,i.kt)("inlineCode",{parentName:"p"},"@types/node")," modules ",(0,i.kt)("inlineCode",{parentName:"p"},"http")),(0,i.kt)("p",null,"Type alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"http.Server")),(0,i.kt)("hr",null),(0,i.kt)("h5",{id:"fastifyfastifyserveroptionsrawserver-logger"},"fastify.FastifyServerOptions<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#logger"},"Logger"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/fastify.d.ts#L29"},"src")),(0,i.kt)("p",null,"An interface of properties used in the instantiation of the Fastify server. Is used in the main ",(0,i.kt)("a",{parentName:"p",href:"#fastifyrawserver-rawrequest-rawreply-loggeropts-fastifyserveroptions-fastifyinstance"},(0,i.kt)("inlineCode",{parentName:"a"},"fastify()"))," method. The ",(0,i.kt)("inlineCode",{parentName:"p"},"RawServer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Logger")," generic parameters are passed down through that method."),(0,i.kt)("p",null,"See the main ",(0,i.kt)("a",{parentName:"p",href:"#fastifyrawserver-rawrequest-rawreply-loggeropts-fastifyserveroptions-fastifyinstance"},"fastify")," method type definition section for examples on instantiating a Fastify server with TypeScript."),(0,i.kt)("h5",{id:"fastifyfastifyinstancerawserver-rawrequest-requestgeneric-logger"},"fastify.FastifyInstance<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#logger"},"Logger"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/instance.d.ts#L16"},"src")),(0,i.kt)("p",null,"Interface that represents the Fastify server object. This is the returned server instance from the ",(0,i.kt)("a",{parentName:"p",href:"#fastifyrawserver-rawrequest-rawreply-loggeropts-fastifyserveroptions-fastifyinstance"},(0,i.kt)("inlineCode",{parentName:"a"},"fastify()"))," method. This type is an interface so it can be extended via ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"},"declaration merging")," if your code makes use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"decorate")," method."),(0,i.kt)("p",null,"Through the use of generic cascading, all methods attached to the instance inherit the generic properties from instantiation. This means that by specifying the server, request, or reply types, all methods will know how to type those objects."),(0,i.kt)("p",null,"Check out the main ",(0,i.kt)("a",{parentName:"p",href:"#learn-by-example"},"Learn by Example")," section for detailed guides, or the more simplified ",(0,i.kt)("a",{parentName:"p",href:"#fastifyrawserver-rawrequest-rawreply-loggeropts-fastifyserveroptions-fastifyinstance"},"fastify")," method examples for additional details on this interface."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"request"},"Request"),(0,i.kt)("h5",{id:"fastifyfastifyrequestrequestgeneric-rawserver-rawrequest"},"fastify.FastifyRequest<",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/request.d.ts#L15"},"src")),(0,i.kt)("p",null,"This interface contains properties of Fastify request object. The properties added here disregard what kind of request object (http vs http2) and disregard what route level it is serving; thus calling ",(0,i.kt)("inlineCode",{parentName:"p"},"request.body")," inside a GET request will not throw an error (but good luck sending a GET request with a body \ud83d\ude09)."),(0,i.kt)("p",null,"If you need to add custom properties to the ",(0,i.kt)("inlineCode",{parentName:"p"},"FastifyRequest")," object (such as when using the ","[",(0,i.kt)("inlineCode",{parentName:"p"},"decorateRequest"),"][DecorateRequest]"," method) you need to use declaration merging on this interface."),(0,i.kt)("p",null,"A basic example is provided in the ",(0,i.kt)("a",{parentName:"p",href:"#fastifyfastifyrequestrawserver-rawrequest-requestgeneric"},(0,i.kt)("inlineCode",{parentName:"a"},"FastifyRequest"))," section. For a more detailed example check out the Learn By Example section: ",(0,i.kt)("a",{parentName:"p",href:"#plugins"},"Plugins")),(0,i.kt)("h6",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import fastify from 'fastify'\n\nconst server = fastify()\n\nserver.decorateRequest('someProp', 'hello!')\n\nserver.get('/', async (request, reply) => {\n  const { someProp } = request // need to use declaration merging to add this prop to the request interface\n  return someProp\n})\n\n// this declaration must be in scope of the typescript interpreter to work\ndeclare module 'fastify' {\n  interface FastifyRequest { // you must reference the interface and not the type\n    someProp: string\n  }\n}\n\n// Or you can type your request using\ntype CustomRequest = FastifyRequest<{\n  Body: { test: boolean };\n}>\n\nserver.get('/typedRequest', async (request: CustomRequest, reply: FastifyReply) => {\n  return request.body.test\n})\n")),(0,i.kt)("h5",{id:"fastifyrequestgenericinterface"},"fastify.RequestGenericInterface"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/request.d.ts#L4"},"src")),(0,i.kt)("p",null,"Fastify request objects have four dynamic properties: ",(0,i.kt)("inlineCode",{parentName:"p"},"body"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"params"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"query"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"headers"),". Their respective types are assignable through this interface. It is a named property interface enabling the developer to ignore the properties they do not want to specify. All omitted properties are defaulted to ",(0,i.kt)("inlineCode",{parentName:"p"},"unknown"),". The corresponding property names are: ",(0,i.kt)("inlineCode",{parentName:"p"},"Body"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Querystring"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Params"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Headers"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import fastify, { RequestGenericInterface } from 'fastify'\n\nconst server = fastify()\n\ninterface requestGeneric extends RequestGenericInterface {\n  Querystring: {\n    name: string\n  }\n}\n\nserver.get<requestGeneric>('/', async (request, reply) => {\n  const { name } = request.query // the name prop now exists on the query prop\n  return name.toUpperCase()\n})\n")),(0,i.kt)("p",null,"If you want to see a detailed example of using this interface check out the Learn by Example section: ",(0,i.kt)("a",{parentName:"p",href:"#jsonschema"},"JSON Schema"),"."),(0,i.kt)("h5",{id:"fastifyrawrequestdefaultexpressionrawserver"},"fastify.RawRequestDefaultExpression\\<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/utils.d.ts#L23"},"src")),(0,i.kt)("p",null,"Dependant on ",(0,i.kt)("inlineCode",{parentName:"p"},"@types/node")," modules ",(0,i.kt)("inlineCode",{parentName:"p"},"http"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"https"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"http2")),(0,i.kt)("p",null,"Generic parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"RawServer")," defaults to ",(0,i.kt)("a",{parentName:"p",href:"#fastifyrawserverdefault"},(0,i.kt)("inlineCode",{parentName:"a"},"RawServerDefault"))),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"RawServer")," is of type ",(0,i.kt)("inlineCode",{parentName:"p"},"http.Server")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"https.Server"),", then this expression returns ",(0,i.kt)("inlineCode",{parentName:"p"},"http.IncomingMessage"),", otherwise, it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"http2.Http2ServerRequest"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import http from 'http'\nimport http2 from 'http2'\nimport { RawRequestDefaultExpression } from 'fastify'\n\nRawRequestDefaultExpression<http.Server> // -> http.IncomingMessage\nRawRequestDefaultExpression<http2.Http2Server> // -> http2.Http2ServerRequest\n")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"reply"},"Reply"),(0,i.kt)("h5",{id:"fastifyfastifyreplyrawserver-rawrequest-rawreply-requestgeneric-contextconfig"},"fastify.FastifyReply<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/reply.d.ts#L32"},"src")),(0,i.kt)("p",null,"This interface contains the custom properties that Fastify adds to the standard Node.js reply object. The properties added here disregard what kind of reply object (http vs http2)."),(0,i.kt)("p",null,"If you need to add custom properties to the FastifyReply object (such as when using the ",(0,i.kt)("inlineCode",{parentName:"p"},"decorateReply")," method) you need to use declaration merging on this interface."),(0,i.kt)("p",null,"A basic example is provided in the ",(0,i.kt)("a",{parentName:"p",href:"#fastifyfastifyreplyrawserver-rawreply-contextconfig"},(0,i.kt)("inlineCode",{parentName:"a"},"FastifyReply"))," section. For a more detailed example check out the Learn By Example section: ",(0,i.kt)("a",{parentName:"p",href:"#plugins"},"Plugins")),(0,i.kt)("h6",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import fastify from 'fastify'\n\nconst server = fastify()\n\nserver.decorateReply('someProp', 'world')\n\nserver.get('/', async (request, reply) => {\n  const { someProp } = reply // need to use declaration merging to add this prop to the reply interface\n  return someProp\n})\n\n// this declaration must be in scope of the typescript interpreter to work\ndeclare module 'fastify' {\n  interface FastifyReply { // you must reference the interface and not the type\n    someProp: string\n  }\n}\n")),(0,i.kt)("h5",{id:"fastifyrawreplydefaultexpressionrawserver"},"fastify.RawReplyDefaultExpression<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/utils.d.ts#L27"},"src")),(0,i.kt)("p",null,"Dependant on ",(0,i.kt)("inlineCode",{parentName:"p"},"@types/node")," modules ",(0,i.kt)("inlineCode",{parentName:"p"},"http"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"https"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"http2")),(0,i.kt)("p",null,"Generic parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"RawServer")," defaults to ",(0,i.kt)("a",{parentName:"p",href:"#fastifyrawserverdefault"},(0,i.kt)("inlineCode",{parentName:"a"},"RawServerDefault"))),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"RawServer")," is of type ",(0,i.kt)("inlineCode",{parentName:"p"},"http.Server")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"https.Server"),", then this expression returns ",(0,i.kt)("inlineCode",{parentName:"p"},"http.ServerResponse"),", otherwise, it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"http2.Http2ServerResponse"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import http from 'http'\nimport http2 from 'http2'\nimport { RawReplyDefaultExpression } from 'fastify'\n\nRawReplyDefaultExpression<http.Server> // -> http.ServerResponse\nRawReplyDefaultExpression<http2.Http2Server> // -> http2.Http2ServerResponse\n")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"plugin"},"Plugin"),(0,i.kt)("p",null,"Fastify allows the user to extend its functionalities with plugins. A plugin can be a set of routes, a server decorator or whatever. To activate plugins, use the ",(0,i.kt)("a",{parentName:"p",href:"#fastifyfastifyregisterrawserver-rawrequest-requestgenericplugin-fastifyplugin-opts-fastifyregisteroptions"},(0,i.kt)("inlineCode",{parentName:"a"},"fastify.register()"))," method."),(0,i.kt)("p",null,"When creating plugins for Fastify, it is recommended to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"fastify-plugin")," module. Additionally, there is a guide to creating plugins with TypeScript and Fastify available in the Learn by Example, ",(0,i.kt)("a",{parentName:"p",href:"#plugins"},"Plugins")," section."),(0,i.kt)("h5",{id:"fastifyfastifyplugincallbackoptions"},"fastify.FastifyPluginCallback<",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifypluginoptions"},"Options"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/plugin.d.ts#L9"},"src")),(0,i.kt)("p",null,"Interface method definition used within the ",(0,i.kt)("a",{parentName:"p",href:"#fastifyfastifyregisterrawserver-rawrequest-requestgenericplugin-fastifyplugin-opts-fastifyregisteroptions"},(0,i.kt)("inlineCode",{parentName:"a"},"fastify.register()"))," method."),(0,i.kt)("h5",{id:"fastifyfastifypluginasyncoptions"},"fastify.FastifyPluginAsync<",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifypluginoptions"},"Options"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/plugin.d.ts#L20"},"src")),(0,i.kt)("p",null,"Interface method definition used within the ",(0,i.kt)("a",{parentName:"p",href:"#fastifyfastifyregisterrawserver-rawrequest-requestgenericplugin-fastifyplugin-opts-fastifyregisteroptions"},(0,i.kt)("inlineCode",{parentName:"a"},"fastify.register()"))," method."),(0,i.kt)("h5",{id:"fastifyfastifypluginoptions"},"fastify.FastifyPlugin<",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifypluginoptions"},"Options"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/plugin.d.ts#L29"},"src")),(0,i.kt)("p",null,"Interface method definition used within the ",(0,i.kt)("a",{parentName:"p",href:"#fastifyfastifyregisterrawserver-rawrequest-requestgenericplugin-fastifyplugin-opts-fastifyregisteroptions"},(0,i.kt)("inlineCode",{parentName:"a"},"fastify.register()"))," method.\nDocument deprecated in favor of ",(0,i.kt)("inlineCode",{parentName:"p"},"FastifyPluginCallback")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"FastifyPluginAsync")," since general\n",(0,i.kt)("inlineCode",{parentName:"p"},"FastifyPlugin")," doesn't properly infer types for async functions."),(0,i.kt)("h5",{id:"fastifyfastifypluginoptions-1"},"fastify.FastifyPluginOptions"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/plugin.d.ts#L31"},"src")),(0,i.kt)("p",null,"A loosely typed object used to constrain the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," parameter of ",(0,i.kt)("a",{parentName:"p",href:"#fastifyfastifyregisterrawserver-rawrequest-requestgenericplugin-fastifyplugin-opts-fastifyregisteroptions"},(0,i.kt)("inlineCode",{parentName:"a"},"fastify.register()"))," to an object. When creating a plugin, define its options as an extension of this interface (",(0,i.kt)("inlineCode",{parentName:"p"},"interface MyPluginOptions extends FastifyPluginOptions"),") so they can be passed to the register method."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"register"},"Register"),(0,i.kt)("h5",{id:"fastifyfastifyregisterplugin-fastifyplugincallback-opts-fastifyregisteroptions"},"fastify.FastifyRegister(plugin: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyplugincallbackoptions"},"FastifyPluginCallback"),", opts: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifytregisteroptions"},"FastifyRegisterOptions"),")"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/register.d.ts#L9"},"src")),(0,i.kt)("h5",{id:"fastifyfastifyregisterplugin-fastifypluginasync-opts-fastifyregisteroptions"},"fastify.FastifyRegister(plugin: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifypluginasyncoptions"},"FastifyPluginAsync"),", opts: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifytregisteroptions"},"FastifyRegisterOptions"),")"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/register.d.ts#L9"},"src")),(0,i.kt)("h5",{id:"fastifyfastifyregisterplugin-fastifyplugin-opts-fastifyregisteroptions"},"fastify.FastifyRegister(plugin: ",(0,i.kt)("a",{parentName:"h5",href:"##fastifyfastifypluginoptions-rawserver-rawrequest-requestgeneric"},"FastifyPlugin"),", opts: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifytregisteroptions"},"FastifyRegisterOptions"),")"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/register.d.ts#L9"},"src")),(0,i.kt)("p",null,"This type interface specifies the type for the ",(0,i.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Server#register"},(0,i.kt)("inlineCode",{parentName:"a"},"fastify.register()"))," method. The type interface returns a function signature with an underlying generic ",(0,i.kt)("inlineCode",{parentName:"p"},"Options")," which is defaulted to ",(0,i.kt)("a",{parentName:"p",href:"#fastifyfastifypluginoptions"},"FastifyPluginOptions"),". It infers this generic from the FastifyPlugin parameter when calling this function so there is no need to specify the underlying generic. The options parameter is the intersection of the plugin's options and two additional optional properties: ",(0,i.kt)("inlineCode",{parentName:"p"},"prefix: string")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"logLevel"),": ",(0,i.kt)("a",{parentName:"p",href:"#fastifyloglevel"},"LogLevel"),"."),(0,i.kt)("p",null,"Below is an example of the options inference in action:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const server = fastify()\n\nconst plugin: FastifyPlugin<{\n  option1: string;\n  option2: boolean;\n}> = function (instance, opts, done) { }\n\nfastify().register(plugin, {}) // Error - options object is missing required properties\nfastify().register(plugin, { option1: '', option2: true }) // OK - options object contains required properties\n")),(0,i.kt)("p",null,"See the Learn By Example, ",(0,i.kt)("a",{parentName:"p",href:"#plugins"},"Plugins")," section for more detailed examples of creating TypeScript plugins in Fastify."),(0,i.kt)("h5",{id:"fastifyfastifyregisteroptions"},"fastify.FastifyRegisterOptions"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/register.d.ts#L16"},"src")),(0,i.kt)("p",null,"This type is the intersection of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Options")," generic and a non-exported interface ",(0,i.kt)("inlineCode",{parentName:"p"},"RegisterOptions")," that specifies two optional properties: ",(0,i.kt)("inlineCode",{parentName:"p"},"prefix: string")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"logLevel"),": ",(0,i.kt)("a",{parentName:"p",href:"#fastifyloglevel"},"LogLevel"),". This type can also be specified as a function that returns the previously described intersection."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"logger-1"},"Logger"),(0,i.kt)("p",null,"Check out the ",(0,i.kt)("a",{parentName:"p",href:"#example-5-specifying-logger-types"},"Specifying Logger Types")," example for more details on specifying a custom logger."),(0,i.kt)("h5",{id:"fastifyfastifyloggeroptionsrawserver-rawrequest-rawreply"},"fastify.FastifyLoggerOptions<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/logger.d.ts#L17"},"src")),(0,i.kt)("p",null,"An interface definition for the internal Fastify logger. It is emulative of the ",(0,i.kt)("a",{parentName:"p",href:"https://getpino.io/#/"},"Pino.js")," logger. When enabled through server options, use it following the general ",(0,i.kt)("a",{parentName:"p",href:"/website-next/docs/v3/Reference/Logging"},"logger")," documentation."),(0,i.kt)("h5",{id:"fastifyfastifylogfn"},"fastify.FastifyLogFn"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/logger.d.ts#L7"},"src")),(0,i.kt)("p",null,"An overload function interface that implements the two ways Fastify calls log methods. This interface is passed to all associated log level properties on the FastifyLoggerOptions object."),(0,i.kt)("h5",{id:"fastifyloglevel"},"fastify.LogLevel"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/logger.d.ts#L12"},"src")),(0,i.kt)("p",null,"Union type of: ",(0,i.kt)("inlineCode",{parentName:"p"},"'info' | 'error' | 'debug' | 'fatal' | 'warn' | 'trace'")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"context"},"Context"),(0,i.kt)("p",null,"The context type definition is similar to the other highly dynamic pieces of the type system. Route context is available in the route handler method."),(0,i.kt)("h5",{id:"fastifyfastifycontext"},"fastify.FastifyContext"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/context.d.ts#L6"},"src")),(0,i.kt)("p",null,"An interface with a single required property ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," that is set by default to ",(0,i.kt)("inlineCode",{parentName:"p"},"unknown"),". Can be specified either using a generic or an overload."),(0,i.kt)("p",null,"This type definition is potentially incomplete. If you are using it and can provide more details on how to improve the definition, we strongly encourage you to open an issue in the main ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify"},"fastify/fastify")," repository. Thank you in advanced!"),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"routing"},"Routing"),(0,i.kt)("p",null,"One of the core principles in Fastify is its routing capabilities. Most of the types defined in this section are used under-the-hood by the Fastify instance ",(0,i.kt)("inlineCode",{parentName:"p"},".route")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".get/.post/.etc")," methods."),(0,i.kt)("h5",{id:"fastifyroutehandlermethodrawserver-rawrequest-rawreply-requestgeneric-contextconfig"},"fastify.RouteHandlerMethod<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/route.d.ts#L105"},"src")),(0,i.kt)("p",null,"A type declaration for the route handler methods. Has two arguments, ",(0,i.kt)("inlineCode",{parentName:"p"},"request")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"reply")," which are typed by ",(0,i.kt)("inlineCode",{parentName:"p"},"FastifyRequest")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"FastifyReply")," respectfully. The generics parameters are passed through to these arguments. The method returns either ",(0,i.kt)("inlineCode",{parentName:"p"},"void")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<any>")," for synchronous and asynchronous handlers respectfully."),(0,i.kt)("h5",{id:"fastifyrouteoptionsrawserver-rawrequest-rawreply-requestgeneric-contextconfig"},"fastify.RouteOptions<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/route.d.ts#L78"},"src")),(0,i.kt)("p",null,"An interface than extends RouteShorthandOptions and adds the follow three required properties:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"method")," which corresponds to a singular ",(0,i.kt)("a",{parentName:"li",href:"#fastifyhttpmethods"},"HTTPMethod")," or a list of ",(0,i.kt)("a",{parentName:"li",href:"#fastifyhttpmethods"},"HTTPMethods")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"url")," a string for the route"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"handler")," the route handler method, see ","[RouteHandlerMethod][]"," for more details")),(0,i.kt)("h5",{id:"fastifyrouteshorthandmethodrawserver-rawrequest-rawreply"},"fastify.RouteShorthandMethod<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/route.d.ts#12"},"src")),(0,i.kt)("p",null,"An overloaded function interface for three kinds of shorthand route methods to be used in conjunction with the ",(0,i.kt)("inlineCode",{parentName:"p"},".get/.post/.etc")," methods."),(0,i.kt)("h5",{id:"fastifyrouteshorthandoptionsrawserver-rawrequest-rawreply-requestgeneric-contextconfig"},"fastify.RouteShorthandOptions<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/route.d.ts#55"},"src")),(0,i.kt)("p",null,"An interface that covers all of the base options for a route. Each property on this interface is optional, and it serves as the base for the RouteOptions and RouteShorthandOptionsWithHandler interfaces."),(0,i.kt)("h5",{id:"fastifyrouteshorthandoptionswithhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfig"},"fastify.RouteShorthandOptionsWithHandler<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/route.d.ts#93"},"src")),(0,i.kt)("p",null,"This interface adds a single, required property to the RouteShorthandOptions interface ",(0,i.kt)("inlineCode",{parentName:"p"},"handler")," which is of type RouteHandlerMethod"),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"parsers"},"Parsers"),(0,i.kt)("h5",{id:"rawbody-1"},"RawBody"),(0,i.kt)("p",null,"A generic type that is either a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Buffer")),(0,i.kt)("h5",{id:"fastifyfastifybodyparserrawbody-rawserver-rawrequest"},"fastify.FastifyBodyParser<",(0,i.kt)("a",{parentName:"h5",href:"#rawbody"},"RawBody"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/content-type-parser.d.ts#L7"},"src")),(0,i.kt)("p",null,"A function type definition for specifying a body parser method. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"RawBody")," generic to specify the type of the body being parsed."),(0,i.kt)("h5",{id:"fastifyfastifycontenttypeparserrawserver-rawrequest"},"fastify.FastifyContentTypeParser<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/content-type-parser.d.ts#L17"},"src")),(0,i.kt)("p",null,"A function type definition for specifying a body parser method. Content is typed via the ",(0,i.kt)("inlineCode",{parentName:"p"},"RawRequest")," generic."),(0,i.kt)("h5",{id:"fastifyaddcontenttypeparserrawserver-rawrequest"},"fastify.AddContentTypeParser<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),">"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/content-type-parser.d.ts#L46"},"src")),(0,i.kt)("p",null,"An overloaded interface function definition for the ",(0,i.kt)("inlineCode",{parentName:"p"},"addContentTypeParser")," method. If ",(0,i.kt)("inlineCode",{parentName:"p"},"parseAs")," is passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"opts")," parameter, the definition uses ","[FastifyBodyParser][]"," for the ",(0,i.kt)("inlineCode",{parentName:"p"},"parser")," parameter; otherwise, it uses ","[FastifyContentTypeParser][]","."),(0,i.kt)("h5",{id:"fastifyhascontenttypeparser"},"fastify.hasContentTypeParser"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/content-type-parser.d.ts#L63"},"src")),(0,i.kt)("p",null,"A method for checking the existence of a type parser of a certain content type"),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"errors"},"Errors"),(0,i.kt)("h5",{id:"fastifyfastifyerror"},"fastify.FastifyError"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/error.d.ts#L17"},"src")),(0,i.kt)("p",null,"FastifyError is a custom error object that includes status code and validation results."),(0,i.kt)("p",null,"It extends the Node.js ",(0,i.kt)("inlineCode",{parentName:"p"},"Error")," type, and adds two additional, optional properties: ",(0,i.kt)("inlineCode",{parentName:"p"},"statusCode: number")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"validation: ValiationResult[]"),"."),(0,i.kt)("h5",{id:"fastifyvalidationresult"},"fastify.ValidationResult"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/error.d.ts#L4"},"src")),(0,i.kt)("p",null,"The route validation internally relies upon Ajv, which is a high-performance JSON schema validator."),(0,i.kt)("p",null,"This interface is passed to instance of FastifyError."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"hooks"},"Hooks"),(0,i.kt)("h5",{id:"fastifyonrequesthookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-done-err-fastifyerror--void-promiseunknown--void"},"fastify.onRequestHookHandler<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">(request: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyrequestrawserver-rawrequest-requestgeneric"},"FastifyRequest"),", reply: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyreplyrawserver-rawreply-contextconfig"},"FastifyReply"),", done: (err?: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyerror"},"FastifyError"),") => void): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L17"},"src")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"onRequest")," is the first hook to be executed in the request lifecycle. There was no previous hook, the next hook will be ",(0,i.kt)("inlineCode",{parentName:"p"},"preParsing"),"."),(0,i.kt)("p",null,"Notice: in the ",(0,i.kt)("inlineCode",{parentName:"p"},"onRequest")," hook, request.body will always be null, because the body parsing happens before the ",(0,i.kt)("inlineCode",{parentName:"p"},"preHandler")," hook."),(0,i.kt)("h5",{id:"fastifypreparsinghookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-done-err-fastifyerror--void-promiseunknown--void"},"fastify.preParsingHookHandler<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">(request: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyrequestrawserver-rawrequest-requestgeneric"},"FastifyRequest"),", reply: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyreplyrawserver-rawreply-contextconfig"},"FastifyReply"),", done: (err?: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyerror"},"FastifyError"),") => void): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L35"},"src")),(0,i.kt)("p",null,"preParsing",(0,i.kt)("inlineCode",{parentName:"p"},"is the second hook to be executed in the request lifecycle. The previous hook was"),"onRequest",(0,i.kt)("inlineCode",{parentName:"p"},", the next hook will be "),"preValidation`."),(0,i.kt)("p",null,"Notice: in the ",(0,i.kt)("inlineCode",{parentName:"p"},"preParsing")," hook, request.body will always be null, because the body parsing happens before the ",(0,i.kt)("inlineCode",{parentName:"p"},"preValidation")," hook."),(0,i.kt)("p",null,"Notice: you should also add ",(0,i.kt)("inlineCode",{parentName:"p"},"receivedEncodedLength")," property to the returned stream. This property is used to correctly match the request payload with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-Length")," header value. Ideally, this property should be updated on each received chunk."),(0,i.kt)("h5",{id:"fastifyprevalidationhookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-done-err-fastifyerror--void-promiseunknown--void"},"fastify.preValidationHookHandler<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">(request: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyrequestrawserver-rawrequest-requestgeneric"},"FastifyRequest"),", reply: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyreplyrawserver-rawreply-contextconfig"},"FastifyReply"),", done: (err?: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyerror"},"FastifyError"),") => void): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L53"},"src")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"preValidation")," is the third hook to be executed in the request lifecycle. The previous hook was ",(0,i.kt)("inlineCode",{parentName:"p"},"preParsing"),", the next hook will be ",(0,i.kt)("inlineCode",{parentName:"p"},"preHandler"),"."),(0,i.kt)("h5",{id:"fastifyprehandlerhookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-done-err-fastifyerror--void-promiseunknown--void"},"fastify.preHandlerHookHandler<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">(request: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyrequestrawserver-rawrequest-requestgeneric"},"FastifyRequest"),", reply: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyreplyrawserver-rawreply-contextconfig"},"FastifyReply"),", done: (err?: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyerror"},"FastifyError"),") => void): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L70"},"src")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"preHandler")," is the fourth hook to be executed in the request lifecycle. The previous hook was ",(0,i.kt)("inlineCode",{parentName:"p"},"preValidation"),", the next hook will be ",(0,i.kt)("inlineCode",{parentName:"p"},"preSerialization"),"."),(0,i.kt)("h5",{id:"fastifypreserializationhookhandlerpreserializationpayload-rawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-payload-preserializationpayload-done-err-fastifyerror--null-res-unknown--void-promiseunknown--void"},"fastify.preSerializationHookHandler<PreSerializationPayload, ",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">(request: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyrequestrawserver-rawrequest-requestgeneric"},"FastifyRequest"),", reply: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyreplyrawserver-rawreply-contextconfig"},"FastifyReply"),", payload: PreSerializationPayload, done: (err: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyerror"},"FastifyError")," | null, res?: unknown) => void): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L94"},"src")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"preSerialization")," is the fifth hook to be executed in the request lifecycle. The previous hook was ",(0,i.kt)("inlineCode",{parentName:"p"},"preHandler"),", the next hook will be ",(0,i.kt)("inlineCode",{parentName:"p"},"onSend"),"."),(0,i.kt)("p",null,"Note: the hook is NOT called if the payload is a string, a Buffer, a stream or null."),(0,i.kt)("h5",{id:"fastifyonsendhookhandleronsendpayload-rawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-payload-onsendpayload-done-err-fastifyerror--null-res-unknown--void-promiseunknown--void"},"fastify.onSendHookHandler<OnSendPayload, ",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">(request: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyrequestrawserver-rawrequest-requestgeneric"},"FastifyRequest"),", reply: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyreplyrawserver-rawreply-contextconfig"},"FastifyReply"),", payload: OnSendPayload, done: (err: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyerror"},"FastifyError")," | null, res?: unknown) => void): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L114"},"src")),(0,i.kt)("p",null,"You can change the payload with the ",(0,i.kt)("inlineCode",{parentName:"p"},"onSend")," hook. It is the sixth hook to be executed in the request lifecycle. The previous hook was ",(0,i.kt)("inlineCode",{parentName:"p"},"preSerialization"),", the next hook will be ",(0,i.kt)("inlineCode",{parentName:"p"},"onResponse"),"."),(0,i.kt)("p",null,"Note: If you change the payload, you may only change it to a string, a Buffer, a stream, or null."),(0,i.kt)("h5",{id:"fastifyonresponsehookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-done-err-fastifyerror--void-promiseunknown--void"},"fastify.onResponseHookHandler<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">(request: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyrequestrawserver-rawrequest-requestgeneric"},"FastifyRequest"),", reply: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyreplyrawserver-rawreply-contextconfig"},"FastifyReply"),", done: (err?: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyerror"},"FastifyError"),") => void): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L134"},"src")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"onResponse")," is the seventh and last hook in the request hook lifecycle. The previous hook was ",(0,i.kt)("inlineCode",{parentName:"p"},"onSend"),", there is no next hook."),(0,i.kt)("p",null,"The onResponse hook is executed when a response has been sent, so you will not be able to send more data to the client. It can however be useful for sending data to external services, for example to gather statistics."),(0,i.kt)("h5",{id:"fastifyonerrorhookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigrequest-fastifyrequest-reply-fastifyreply-error-fastifyerror-done---void-promiseunknown--void"},"fastify.onErrorHookHandler<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">(request: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyrequestrawserver-rawrequest-requestgeneric"},"FastifyRequest"),", reply: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyreplyrawserver-rawreply-contextconfig"},"FastifyReply"),", error: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyerror"},"FastifyError"),", done: () => void): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L154"},"src")),(0,i.kt)("p",null,"This hook is useful if you need to do some custom error logging or add some specific header in case of error."),(0,i.kt)("p",null,"It is not intended for changing the error, and calling reply.send will throw an exception."),(0,i.kt)("p",null,"This hook will be executed only after the customErrorHandler has been executed, and only if the customErrorHandler sends an error back to the user (Note that the default customErrorHandler always sends the error back to the user)."),(0,i.kt)("p",null,"Notice: unlike the other hooks, pass an error to the done function is not supported."),(0,i.kt)("h5",{id:"fastifyonroutehookhandlerrawserver-rawrequest-rawreply-requestgeneric-contextconfigopts-routeoptions---path-string-prefix-string--promiseunknown--void"},"fastify.onRouteHookHandler<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrequestgenericinterface"},"RequestGeneric"),", ",(0,i.kt)("a",{parentName:"h5",href:"#ContextConfigGeneric"},"ContextConfig"),">(opts: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyrouteoptionsrawserver-rawrequest-rawreply-requestgeneric-contextconfig"},"RouteOptions")," & { path: string; prefix: string }): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L174"},"src")),(0,i.kt)("p",null,"Triggered when a new route is registered. Listeners are passed a routeOptions object as the sole parameter. The interface is synchronous, and, as such, the listener does not get passed a callback"),(0,i.kt)("h5",{id:"fastifyonregisterhookhandlerrawserver-rawrequest-rawreply-loggerinstance-fastifyinstance-done-err-fastifyerror--void-promiseunknown--void"},"fastify.onRegisterHookHandler<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#logger"},"Logger"),">(instance: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyinstance"},"FastifyInstance"),", done: (err?: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyerror"},"FastifyError"),") => void): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L191"},"src")),(0,i.kt)("p",null,"Triggered when a new plugin is registered and a new encapsulation context is created. The hook will be executed before the registered code."),(0,i.kt)("p",null,"This hook can be useful if you are developing a plugin that needs to know when a plugin context is formed, and you want to operate in that specific context."),(0,i.kt)("p",null,"Note: This hook will not be called if a plugin is wrapped inside fastify-plugin."),(0,i.kt)("h5",{id:"fastifyonclosehookhandlerrawserver-rawrequest-rawreply-loggerinstance-fastifyinstance-done-err-fastifyerror--void-promiseunknown--void"},"fastify.onCloseHookHandler<",(0,i.kt)("a",{parentName:"h5",href:"#rawserver"},"RawServer"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawrequest"},"RawRequest"),", ",(0,i.kt)("a",{parentName:"h5",href:"#rawreply"},"RawReply"),", ",(0,i.kt)("a",{parentName:"h5",href:"#logger"},"Logger"),">(instance: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyinstance"},"FastifyInstance"),", done: (err?: ",(0,i.kt)("a",{parentName:"h5",href:"#fastifyfastifyerror"},"FastifyError"),") => void): Promise\\<unknown",">"," | void"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/blob/main/types/hooks.d.ts#L206"},"src")),(0,i.kt)("p",null,'Triggered when fastify.close() is invoked to stop the server. It is useful when plugins need a "shutdown" event, for example to close an open connection to a database.'))}d.isMDXComponent=!0}}]);