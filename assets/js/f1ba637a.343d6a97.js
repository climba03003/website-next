"use strict";(self.webpackChunk_fastify_website=self.webpackChunk_fastify_website||[]).push([[33563],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},64292:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,l={unversionedId:"Reference/Server",id:"version-v4.9.x/Reference/Server",title:"Server",description:"Factory",source:"@site/versioned_docs/version-v4.9.x/Reference/Server.md",sourceDirName:"Reference",slug:"/Reference/Server",permalink:"/website-next/docs/v4.9.x/Reference/Server",draft:!1,editUrl:"https://github.com/fastify/fastify/edit/main/docs/Reference/Server.md",tags:[],version:"v4.9.x",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Routes",permalink:"/website-next/docs/v4.9.x/Reference/Routes"},next:{title:"Type-Providers",permalink:"/website-next/docs/v4.9.x/Reference/Type-Providers"}},s={},p=[{value:"Factory",id:"factory",level:2},{value:"<code>http2</code>",id:"http2",level:3},{value:"<code>https</code>",id:"https",level:3},{value:"<code>connectionTimeout</code>",id:"connectiontimeout",level:3},{value:"<code>keepAliveTimeout</code>",id:"keepalivetimeout",level:3},{value:"<code>forceCloseConnections</code>",id:"forcecloseconnections",level:3},{value:"<code>maxRequestsPerSocket</code>",id:"maxrequestspersocket",level:3},{value:"<code>requestTimeout</code>",id:"requesttimeout",level:3},{value:"<code>ignoreTrailingSlash</code>",id:"ignoretrailingslash",level:3},{value:"<code>ignoreDuplicateSlashes</code>",id:"ignoreduplicateslashes",level:3},{value:"<code>maxParamLength</code>",id:"maxparamlength",level:3},{value:"<code>bodyLimit</code>",id:"bodylimit",level:3},{value:"<code>onProtoPoisoning</code>",id:"onprotopoisoning",level:3},{value:"<code>onConstructorPoisoning</code>",id:"onconstructorpoisoning",level:3},{value:"<code>logger</code>",id:"logger",level:3},{value:"<code>disableRequestLogging</code>",id:"disablerequestlogging",level:3},{value:"<code>serverFactory</code>",id:"serverfactory",level:3},{value:"<code>jsonShorthand</code>",id:"jsonshorthand",level:3},{value:"<code>caseSensitive</code>",id:"casesensitive",level:3},{value:"<code>allowUnsafeRegex</code>",id:"allowunsaferegex",level:3},{value:"<code>requestIdHeader</code>",id:"requestidheader",level:3},{value:"<code>requestIdLogLabel</code>",id:"requestidloglabel",level:3},{value:"<code>genReqId</code>",id:"genreqid",level:3},{value:"<code>trustProxy</code>",id:"trustproxy",level:3},{value:"<code>pluginTimeout</code>",id:"plugintimeout",level:3},{value:"<code>querystringParser</code>",id:"querystringparser",level:3},{value:"<code>exposeHeadRoutes</code>",id:"exposeheadroutes",level:3},{value:"<code>constraints</code>",id:"constraints",level:3},{value:"<code>return503OnClosing</code>",id:"return503onclosing",level:3},{value:"<code>ajv</code>",id:"ajv",level:3},{value:"<code>serializerOpts</code>",id:"serializeropts",level:3},{value:"<code>http2SessionTimeout</code>",id:"http2sessiontimeout",level:3},{value:"<code>frameworkErrors</code>",id:"frameworkerrors",level:3},{value:"<code>clientErrorHandler</code>",id:"clienterrorhandler",level:3},{value:"<code>rewriteUrl</code>",id:"rewriteurl",level:3},{value:"Instance",id:"instance",level:2},{value:"Server Methods",id:"server-methods",level:3},{value:"server",id:"server",level:4},{value:"after",id:"after",level:4},{value:"ready",id:"ready",level:4},{value:"listen",id:"listen",level:4},{value:"addresses",id:"addresses",level:4},{value:"getDefaultRoute",id:"getdefaultroute",level:4},{value:"setDefaultRoute",id:"setdefaultroute",level:4},{value:"routing",id:"routing",level:4},{value:"route",id:"route",level:4},{value:"hasRoute",id:"hasroute",level:4},{value:"close",id:"close",level:4},{value:"decorate*",id:"decorate",level:4},{value:"register",id:"register",level:4},{value:"addHook",id:"addhook",level:4},{value:"prefix",id:"prefix",level:4},{value:"pluginName",id:"pluginname",level:4},{value:"hasPlugin",id:"hasplugin",level:4},{value:"log",id:"log",level:4},{value:"version",id:"version",level:4},{value:"inject",id:"inject",level:4},{value:"addSchema",id:"addschema",level:4},{value:"getSchemas",id:"getschemas",level:4},{value:"getSchema",id:"getschema",level:4},{value:"setReplySerializer",id:"setreplyserializer",level:4},{value:"setValidatorCompiler",id:"setvalidatorcompiler",level:4},{value:"setSchemaErrorFormatter",id:"setschemaerrorformatter",level:4},{value:"setSerializerCompiler",id:"setserializercompiler",level:4},{value:"validatorCompiler",id:"validatorcompiler",level:4},{value:"serializerCompiler",id:"serializercompiler",level:4},{value:"schemaErrorFormatter",id:"schemaerrorformatter",level:4},{value:"schemaController",id:"schemacontroller",level:4},{value:"setNotFoundHandler",id:"setnotfoundhandler",level:4},{value:"setErrorHandler",id:"seterrorhandler",level:4},{value:"addConstraintStrategy",id:"addconstraintstrategy",level:4},{value:"hasConstraintStrategy",id:"hasconstraintstrategy",level:4},{value:"printRoutes",id:"printroutes",level:4},{value:"printPlugins",id:"printplugins",level:4},{value:"addContentTypeParser",id:"addcontenttypeparser",level:4},{value:"hasContentTypeParser",id:"hascontenttypeparser",level:4},{value:"removeContentTypeParser",id:"removecontenttypeparser",level:4},{value:"removeAllContentTypeParsers",id:"removeallcontenttypeparsers",level:4},{value:"getDefaultJsonParser",id:"getdefaultjsonparser",level:4},{value:"defaultTextParser",id:"defaulttextparser",level:4},{value:"errorHandler",id:"errorhandler",level:4},{value:"initialConfig",id:"initialconfig",level:4}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"factory"},"Factory"),(0,r.kt)("a",{id:"factory"}),(0,r.kt)("p",null,"The Fastify module exports a factory function that is used to create new"),(0,r.kt)("code",null,(0,r.kt)("b",null,"Fastify server"))," instances. This factory function accepts an options object which is used to customize the resulting instance. This document describes the properties available in that options object.",(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#factory"},"Factory"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#http2"},(0,r.kt)("inlineCode",{parentName:"a"},"http2"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#https"},(0,r.kt)("inlineCode",{parentName:"a"},"https"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connectiontimeout"},(0,r.kt)("inlineCode",{parentName:"a"},"connectionTimeout"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#keepalivetimeout"},(0,r.kt)("inlineCode",{parentName:"a"},"keepAliveTimeout"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#forcecloseconnections"},(0,r.kt)("inlineCode",{parentName:"a"},"forceCloseConnections"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#maxrequestspersocket"},(0,r.kt)("inlineCode",{parentName:"a"},"maxRequestsPerSocket"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#requesttimeout"},(0,r.kt)("inlineCode",{parentName:"a"},"requestTimeout"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ignoretrailingslash"},(0,r.kt)("inlineCode",{parentName:"a"},"ignoreTrailingSlash"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ignoreduplicateslashes"},(0,r.kt)("inlineCode",{parentName:"a"},"ignoreDuplicateSlashes"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#maxparamlength"},(0,r.kt)("inlineCode",{parentName:"a"},"maxParamLength"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#bodylimit"},(0,r.kt)("inlineCode",{parentName:"a"},"bodyLimit"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#onprotopoisoning"},(0,r.kt)("inlineCode",{parentName:"a"},"onProtoPoisoning"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#onconstructorpoisoning"},(0,r.kt)("inlineCode",{parentName:"a"},"onConstructorPoisoning"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#logger"},(0,r.kt)("inlineCode",{parentName:"a"},"logger"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#disablerequestlogging"},(0,r.kt)("inlineCode",{parentName:"a"},"disableRequestLogging"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#serverfactory"},(0,r.kt)("inlineCode",{parentName:"a"},"serverFactory"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#jsonshorthand"},(0,r.kt)("inlineCode",{parentName:"a"},"jsonShorthand"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#casesensitive"},(0,r.kt)("inlineCode",{parentName:"a"},"caseSensitive"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#allowunsaferegex"},(0,r.kt)("inlineCode",{parentName:"a"},"allowUnsafeRegex"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#requestidheader"},(0,r.kt)("inlineCode",{parentName:"a"},"requestIdHeader"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#requestidloglabel"},(0,r.kt)("inlineCode",{parentName:"a"},"requestIdLogLabel"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#genreqid"},(0,r.kt)("inlineCode",{parentName:"a"},"genReqId"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#trustproxy"},(0,r.kt)("inlineCode",{parentName:"a"},"trustProxy"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#plugintimeout"},(0,r.kt)("inlineCode",{parentName:"a"},"pluginTimeout"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#querystringparser"},(0,r.kt)("inlineCode",{parentName:"a"},"querystringParser"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#exposeheadroutes"},(0,r.kt)("inlineCode",{parentName:"a"},"exposeHeadRoutes"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#constraints"},(0,r.kt)("inlineCode",{parentName:"a"},"constraints"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#return503onclosing"},(0,r.kt)("inlineCode",{parentName:"a"},"return503OnClosing"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ajv"},(0,r.kt)("inlineCode",{parentName:"a"},"ajv"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#serializeropts"},(0,r.kt)("inlineCode",{parentName:"a"},"serializerOpts"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#http2sessiontimeout"},(0,r.kt)("inlineCode",{parentName:"a"},"http2SessionTimeout"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#frameworkerrors"},(0,r.kt)("inlineCode",{parentName:"a"},"frameworkErrors"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#clienterrorhandler"},(0,r.kt)("inlineCode",{parentName:"a"},"clientErrorHandler"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rewriteurl"},(0,r.kt)("inlineCode",{parentName:"a"},"rewriteUrl"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#instance"},"Instance"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#server-methods"},"Server Methods"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#server"},"server")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#after"},"after")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ready"},"ready")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#listen"},"listen")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#addresses"},"addresses")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#getdefaultroute"},"getDefaultRoute")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setdefaultroute"},"setDefaultRoute")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#routing"},"routing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#route"},"route")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#hasRoute"},"hasRoute")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#close"},"close")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#decorate"},"decorate*")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#register"},"register")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#addhook"},"addHook")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#prefix"},"prefix")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#pluginname"},"pluginName")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#hasplugin"},"hasPlugin")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#log"},"log")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#version"},"version")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#inject"},"inject")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#addschema"},"addSchema")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#getschemas"},"getSchemas")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#getschema"},"getSchema")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setreplyserializer"},"setReplySerializer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setvalidatorcompiler"},"setValidatorCompiler")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setschemaerrorformatter"},"setSchemaErrorFormatter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setserializercompiler"},"setSerializerCompiler")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#validatorcompiler"},"validatorCompiler")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#serializercompiler"},"serializerCompiler")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#schemaerrorformatter"},"schemaErrorFormatter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#schemacontroller"},"schemaController")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setnotfoundhandler"},"setNotFoundHandler")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#seterrorhandler"},"setErrorHandler")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#addconstraintstrategy"},"addConstraintStrategy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#hasconstraintstrategy"},"hasConstraintStrategy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#printroutes"},"printRoutes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#printplugins"},"printPlugins")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#addcontenttypeparser"},"addContentTypeParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#hascontenttypeparser"},"hasContentTypeParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#removecontenttypeparser"},"removeContentTypeParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#removeallcontenttypeparsers"},"removeAllContentTypeParsers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#getdefaultjsonparser"},"getDefaultJsonParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#defaulttextparser"},"defaultTextParser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#errorhandler"},"errorHandler")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#initialconfig"},"initialConfig"))))))),(0,r.kt)("h3",{id:"http2"},(0,r.kt)("inlineCode",{parentName:"h3"},"http2")),(0,r.kt)("a",{id:"factory-http2"}),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," Node.js core's\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest-v14.x/docs/api/http2.html"},"HTTP/2")," module is\nused for binding the socket."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"false"))),(0,r.kt)("h3",{id:"https"},(0,r.kt)("inlineCode",{parentName:"h3"},"https")),(0,r.kt)("a",{id:"factory-https"}),(0,r.kt)("p",null,"An object used to configure the server's listening socket for TLS. The options\nare the same as the Node.js core ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest-v14.x/docs/api/https.html#https_https_createserver_options_requestlistener"},(0,r.kt)("inlineCode",{parentName:"a"},"createServer"),"\nmethod"),".\nWhen this property is ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),", the socket will not be configured for TLS."),(0,r.kt)("p",null,"This option also applies when the ",(0,r.kt)("a",{parentName:"p",href:"#factory-http2"},(0,r.kt)("inlineCode",{parentName:"a"},"http2"))," option is set."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("h3",{id:"connectiontimeout"},(0,r.kt)("inlineCode",{parentName:"h3"},"connectionTimeout")),(0,r.kt)("a",{id:"factory-connection-timeout"}),(0,r.kt)("p",null,"Defines the server timeout in milliseconds. See documentation for\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http.html#http_server_timeout"},(0,r.kt)("inlineCode",{parentName:"a"},"server.timeout"),"\nproperty")," to understand\nthe effect of this option. When ",(0,r.kt)("inlineCode",{parentName:"p"},"serverFactory")," option is specified, this option\nis ignored."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," (no timeout)")),(0,r.kt)("h3",{id:"keepalivetimeout"},(0,r.kt)("inlineCode",{parentName:"h3"},"keepAliveTimeout")),(0,r.kt)("a",{id:"factory-keep-alive-timeout"}),(0,r.kt)("p",null,"Defines the server keep-alive timeout in milliseconds. See documentation for\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http.html#http_server_keepalivetimeout"},(0,r.kt)("inlineCode",{parentName:"a"},"server.keepAliveTimeout"),"\nproperty")," to\nunderstand the effect of this option. This option only applies when HTTP/1 is in\nuse. Also, when ",(0,r.kt)("inlineCode",{parentName:"p"},"serverFactory")," option is specified, this option is ignored."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"72000")," (72 seconds)")),(0,r.kt)("h3",{id:"forcecloseconnections"},(0,r.kt)("inlineCode",{parentName:"h3"},"forceCloseConnections")),(0,r.kt)("a",{id:"forcecloseconnections"}),(0,r.kt)("p",null,"When set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", upon ",(0,r.kt)("a",{parentName:"p",href:"#close"},(0,r.kt)("inlineCode",{parentName:"a"},"close"))," the server will iterate the current\npersistent connections and ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest-v16.x/docs/api/net.html#socketdestroyerror"},"destroy their\nsockets"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Important: connections are not inspected to determine if requests have been\ncompleted.")),(0,r.kt)("p",null,"Fastify will prefer the HTTP server's\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest-v18.x/docs/api/http.html#servercloseallconnections"},(0,r.kt)("inlineCode",{parentName:"a"},"closeAllConnections")),"\nmethod if supported, otherwise it will use internal connection tracking."),(0,r.kt)("p",null,"When set to ",(0,r.kt)("inlineCode",{parentName:"p"},'"idle"'),", upon ",(0,r.kt)("a",{parentName:"p",href:"#close"},(0,r.kt)("inlineCode",{parentName:"a"},"close"))," the server will iterate the current\npersistent connections which are not sending a request or waiting for a response\nand destroy their sockets. The value\xa0is supported only if the HTTP server\nsupports the\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest-v18.x/docs/api/http.html#servercloseidleconnections"},(0,r.kt)("inlineCode",{parentName:"a"},"closeIdleConnections")),"\nmethod, otherwise attempting to set it will throw an exception."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},'"idle"')," if the HTTP server allows it, ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"\xa0otherwise")),(0,r.kt)("h3",{id:"maxrequestspersocket"},(0,r.kt)("inlineCode",{parentName:"h3"},"maxRequestsPerSocket")),(0,r.kt)("a",{id:"factory-max-requests-per-socket"}),(0,r.kt)("p",null,"Defines the maximum number of requests socket can handle before closing keep\nalive connection. See documentation for ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest/docs/api/http.html#http_server_maxrequestspersocket"},(0,r.kt)("inlineCode",{parentName:"a"},"server.maxRequestsPerSocket"),"\nproperty"),"\nto understand the effect of this option. This option only applies when HTTP/1.1\nis in use. Also, when ",(0,r.kt)("inlineCode",{parentName:"p"},"serverFactory")," option is specified, this option is\nignored."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"}," At the time of this writing, only node version greater or equal to 16.10.0\nsupport this option. Check the Node.js documentation for availability in the\nversion you are running.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," (no limit)")),(0,r.kt)("h3",{id:"requesttimeout"},(0,r.kt)("inlineCode",{parentName:"h3"},"requestTimeout")),(0,r.kt)("a",{id:"factory-request-timeout"}),(0,r.kt)("p",null,"Defines the maximum number of milliseconds for receiving the entire request from\nthe client. ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/dist/latest/docs/api/http.html#http_server_requesttimeout"},(0,r.kt)("inlineCode",{parentName:"a"},"server.requestTimeout"),"\nproperty"),"\nto understand the effect of this option. Also, when ",(0,r.kt)("inlineCode",{parentName:"p"},"serverFactory")," option is\nspecified, this option is ignored. It must be set to a non-zero value (e.g. 120\nseconds) to protect against potential Denial-of-Service attacks in case the\nserver is deployed without a reverse proxy in front."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"}," At the time of this writing, only node version greater or equal to 14.11.0\nsupport this option. Check the Node.js documentation for availability in the\nversion you are running.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," (no limit)")),(0,r.kt)("h3",{id:"ignoretrailingslash"},(0,r.kt)("inlineCode",{parentName:"h3"},"ignoreTrailingSlash")),(0,r.kt)("a",{id:"factory-ignore-slash"}),(0,r.kt)("p",null,"Fastify uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/delvedor/find-my-way"},"find-my-way")," to handle\nrouting. By default, Fastify is set to take into account the trailing slashes.\nPaths like ",(0,r.kt)("inlineCode",{parentName:"p"},"/foo")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"/foo/")," will be treated as different paths. If you want to\nchange this, set this flag to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". That way, both ",(0,r.kt)("inlineCode",{parentName:"p"},"/foo")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"/foo/")," will\npoint to the same route. This option applies to ",(0,r.kt)("em",{parentName:"p"},"all")," route registrations for\nthe resulting server instance."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"false"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  ignoreTrailingSlash: true\n})\n\n// registers both \"/foo\" and \"/foo/\"\nfastify.get('/foo/', function (req, reply) {\n  reply.send('foo')\n})\n\n// registers both \"/bar\" and \"/bar/\"\nfastify.get('/bar', function (req, reply) {\n  reply.send('bar')\n})\n")),(0,r.kt)("h3",{id:"ignoreduplicateslashes"},(0,r.kt)("inlineCode",{parentName:"h3"},"ignoreDuplicateSlashes")),(0,r.kt)("a",{id:"factory-ignore-duplicate-slashes"}),(0,r.kt)("p",null,"Fastify uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/delvedor/find-my-way"},"find-my-way")," to handle\nrouting. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"ignoreDuplicateSlashes")," option to remove duplicate slashes\nfrom the path. It removes duplicate slashes in the route path and in the request\nURL. This option applies to ",(0,r.kt)("em",{parentName:"p"},"all")," route registrations for the resulting server\ninstance."),(0,r.kt)("p",null,"Note that when ",(0,r.kt)("inlineCode",{parentName:"p"},"ignoreTrailingSlash")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ignoreDuplicateSlashes")," are both set\nto true, Fastify will remove duplicate slashes, and then trailing slashes,\nmeaning //a//b//c// will be converted to /a/b/c."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"false"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  ignoreDuplicateSlashes: true\n})\n\n// registers \"/foo/bar/\"\nfastify.get('///foo//bar//', function (req, reply) {\n  reply.send('foo')\n})\n")),(0,r.kt)("h3",{id:"maxparamlength"},(0,r.kt)("inlineCode",{parentName:"h3"},"maxParamLength")),(0,r.kt)("a",{id:"factory-max-param-length"}),(0,r.kt)("p",null,"You can set a custom length for parameters in parametric (standard, regex, and\nmulti) routes by using ",(0,r.kt)("inlineCode",{parentName:"p"},"maxParamLength")," option; the default value is 100\ncharacters."),(0,r.kt)("p",null,"This can be useful especially if you have a regex-based route, protecting you\nagainst ",(0,r.kt)("a",{parentName:"p",href:"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"},"DoS\nattacks"),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"If the maximum length limit is reached, the not found route will be invoked.")),(0,r.kt)("h3",{id:"bodylimit"},(0,r.kt)("inlineCode",{parentName:"h3"},"bodyLimit")),(0,r.kt)("a",{id:"factory-body-limit"}),(0,r.kt)("p",null,"Defines the maximum payload, in bytes, the server is allowed to accept."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"1048576")," (1MiB)")),(0,r.kt)("h3",{id:"onprotopoisoning"},(0,r.kt)("inlineCode",{parentName:"h3"},"onProtoPoisoning")),(0,r.kt)("a",{id:"factory-on-proto-poisoning"}),(0,r.kt)("p",null,"Defines what action the framework must take when parsing a JSON object with\n",(0,r.kt)("inlineCode",{parentName:"p"},"__proto__"),". This functionality is provided by\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/secure-json-parse"},"secure-json-parse"),". See\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Guides/Prototype-Poisoning"},"Prototype Poisoning")," for more details about\nprototype poisoning attacks."),(0,r.kt)("p",null,"Possible values are ",(0,r.kt)("inlineCode",{parentName:"p"},"'error'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'remove'")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"'ignore'"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"'error'"))),(0,r.kt)("h3",{id:"onconstructorpoisoning"},(0,r.kt)("inlineCode",{parentName:"h3"},"onConstructorPoisoning")),(0,r.kt)("a",{id:"factory-on-constructor-poisoning"}),(0,r.kt)("p",null,"Defines what action the framework must take when parsing a JSON object with\n",(0,r.kt)("inlineCode",{parentName:"p"},"constructor"),". This functionality is provided by\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/secure-json-parse"},"secure-json-parse"),". See\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Guides/Prototype-Poisoning"},"Prototype Poisoning")," for more details about\nprototype poisoning attacks."),(0,r.kt)("p",null,"Possible values are ",(0,r.kt)("inlineCode",{parentName:"p"},"'error'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'remove'")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"'ignore'"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"'error'"))),(0,r.kt)("h3",{id:"logger"},(0,r.kt)("inlineCode",{parentName:"h3"},"logger")),(0,r.kt)("a",{id:"factory-logger"}),(0,r.kt)("p",null,"Fastify includes built-in logging via the ",(0,r.kt)("a",{parentName:"p",href:"https://getpino.io/"},"Pino")," logger.\nThis property is used to configure the internal logger instance."),(0,r.kt)("p",null,"The possible values this property may have are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". The logger is disabled. All logging methods will point to a\nnull logger ",(0,r.kt)("a",{parentName:"p",href:"https://npm.im/abstract-logging"},"abstract-logging")," instance.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"pinoInstance"),": a previously instantiated instance of Pino. The internal\nlogger will point to this instance.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"object"),": a standard Pino ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pinojs/pino/blob/c77d8ec5ce/docs/API.md#constructor"},"options\nobject"),".\nThis will be passed directly to the Pino constructor. If the following\nproperties are not present on the object, they will be added accordingly:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"level"),": the minimum logging level. If not set, it will be set to\n",(0,r.kt)("inlineCode",{parentName:"li"},"'info'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"serializers"),": a hash of serialization functions. By default, serializers\nare added for ",(0,r.kt)("inlineCode",{parentName:"li"},"req")," (incoming request objects), ",(0,r.kt)("inlineCode",{parentName:"li"},"res")," (outgoing response\nobjects), and ",(0,r.kt)("inlineCode",{parentName:"li"},"err")," (standard ",(0,r.kt)("inlineCode",{parentName:"li"},"Error")," objects). When a log method receives\nan object with any of these properties then the respective serializer will\nbe used for that property. For example:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/foo', function (req, res) {\n  req.log.info({req}) // log the serialized request object\n  res.send('foo')\n})\n")),"Any user-supplied serializer will override the default serializer of the\ncorresponding property."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"loggerInstance"),": a custom logger instance. The logger must conform to the\nPino interface by having the following methods: ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"debug"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"fatal"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"warn"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"trace"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"child"),". For example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const pino = require('pino')();\n\nconst customLogger = {\n  info: function (o, ...n) {},\n  warn: function (o, ...n) {},\n  error: function (o, ...n) {},\n  fatal: function (o, ...n) {},\n  trace: function (o, ...n) {},\n  debug: function (o, ...n) {},\n  child: function() {\n    const child = Object.create(this);\n    child.pino = pino.child(...arguments);\n    return child;\n  },\n};\n\nconst fastify = require('fastify')({logger: customLogger});\n")))),(0,r.kt)("h3",{id:"disablerequestlogging"},(0,r.kt)("inlineCode",{parentName:"h3"},"disableRequestLogging")),(0,r.kt)("a",{id:"factory-disable-request-logging"}),(0,r.kt)("p",null,"By default, when logging is enabled, Fastify will issue an ",(0,r.kt)("inlineCode",{parentName:"p"},"info")," level log\nmessage when a request is received and when the response for that request has\nbeen sent. By setting this option to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", these log messages will be\ndisabled. This allows for more flexible request start and end logging by\nattaching custom ",(0,r.kt)("inlineCode",{parentName:"p"},"onRequest")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"onResponse")," hooks."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"false"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Examples of hooks to replicate the disabled functionality.\nfastify.addHook('onRequest', (req, reply, done) => {\n  req.log.info({ url: req.raw.url, id: req.id }, 'received request')\n  done()\n})\n\nfastify.addHook('onResponse', (req, reply, done) => {\n  req.log.info({ url: req.raw.originalUrl, statusCode: reply.raw.statusCode }, 'request completed')\n  done()\n})\n")),(0,r.kt)("p",null,"Please note that this setting will also disable an error log written by the\ndefault ",(0,r.kt)("inlineCode",{parentName:"p"},"onResponse")," hook on reply callback errors."),(0,r.kt)("h3",{id:"serverfactory"},(0,r.kt)("inlineCode",{parentName:"h3"},"serverFactory")),(0,r.kt)("a",{id:"custom-http-server"}),(0,r.kt)("p",null,"You can pass a custom HTTP server to Fastify by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"serverFactory"),"\noption."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"serverFactory")," is a function that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," parameter, which takes the\n",(0,r.kt)("inlineCode",{parentName:"p"},"request")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"response")," objects as parameters, and an options object, which is\nthe same you have passed to Fastify."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const serverFactory = (handler, opts) => {\n  const server = http.createServer((req, res) => {\n    handler(req, res)\n  })\n\n  return server\n}\n\nconst fastify = Fastify({ serverFactory })\n\nfastify.get('/', (req, reply) => {\n  reply.send({ hello: 'world' })\n})\n\nfastify.listen({ port: 3000 })\n")),(0,r.kt)("p",null,"Internally Fastify uses the API of Node core HTTP server, so if you are using a\ncustom server you must be sure to have the same API exposed. If not, you can\nenhance the server instance inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"serverFactory")," function before the\n",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement."),(0,r.kt)("h3",{id:"jsonshorthand"},(0,r.kt)("inlineCode",{parentName:"h3"},"jsonShorthand")),(0,r.kt)("a",{id:"schema-json-shorthand"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"true"))),(0,r.kt)("p",null,"Internally, and by default, Fastify will automatically infer the root properties\nof JSON Schemas if it does not find valid root properties according to the JSON\nSchema spec. If you wish to implement your own schema validation compiler, for\nexample: to parse schemas as JTD instead of JSON Schema, then you can explicitly\nset this option to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," to make sure the schemas you receive are unmodified\nand are not being treated internally as JSON Schema."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const AjvJTD = require('ajv/dist/jtd'/* only valid for AJV v7+ */)\nconst ajv = new AjvJTD({\n  // This would let you throw at start for invalid JTD schema objects\n  allErrors: process.env.NODE_ENV === 'development'\n})\nconst fastify = Fastify({ jsonShorthand: false })\nfastify.setValidatorCompiler(({ schema }) => {\n  return ajv.compile(schema)\n})\nfastify.post('/', {\n  schema: {\n    body: {\n      properties: {\n        foo: { type: 'uint8' }\n      }\n    }\n  },\n  handler (req, reply) { reply.send({ ok: 1 }) }\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note: Fastify does not currently throw on invalid schemas, so if you turn this\noff in an existing project, you need to be careful that none of your existing\nschemas become invalid as a result, since they will be treated as a catch-all.")),(0,r.kt)("h3",{id:"casesensitive"},(0,r.kt)("inlineCode",{parentName:"h3"},"caseSensitive")),(0,r.kt)("a",{id:"factory-case-sensitive"}),(0,r.kt)("p",null,"By default, value equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", routes are registered as case sensitive. That\nis, ",(0,r.kt)("inlineCode",{parentName:"p"},"/foo")," is not equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"/Foo"),". When set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", routes are\nregistered in a fashion such that ",(0,r.kt)("inlineCode",{parentName:"p"},"/foo")," is equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"/Foo")," which is\nequivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"/FOO"),"."),(0,r.kt)("p",null,"By setting ",(0,r.kt)("inlineCode",{parentName:"p"},"caseSensitive")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", all paths will be matched as lowercase,\nbut the route parameters or wildcards will maintain their original letter\ncasing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/user/:username', (request, reply) => {\n  // Given the URL: /USER/NodeJS\n  console.log(request.params.username) // -> 'NodeJS'\n})\n")),(0,r.kt)("p",null,"Please note that setting this option to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," goes against\n",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc3986#section-6.2.2.1"},"RFC3986"),"."),(0,r.kt)("p",null,"Also note, this setting will not affect query strings. If you want to change the\nway query strings are handled take a look at\n",(0,r.kt)("a",{parentName:"p",href:"#querystringparser"},(0,r.kt)("inlineCode",{parentName:"a"},"querystringParser")),"."),(0,r.kt)("h3",{id:"allowunsaferegex"},(0,r.kt)("inlineCode",{parentName:"h3"},"allowUnsafeRegex")),(0,r.kt)("a",{id:"factory-allow-unsafe-regex"}),(0,r.kt)("p",null,"The allowUnsafeRegex setting is false by default, so routes only allow safe\nregular expressions. To use unsafe expressions, set allowUnsafeRegex to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/user/:id(^([0-9]+){4}$)', (request, reply) => {\n  // Throws an error without allowUnsafeRegex = true\n})\n")),(0,r.kt)("p",null,"Under the hood: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/delvedor/find-my-way"},"FindMyWay")," More info\nabout safe regexp: ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/safe-regex2"},"Safe-regex2")),(0,r.kt)("h3",{id:"requestidheader"},(0,r.kt)("inlineCode",{parentName:"h3"},"requestIdHeader")),(0,r.kt)("a",{id:"factory-request-id-header"}),(0,r.kt)("p",null,"The header name used to set the request-id. See ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Logging#logging-request-id"},"the\nrequest-id")," section.\nSetting ",(0,r.kt)("inlineCode",{parentName:"p"},"requestIdHeader")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," will always use ",(0,r.kt)("a",{parentName:"p",href:"#genreqid"},"genReqId")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"'request-id'"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  requestIdHeader: 'x-custom-id', // -> use 'X-Custom-Id' header if available\n  //requestIdHeader: false, // -> always use genReqId\n})\n")),(0,r.kt)("h3",{id:"requestidloglabel"},(0,r.kt)("inlineCode",{parentName:"h3"},"requestIdLogLabel")),(0,r.kt)("a",{id:"factory-request-id-log-label"}),(0,r.kt)("p",null,"Defines the label used for the request identifier when logging the request."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"'reqId'"))),(0,r.kt)("h3",{id:"genreqid"},(0,r.kt)("inlineCode",{parentName:"h3"},"genReqId")),(0,r.kt)("a",{id:"factory-gen-request-id"}),(0,r.kt)("p",null,"Function for generating the request-id. It will receive the incoming request as\na parameter. This function is expected to be error-free."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"value of 'request-id' header if provided or monotonically increasing\nintegers"))),(0,r.kt)("p",null,"Especially in distributed systems, you may want to override the default ID\ngeneration behavior as shown below. For generating ",(0,r.kt)("inlineCode",{parentName:"p"},"UUID"),"s you may want to check\nout ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mcollina/hyperid"},"hyperid")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let i = 0\nconst fastify = require('fastify')({\n  genReqId: function (req) { return i++ }\n})\n")),(0,r.kt)("p",null,"**Note: genReqId will ",(0,r.kt)("em",{parentName:"p"},"not")," be called if the header set in"),(0,r.kt)("code",null,"[requestIdHeader](#requestidheader)")," is available (defaults to 'request-id').**",(0,r.kt)("h3",{id:"trustproxy"},(0,r.kt)("inlineCode",{parentName:"h3"},"trustProxy")),(0,r.kt)("a",{id:"factory-trust-proxy"}),(0,r.kt)("p",null,"By enabling the ",(0,r.kt)("inlineCode",{parentName:"p"},"trustProxy")," option, Fastify will know that it is sitting behind\na proxy and that the ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Forwarded-*")," header fields may be trusted, which\notherwise may be easily spoofed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = Fastify({ trustProxy: true })\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"false")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"true/false"),": Trust all proxies (",(0,r.kt)("inlineCode",{parentName:"li"},"true"),") or do not trust any proxies\n(",(0,r.kt)("inlineCode",{parentName:"li"},"false"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string"),": Trust only given IP/CIDR (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"'127.0.0.1'"),"). May be a list of\ncomma separated values (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"'127.0.0.1,192.168.1.1/24'"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Array<string>"),": Trust only given IP/CIDR list (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"['127.0.0.1']"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"number"),": Trust the nth hop from the front-facing proxy server as the client."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Function"),": Custom trust function that takes ",(0,r.kt)("inlineCode",{parentName:"li"},"address")," as first arg",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function myTrustFn(address, hop) {\n  return address === '1.2.3.4' || hop === 1\n}\n")))),(0,r.kt)("p",null,"For more examples, refer to the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/proxy-addr"},(0,r.kt)("inlineCode",{parentName:"a"},"proxy-addr"))," package."),(0,r.kt)("p",null,"You may access the ",(0,r.kt)("inlineCode",{parentName:"p"},"ip"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ips"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"hostname")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"protocol")," values on the\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Request"},(0,r.kt)("inlineCode",{parentName:"a"},"request"))," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', (request, reply) => {\n  console.log(request.ip)\n  console.log(request.ips)\n  console.log(request.hostname)\n  console.log(request.protocol)\n})\n")),(0,r.kt)("p",null,"**Note: if a request contains multiple ",(0,r.kt)("code",null,"x-forwarded-host")," or"),(0,r.kt)("code",null,"x-forwarded-proto")," headers, it is only the last one that is used to derive ",(0,r.kt)("code",null,"request.hostname")," and ",(0,r.kt)("code",null,"request.protocol"),"**",(0,r.kt)("h3",{id:"plugintimeout"},(0,r.kt)("inlineCode",{parentName:"h3"},"pluginTimeout")),(0,r.kt)("a",{id:"plugin-timeout"}),(0,r.kt)("p",null,"The maximum amount of time in ",(0,r.kt)("em",{parentName:"p"},"milliseconds")," in which a plugin can load. If not,\n",(0,r.kt)("a",{parentName:"p",href:"#ready"},(0,r.kt)("inlineCode",{parentName:"a"},"ready"))," will complete with an ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," with code\n",(0,r.kt)("inlineCode",{parentName:"p"},"'ERR_AVVIO_PLUGIN_TIMEOUT'"),". When set to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", disables this check. This\ncontrols ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/avvio"},"avvio")," 's ",(0,r.kt)("inlineCode",{parentName:"p"},"timeout")," parameter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"10000"))),(0,r.kt)("h3",{id:"querystringparser"},(0,r.kt)("inlineCode",{parentName:"h3"},"querystringParser")),(0,r.kt)("a",{id:"factory-querystring-parser"}),(0,r.kt)("p",null,"The default query string parser that Fastify uses is the Node.js's core\n",(0,r.kt)("inlineCode",{parentName:"p"},"querystring")," module."),(0,r.kt)("p",null,"You can change this default setting by passing the option ",(0,r.kt)("inlineCode",{parentName:"p"},"querystringParser"),"\nand use a custom one, such as ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/qs"},(0,r.kt)("inlineCode",{parentName:"a"},"qs")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const qs = require('qs')\nconst fastify = require('fastify')({\n  querystringParser: str => qs.parse(str)\n})\n")),(0,r.kt)("p",null,"You can also use Fastify's default parser but change some handling behaviour,\nlike the example below for case insensitive keys and values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const querystring = require('querystring')\nconst fastify = require('fastify')({\n  querystringParser: str => querystring.parse(str.toLowerCase())\n})\n")),(0,r.kt)("p",null,"Note, if you only want the keys (and not the values) to be case insensitive we\nrecommend using a custom parser to convert only the keys to lowercase."),(0,r.kt)("h3",{id:"exposeheadroutes"},(0,r.kt)("inlineCode",{parentName:"h3"},"exposeHeadRoutes")),(0,r.kt)("a",{id:"exposeHeadRoutes"}),(0,r.kt)("p",null,"Automatically creates a sibling ",(0,r.kt)("inlineCode",{parentName:"p"},"HEAD")," route for each ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," route defined. If\nyou want a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"HEAD")," handler without disabling this option, make sure to\ndefine it before the ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," route."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"true"))),(0,r.kt)("h3",{id:"constraints"},(0,r.kt)("inlineCode",{parentName:"h3"},"constraints")),(0,r.kt)("a",{id:"constraints"}),(0,r.kt)("p",null,"Fastify's built in route constraints are provided by ",(0,r.kt)("inlineCode",{parentName:"p"},"find-my-way"),", which allow\nconstraining routes by ",(0,r.kt)("inlineCode",{parentName:"p"},"version")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"host"),". You are able to add new constraint\nstrategies, or override the built in strategies by providing a ",(0,r.kt)("inlineCode",{parentName:"p"},"constraints"),"\nobject with strategies for ",(0,r.kt)("inlineCode",{parentName:"p"},"find-my-way"),". You can find more information on\nconstraint strategies in the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/delvedor/find-my-way"},"find-my-way")," documentation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const customVersionStrategy = {\n  storage: function () {\n    const versions = {}\n    return {\n      get: (version) => { return versions[version] || null },\n      set: (version, store) => { versions[version] = store }\n    }\n  },\n  deriveVersion: (req, ctx) => {\n    return req.headers['accept']\n  }\n}\n\nconst fastify = require('fastify')({\n  constraints: {\n    version: customVersionStrategy\n  }\n})\n")),(0,r.kt)("h3",{id:"return503onclosing"},(0,r.kt)("inlineCode",{parentName:"h3"},"return503OnClosing")),(0,r.kt)("a",{id:"factory-return-503-on-closing"}),(0,r.kt)("p",null,"Returns 503 after calling ",(0,r.kt)("inlineCode",{parentName:"p"},"close")," server method. If ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", the server routes\nthe incoming request as usual."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"true"))),(0,r.kt)("h3",{id:"ajv"},(0,r.kt)("inlineCode",{parentName:"h3"},"ajv")),(0,r.kt)("a",{id:"factory-ajv"}),(0,r.kt)("p",null,"Configure the Ajv v8 instance used by Fastify without providing a custom one.\nThe default configuration is explained in the\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Validation-and-Serialization#schema-validator"},"#schema-validator")," section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  ajv: {\n    customOptions: {\n      removeAdditional: 'all' // Refer to [ajv options](https://ajv.js.org/#options)\n    },\n    plugins: [\n      require('ajv-merge-patch'),\n      [require('ajv-keywords'), 'instanceof']\n      // Usage: [plugin, pluginOptions] - Plugin with options\n      // Usage: plugin - Plugin without options\n    ]\n  }\n})\n")),(0,r.kt)("h3",{id:"serializeropts"},(0,r.kt)("inlineCode",{parentName:"h3"},"serializerOpts")),(0,r.kt)("a",{id:"serializer-opts"}),(0,r.kt)("p",null,"Customize the options of the default\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fast-json-stringify#options"},(0,r.kt)("inlineCode",{parentName:"a"},"fast-json-stringify")),"\ninstance that serialize the response's payload:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  serializerOpts: {\n    rounding: 'ceil'\n  }\n})\n")),(0,r.kt)("h3",{id:"http2sessiontimeout"},(0,r.kt)("inlineCode",{parentName:"h3"},"http2SessionTimeout")),(0,r.kt)("a",{id:"http2-session-timeout"}),(0,r.kt)("p",null,"Set a default\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http2.html#http2_http2session_settimeout_msecs_callback"},"timeout"),"\nto every incoming HTTP/2 session. The session will be closed on the timeout.\nDefault: ",(0,r.kt)("inlineCode",{parentName:"p"},"72000")," ms."),(0,r.kt)("p",null,'Note that this is needed to offer the graceful "close" experience when using\nHTTP/2. The low default has been chosen to mitigate denial of service attacks.\nWhen the server is behind a load balancer or can scale automatically this value\ncan be increased to fit the use case. Node core defaults this to ',(0,r.kt)("inlineCode",{parentName:"p"},"0"),". `"),(0,r.kt)("h3",{id:"frameworkerrors"},(0,r.kt)("inlineCode",{parentName:"h3"},"frameworkErrors")),(0,r.kt)("a",{id:"framework-errors"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"null"))),(0,r.kt)("p",null,"Fastify provides default error handlers for the most common use cases. It is\npossible to override one or more of those handlers with custom code using this\noption."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Only ",(0,r.kt)("inlineCode",{parentName:"em"},"FST_ERR_BAD_URL")," is implemented at the moment.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const fastify = require(\'fastify\')({\n  frameworkErrors: function (error, req, res) {\n    if (error instanceof FST_ERR_BAD_URL) {\n      res.code(400)\n      return res.send("Provided url is not valid")\n    } else if(error instanceof FST_ERR_ASYNC_CONSTRAINT) {\n      res.code(400)\n      return res.send("Provided header is not valid")\n    } else {\n      res.send(err)\n    }\n  }\n})\n')),(0,r.kt)("h3",{id:"clienterrorhandler"},(0,r.kt)("inlineCode",{parentName:"h3"},"clientErrorHandler")),(0,r.kt)("a",{id:"client-error-handler"}),(0,r.kt)("p",null,"Set a\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http.html#http_event_clienterror"},"clientErrorHandler"),"\nthat listens to ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," events emitted by client connections and responds with a\n",(0,r.kt)("inlineCode",{parentName:"p"},"400"),"."),(0,r.kt)("p",null,"It is possible to override the default ",(0,r.kt)("inlineCode",{parentName:"p"},"clientErrorHandler")," using this option."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function defaultClientErrorHandler (err, socket) {\n  if (err.code === 'ECONNRESET') {\n    return\n  }\n\n  const body = JSON.stringify({\n    error: http.STATUS_CODES['400'],\n    message: 'Client Error',\n    statusCode: 400\n  })\n  this.log.trace({ err }, 'client error')\n\n  if (socket.writable) {\n    socket.end([\n      'HTTP/1.1 400 Bad Request',\n      `Content-Length: ${body.length}`,\n      `Content-Type: application/json\\r\\n\\r\\n${body}`\n    ].join('\\r\\n'))\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: ",(0,r.kt)("inlineCode",{parentName:"em"},"clientErrorHandler")," operates with raw socket. The handler is expected to\nreturn a properly formed HTTP response that includes a status line, HTTP headers\nand a message body. Before attempting to write the socket, the handler should\ncheck if the socket is still writable as it may have already been destroyed.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  clientErrorHandler: function (err, socket) {\n    const body = JSON.stringify({\n      error: {\n        message: 'Client error',\n        code: '400'\n      }\n    })\n\n    // `this` is bound to fastify instance\n    this.log.trace({ err }, 'client error')\n\n    // the handler is responsible for generating a valid HTTP response\n    socket.end([\n      'HTTP/1.1 400 Bad Request',\n      `Content-Length: ${body.length}`,\n      `Content-Type: application/json\\r\\n\\r\\n${body}`\n    ].join('\\r\\n'))\n  }\n})\n")),(0,r.kt)("h3",{id:"rewriteurl"},(0,r.kt)("inlineCode",{parentName:"h3"},"rewriteUrl")),(0,r.kt)("a",{id:"rewrite-url"}),(0,r.kt)("p",null,"Set a sync callback function that must return a string that allows rewriting\nURLs."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Rewriting a URL will modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"req")," object")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function rewriteUrl (req) { // req is the Node.js HTTP request\n  return req.url === '/hi' ? '/hello' : req.url;\n}\n")),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"rewriteUrl")," is called ",(0,r.kt)("em",{parentName:"p"},"before")," routing, it is not encapsulated and it\nis an instance-wide configuration."),(0,r.kt)("h2",{id:"instance"},"Instance"),(0,r.kt)("h3",{id:"server-methods"},"Server Methods"),(0,r.kt)("h4",{id:"server"},"server"),(0,r.kt)("a",{id:"server"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.server"),": The Node core\n",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http.html#http_class_http_server"},"server")," object as\nreturned by the ",(0,r.kt)("a",{parentName:"p",href:"#factory"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"Fastify factory function"))),"."),(0,r.kt)("h4",{id:"after"},"after"),(0,r.kt)("a",{id:"after"}),(0,r.kt)("p",null,"Invoked when the current plugin and all the plugins that have been registered\nwithin it have finished loading. It is always executed before the method\n",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.ready"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify\n  .register((instance, opts, done) => {\n    console.log('Current plugin')\n    done()\n  })\n  .after(err => {\n    console.log('After current plugin')\n  })\n  .register((instance, opts, done) => {\n    console.log('Next plugin')\n    done()\n  })\n  .ready(err => {\n    console.log('Everything has been loaded')\n  })\n")),(0,r.kt)("p",null,"In case ",(0,r.kt)("inlineCode",{parentName:"p"},"after()")," is called without a function, it returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.register(async (instance, opts) => {\n  console.log('Current plugin')\n})\n\nawait fastify.after()\nconsole.log('After current plugin')\n\nfastify.register(async (instance, opts) => {\n  console.log('Next plugin')\n})\n\nawait fastify.ready()\n\nconsole.log('Everything has been loaded')\n")),(0,r.kt)("h4",{id:"ready"},"ready"),(0,r.kt)("a",{id:"ready"}),(0,r.kt)("p",null,"Function called when all the plugins have been loaded. It takes an error\nparameter if something went wrong."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.ready(err => {\n  if (err) throw err\n})\n")),(0,r.kt)("p",null,"If it is called without any arguments, it will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.ready().then(() => {\n  console.log('successfully booted!')\n}, (err) => {\n  console.log('an error happened', err)\n})\n")),(0,r.kt)("h4",{id:"listen"},"listen"),(0,r.kt)("a",{id:"listen"}),(0,r.kt)("p",null,"Starts the server and internally waits for the ",(0,r.kt)("inlineCode",{parentName:"p"},".ready()")," event. The signature\nis ",(0,r.kt)("inlineCode",{parentName:"p"},".listen([options][, callback])"),". Both the ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," object and the\n",(0,r.kt)("inlineCode",{parentName:"p"},"callback")," parameters follow the ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/net.html#serverlistenoptions-callback"},"Node.js\ncore")," parameter\ndefinitions."),(0,r.kt)("p",null,"By default, the server will listen on the address(es) resolved by ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost"),"\nwhen no specific host is provided. If listening on any available interface is\ndesired, then specifying ",(0,r.kt)("inlineCode",{parentName:"p"},"0.0.0.0")," for the address will listen on all IPv4\naddresses. The following table details the possible values for ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," when\ntargeting ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost"),", and what the result of those values for ",(0,r.kt)("inlineCode",{parentName:"p"},"host")," will be."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Host"),(0,r.kt)("th",{parentName:"tr",align:null},"IPv4"),(0,r.kt)("th",{parentName:"tr",align:null},"IPv6"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"::")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705",(0,r.kt)("sup",null,"*")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"::")," + ",(0,r.kt)("a",{parentName:"td",href:"https://nodejs.org/api/net.html#serverlistenoptions-callback"},(0,r.kt)("inlineCode",{parentName:"a"},"ipv6Only"))),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83d\udeab"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.0.0.0")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83d\udeab")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"localhost")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"127.0.0.1")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83d\udeab")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"::1")),(0,r.kt)("td",{parentName:"tr",align:null},"\ud83d\udeab"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")))),(0,r.kt)("sup",null,"*")," Using `::` for the address will listen on all IPv6 addresses and, depending on OS, may also listen on [all IPv4 addresses](https://nodejs.org/api/net.html#serverlistenport-host-backlog-callback).",(0,r.kt)("p",null,"Be careful when deciding to listen on all interfaces; it comes with inherent\n",(0,r.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20170831174611/https://snyk.io/blog/mongodb-hack-and-secure-defaults/"},"security\nrisks"),"."),(0,r.kt)("p",null,"The default is to listen on ",(0,r.kt)("inlineCode",{parentName:"p"},"port: 0")," (which picks the first available open\nport) and ",(0,r.kt)("inlineCode",{parentName:"p"},"host: 'localhost'"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.listen((err, address) => {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n})\n")),(0,r.kt)("p",null,"Specifying an address is also supported:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.listen({ port: 3000, host: '127.0.0.1' }, (err, address) => {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n})\n")),(0,r.kt)("p",null,"If no callback is provided a Promise is returned:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.listen({ port: 3000 })\n  .then((address) => console.log(`server listening on ${address}`))\n  .catch(err => {\n    console.log('Error starting server:', err)\n    process.exit(1)\n  })\n")),(0,r.kt)("p",null,"When deploying to a Docker, and potentially other, containers, it is advisable\nto listen on ",(0,r.kt)("inlineCode",{parentName:"p"},"0.0.0.0")," because they do not default to exposing mapped ports to\n",(0,r.kt)("inlineCode",{parentName:"p"},"localhost"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.listen({ port: 3000, host: '0.0.0.0' }, (err, address) => {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n})\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"port")," is omitted (or is set to zero), a random available port is\nautomatically chosen (available via ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.server.address().port"),")."),(0,r.kt)("p",null,"The default options of listen are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.listen({\n  port: 0,\n  host: 'localhost',\n  exclusive: false,\n  readableAll: false,\n  writableAll: false,\n  ipv6Only: false\n}, (err) => {})\n")),(0,r.kt)("h4",{id:"addresses"},"addresses"),(0,r.kt)("a",{id:"addresses"}),(0,r.kt)("p",null,"This method returns an array of addresses that the server is listening on. If\nyou call it before ",(0,r.kt)("inlineCode",{parentName:"p"},"listen()")," is called or after the ",(0,r.kt)("inlineCode",{parentName:"p"},"close()")," function, it will\nreturn an empty array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await fastify.listen({ port: 8080 })\nconst addresses = fastify.addresses()\n// [\n//   { port: 8080, family: 'IPv6', address: '::1' },\n//   { port: 8080, family: 'IPv4', address: '127.0.0.1' }\n// ]\n")),(0,r.kt)("p",null,"Note that the array contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.server.address()")," too."),(0,r.kt)("h4",{id:"getdefaultroute"},"getDefaultRoute"),(0,r.kt)("a",{id:"getDefaultRoute"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultRoute")," handler handles requests that do not match any URL specified\nby your Fastify application. This defaults to the 404 handler, but can be\noverridden with ",(0,r.kt)("a",{parentName:"p",href:"#setdefaultroute"},"setDefaultRoute"),". Method to get the\n",(0,r.kt)("inlineCode",{parentName:"p"},"defaultRoute")," for the server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const defaultRoute = fastify.getDefaultRoute()\n")),(0,r.kt)("h4",{id:"setdefaultroute"},"setDefaultRoute"),(0,r.kt)("a",{id:"setDefaultRoute"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": The default 404 handler, or one set using ",(0,r.kt)("inlineCode",{parentName:"p"},"setNotFoundHandler"),", will\nnever trigger if the default route is overridden. This sets the handler for the\nFastify application, not just the current instance context. Use\n",(0,r.kt)("a",{parentName:"p",href:"#setnotfoundhandler"},"setNotFoundHandler")," if you want to customize 404 handling\ninstead. Method to set the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultRoute")," for the server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const defaultRoute = function (req, res) {\n  res.end('hello world')\n}\n\nfastify.setDefaultRoute(defaultRoute)\n")),(0,r.kt)("h4",{id:"routing"},"routing"),(0,r.kt)("a",{id:"routing"}),(0,r.kt)("p",null,"Method to access the ",(0,r.kt)("inlineCode",{parentName:"p"},"lookup")," method of the internal router and match the\nrequest to the appropriate handler:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.routing(req, res)\n")),(0,r.kt)("h4",{id:"route"},"route"),(0,r.kt)("a",{id:"route"}),(0,r.kt)("p",null,"Method to add routes to the server, it also has shorthand functions, check\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Routes"},"here"),"."),(0,r.kt)("h4",{id:"hasroute"},"hasRoute"),(0,r.kt)("a",{id:"hasRoute"}),(0,r.kt)("p",null,"Method to check if a route is already registered to the internal router. It\nexpects an object as payload. ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"method")," are mandatory fields. It is\npossible to also specify ",(0,r.kt)("inlineCode",{parentName:"p"},"constraints"),". The method returns true if the route is\nregistered, and false if it is not registered."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const routeExists = fastify.hasRoute({\n  url: '/',\n  method: 'GET',\n  constraints: { version: '1.0.0' } // optional\n})\n\nif (routeExists === false) {\n  // add route\n}\n")),(0,r.kt)("h4",{id:"close"},"close"),(0,r.kt)("a",{id:"close"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.close(callback)"),": call this function to close the server instance and\nrun the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Hooks#on-close"},(0,r.kt)("inlineCode",{parentName:"a"},"'onClose'"))," hook."),(0,r.kt)("p",null,"Calling ",(0,r.kt)("inlineCode",{parentName:"p"},"close")," will also cause the server to respond to every new incoming\nrequest with a ",(0,r.kt)("inlineCode",{parentName:"p"},"503")," error and destroy that request. See ",(0,r.kt)("a",{parentName:"p",href:"#factory-return-503-on-closing"},(0,r.kt)("inlineCode",{parentName:"a"},"return503OnClosing"),"\nflags")," for changing this behavior."),(0,r.kt)("p",null,"If it is called without any arguments, it will return a Promise:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.close().then(() => {\n  console.log('successfully closed!')\n}, (err) => {\n  console.log('an error happened', err)\n})\n")),(0,r.kt)("h4",{id:"decorate"},"decorate*"),(0,r.kt)("a",{id:"decorate"}),(0,r.kt)("p",null,"Function useful if you need to decorate the fastify instance, Reply or Request,\ncheck ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Decorators"},"here"),"."),(0,r.kt)("h4",{id:"register"},"register"),(0,r.kt)("a",{id:"register"}),(0,r.kt)("p",null,"Fastify allows the user to extend its functionality with plugins. A plugin can\nbe a set of routes, a server decorator, or whatever, check ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Plugins"},"here"),"."),(0,r.kt)("h4",{id:"addhook"},"addHook"),(0,r.kt)("a",{id:"addHook"}),(0,r.kt)("p",null,"Function to add a specific hook in the lifecycle of Fastify, check\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Hooks"},"here"),"."),(0,r.kt)("h4",{id:"prefix"},"prefix"),(0,r.kt)("a",{id:"prefix"}),(0,r.kt)("p",null,"The full path that will be prefixed to a route."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.register(function (instance, opts, done) {\n  instance.get('/foo', function (request, reply) {\n    // Will log \"prefix: /v1\"\n    request.log.info('prefix: %s', instance.prefix)\n    reply.send({ prefix: instance.prefix })\n  })\n\n  instance.register(function (instance, opts, done) {\n    instance.get('/bar', function (request, reply) {\n      // Will log \"prefix: /v1/v2\"\n      request.log.info('prefix: %s', instance.prefix)\n      reply.send({ prefix: instance.prefix })\n    })\n\n    done()\n  }, { prefix: '/v2' })\n\n  done()\n}, { prefix: '/v1' })\n")),(0,r.kt)("h4",{id:"pluginname"},"pluginName"),(0,r.kt)("a",{id:"pluginName"}),(0,r.kt)("p",null,"Name of the current plugin. The root plugin is called ",(0,r.kt)("inlineCode",{parentName:"p"},"'fastify'"),". There are\ndifferent ways to define a name (in order)."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If you use ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/fastify/fastify-plugin"},"fastify-plugin")," the\nmetadata ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," is used."),(0,r.kt)("li",{parentName:"ol"},"If the exported plugin has the ",(0,r.kt)("inlineCode",{parentName:"li"},"Symbol.for('fastify.display-name')")," property,\nthen the value of that property is used.\nExample: ",(0,r.kt)("inlineCode",{parentName:"li"},"pluginFn[Symbol.for('fastify.display-name')] = \"Custom Name\"")),(0,r.kt)("li",{parentName:"ol"},"If you ",(0,r.kt)("inlineCode",{parentName:"li"},"module.exports")," a plugin the filename is used."),(0,r.kt)("li",{parentName:"ol"},"If you use a regular ",(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#Defining_functions"},"function\ndeclaration"),"\nthe function name is used.")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Fallback"),": The first two lines of your plugin will represent the plugin name.\nNewlines are replaced by ",(0,r.kt)("inlineCode",{parentName:"p"},"--"),". This will help to identify the root cause when\nyou deal with many plugins."),(0,r.kt)("p",null,"Important: If you have to deal with nested plugins, the name differs with the\nusage of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-plugin"},"fastify-plugin")," because\nno new scope is created and therefore we have no place to attach contextual\ndata. In that case, the plugin name will represent the boot order of all\ninvolved plugins in the format of ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify -> plugin-A -> plugin-B"),"."),(0,r.kt)("h4",{id:"hasplugin"},"hasPlugin"),(0,r.kt)("a",{id:"hasPlugin"}),(0,r.kt)("p",null,"Method to check if a specific plugin has been registered. Relies on the plugin\nmetadata name. Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the plugin is registered. Otherwise, returns\n",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')()\nfastify.register(require('@fastify/cookie'), {\n  secret: 'my-secret',\n  parseOptions: {}\n})\n\nfastify.ready(() => {\n  fastify.hasPlugin('@fastify/cookie') // true\n})\n")),(0,r.kt)("h4",{id:"log"},"log"),(0,r.kt)("a",{id:"log"}),(0,r.kt)("p",null,"The logger instance, check ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Logging"},"here"),"."),(0,r.kt)("h4",{id:"version"},"version"),(0,r.kt)("a",{id:"version"}),(0,r.kt)("p",null,"Fastify version of the instance. Used for plugin support. See\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Plugins#handle-the-scope"},"Plugins")," for information on how the version is\nused by plugins."),(0,r.kt)("h4",{id:"inject"},"inject"),(0,r.kt)("a",{id:"inject"}),(0,r.kt)("p",null,"Fake HTTP injection (for testing purposes)\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Guides/Testing#benefits-of-using-fastifyinject"},"here"),"."),(0,r.kt)("h4",{id:"addschema"},"addSchema"),(0,r.kt)("a",{id:"add-schema"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.addSchema(schemaObj)"),", adds a JSON schema to the Fastify instance. This\nallows you to reuse it everywhere in your application just by using the standard\n",(0,r.kt)("inlineCode",{parentName:"p"},"$ref")," keyword."),(0,r.kt)("p",null,"To learn more, read the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Validation-and-Serialization"},"Validation and\nSerialization")," documentation."),(0,r.kt)("h4",{id:"getschemas"},"getSchemas"),(0,r.kt)("a",{id:"get-schemas"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.getSchemas()"),", returns a hash of all schemas added via ",(0,r.kt)("inlineCode",{parentName:"p"},".addSchema"),".\nThe keys of the hash are the ",(0,r.kt)("inlineCode",{parentName:"p"},"$id"),"s of the JSON Schema provided."),(0,r.kt)("h4",{id:"getschema"},"getSchema"),(0,r.kt)("a",{id:"get-schema"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.getSchema(id)"),", return the JSON schema added with ",(0,r.kt)("inlineCode",{parentName:"p"},".addSchema")," and the\nmatching ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". It returns ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," if it is not found."),(0,r.kt)("h4",{id:"setreplyserializer"},"setReplySerializer"),(0,r.kt)("a",{id:"set-reply-serializer"}),(0,r.kt)("p",null,"Set the reply serializer for all the routes. This will be used as default if a\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Reply#serializerfunc"},"Reply.serializer(func)")," has not been set. The\nhandler is fully encapsulated, so different plugins can set different error\nhandlers. Note: the function parameter is called only for status ",(0,r.kt)("inlineCode",{parentName:"p"},"2xx"),". Check\nout the ",(0,r.kt)("a",{parentName:"p",href:"#seterrorhandler"},(0,r.kt)("inlineCode",{parentName:"a"},"setErrorHandler"))," for errors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.setReplySerializer(function (payload, statusCode){\n  // serialize the payload with a sync function\n  return `my serialized ${statusCode} content: ${payload}`\n})\n")),(0,r.kt)("h4",{id:"setvalidatorcompiler"},"setValidatorCompiler"),(0,r.kt)("a",{id:"set-validator-compiler"}),(0,r.kt)("p",null,"Set the schema validator compiler for all routes. See\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Validation-and-Serialization#schema-validator"},"#schema-validator"),"."),(0,r.kt)("h4",{id:"setschemaerrorformatter"},"setSchemaErrorFormatter"),(0,r.kt)("a",{id:"set-schema-error-formatter"}),(0,r.kt)("p",null,"Set the schema error formatter for all routes. See\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Validation-and-Serialization#schemaerrorformatter"},"#error-handling"),"."),(0,r.kt)("h4",{id:"setserializercompiler"},"setSerializerCompiler"),(0,r.kt)("a",{id:"set-serializer-resolver"}),(0,r.kt)("p",null,"Set the schema serializer compiler for all routes. See\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Validation-and-Serialization#schema-serializer"},"#schema-serializer"),".\n",(0,r.kt)("strong",{parentName:"p"},"Note:")," ",(0,r.kt)("a",{parentName:"p",href:"#set-reply-serializer"},(0,r.kt)("inlineCode",{parentName:"a"},"setReplySerializer"))," has priority if set!"),(0,r.kt)("h4",{id:"validatorcompiler"},"validatorCompiler"),(0,r.kt)("a",{id:"validator-compiler"}),(0,r.kt)("p",null,"This property can be used to get the schema validator. If not set, it will be\n",(0,r.kt)("inlineCode",{parentName:"p"},"null")," until the server starts, then it will be a function with the signature\n",(0,r.kt)("inlineCode",{parentName:"p"},"function ({ schema, method, url, httpPart })")," that returns the input ",(0,r.kt)("inlineCode",{parentName:"p"},"schema"),"\ncompiled to a function for validating data. The input ",(0,r.kt)("inlineCode",{parentName:"p"},"schema")," can access all\nthe shared schemas added with ",(0,r.kt)("a",{parentName:"p",href:"#add-schema"},(0,r.kt)("inlineCode",{parentName:"a"},".addSchema"))," function."),(0,r.kt)("h4",{id:"serializercompiler"},"serializerCompiler"),(0,r.kt)("a",{id:"serializer-compiler"}),(0,r.kt)("p",null,"This property can be used to get the schema serializer. If not set, it will be\n",(0,r.kt)("inlineCode",{parentName:"p"},"null")," until the server starts, then it will be a function with the signature\n",(0,r.kt)("inlineCode",{parentName:"p"},"function ({ schema, method, url, httpPart })")," that returns the input ",(0,r.kt)("inlineCode",{parentName:"p"},"schema"),"\ncompiled to a function for validating data. The input ",(0,r.kt)("inlineCode",{parentName:"p"},"schema")," can access all\nthe shared schemas added with ",(0,r.kt)("a",{parentName:"p",href:"#add-schema"},(0,r.kt)("inlineCode",{parentName:"a"},".addSchema"))," function."),(0,r.kt)("h4",{id:"schemaerrorformatter"},"schemaErrorFormatter"),(0,r.kt)("a",{id:"schema-error-formatter"}),(0,r.kt)("p",null,"This property can be used to set a function to format errors that happen while\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"validationCompiler")," fails to validate the schema. See\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Validation-and-Serialization#schemaerrorformatter"},"#error-handling"),"."),(0,r.kt)("h4",{id:"schemacontroller"},"schemaController"),(0,r.kt)("a",{id:"schema-controller"}),(0,r.kt)("p",null,"This property can be used to fully manage:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bucket"),": where the schemas of your application will be stored"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"compilersFactory"),": what module must compile the JSON schemas")),(0,r.kt)("p",null,"It can be useful when your schemas are stored in another data structure that is\nunknown to Fastify. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify/issues/2446"},"issue\n#2446")," for an example of what\nthis property helps to resolve."),(0,r.kt)("p",null,"Another use case is to tweak all the schemas processing. Doing so it is possible\nto use Ajv v8 JTD or Standalone feature. To use such as JTD or the Standalone\nmode, refers to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/ajv-compiler#usage"},(0,r.kt)("inlineCode",{parentName:"a"},"@fastify/ajv-compiler"),"\ndocumentation"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = Fastify({\n  schemaController: {\n    /**\n     * This factory is called whenever `fastify.register()` is called.\n     * It may receive as input the schemas of the parent context if some schemas have been added.\n     * @param {object} parentSchemas these schemas will be returned by the\n     * `getSchemas()` method function of the returned `bucket`.\n     */\n    bucket: function factory (parentSchemas) {\n      return {\n        add (inputSchema) {\n          // This function must store the schema added by the user.\n          // This function is invoked when `fastify.addSchema()` is called.\n        },\n        getSchema (schema$id) {\n          // This function must return the raw schema requested by the `schema$id`.\n          // This function is invoked when `fastify.getSchema(id)` is called.\n          return aSchema\n        },\n        getSchemas () {\n          // This function must return all the schemas referenced by the routes schemas' $ref\n          // It must return a JSON where the property is the schema `$id` and the value is the raw JSON Schema.\n          const allTheSchemaStored = {\n            'schema$id1': schema1,\n            'schema$id2': schema2\n          }\n          return allTheSchemaStored\n        }\n      }\n    },\n\n    /**\n     * The compilers factory let you fully control the validator and serializer\n     * in the Fastify's lifecycle, providing the encapsulation to your compilers.\n     */\n    compilersFactory: {\n      /**\n       * This factory is called whenever a new validator instance is needed.\n       * It may be called whenever `fastify.register()` is called only if new schemas have been added to the\n       * encapsulation context.\n       * It may receive as input the schemas of the parent context if some schemas have been added.\n       * @param {object} externalSchemas these schemas will be returned by the\n       * `bucket.getSchemas()`. Needed to resolve the external references $ref.\n       * @param {object} ajvServerOption the server `ajv` options to build your compilers accordingly\n       */\n      buildValidator: function factory (externalSchemas, ajvServerOption) {\n        // This factory function must return a schema validator compiler.\n        // See [#schema-validator](./Validation-and-Serialization.md#schema-validator) for details.\n        const yourAjvInstance = new Ajv(ajvServerOption.customOptions)\n        return function validatorCompiler ({ schema, method, url, httpPart }) {\n          return yourAjvInstance.compile(schema)\n        }\n      },\n\n      /**\n       * This factory is called whenever a new serializer instance is needed.\n       * It may be called whenever `fastify.register()` is called only if new schemas have been added to the\n       * encapsulation context.\n       * It may receive as input the schemas of the parent context if some schemas have been added.\n       * @param {object} externalSchemas these schemas will be returned by the\n       * `bucket.getSchemas()`. Needed to resolve the external references $ref.\n       * @param {object} serializerOptsServerOption the server `serializerOpts`\n       * options to build your compilers accordingly\n       */\n      buildSerializer: function factory (externalSchemas, serializerOptsServerOption) {\n        // This factory function must return a schema serializer compiler.\n        // See [#schema-serializer](./Validation-and-Serialization.md#schema-serializer) for details.\n        return function serializerCompiler ({ schema, method, url, httpStatus, contentType }) {\n          return data => JSON.stringify(data)\n        }\n      }\n    }\n  }\n});\n")),(0,r.kt)("h4",{id:"setnotfoundhandler"},"setNotFoundHandler"),(0,r.kt)("a",{id:"set-not-found-handler"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.setNotFoundHandler(handler(request, reply))"),": set the 404 handler. This\ncall is encapsulated by prefix, so different plugins can set different not found\nhandlers if a different ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Plugins#route-prefixing-option"},(0,r.kt)("inlineCode",{parentName:"a"},"prefix")," option"),"\nis passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.register()"),". The handler is treated as a regular route\nhandler so requests will go through the full ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Lifecycle#lifecycle"},"Fastify\nlifecycle"),". ",(0,r.kt)("em",{parentName:"p"},"async-await")," is supported as well."),(0,r.kt)("p",null,"You can also register ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Hooks#route-hooks"},(0,r.kt)("inlineCode",{parentName:"a"},"preValidation"))," and\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Hooks#route-hooks"},(0,r.kt)("inlineCode",{parentName:"a"},"preHandler"))," hooks for the 404 handler."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: The ",(0,r.kt)("inlineCode",{parentName:"em"},"preValidation")," hook registered using this method will run for a\nroute that Fastify does not recognize and ",(0,r.kt)("strong",{parentName:"em"},"not")," when a route handler manually\ncalls ",(0,r.kt)("a",{parentName:"em",href:"/website-next/docs/v4.9.x/Reference/Reply#call-not-found"},(0,r.kt)("inlineCode",{parentName:"a"},"reply.callNotFound"))),". In which case, only\npreHandler will be run."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.setNotFoundHandler({\n  preValidation: (req, reply, done) => {\n    // your code\n    done()\n  },\n  preHandler: (req, reply, done) => {\n    // your code\n    done()\n  }\n}, function (request, reply) {\n    // Default not found handler with preValidation and preHandler hooks\n})\n\nfastify.register(function (instance, options, done) {\n  instance.setNotFoundHandler(function (request, reply) {\n    // Handle not found request without preValidation and preHandler hooks\n    // to URLs that begin with '/v1'\n  })\n  done()\n}, { prefix: '/v1' })\n")),(0,r.kt)("p",null,"Fastify calls setNotFoundHandler to add a default 404 handler at startup before\nplugins are registered. If you would like to augment the behavior of the default\n404 handler, for example with plugins, you can call setNotFoundHandler with no\narguments ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.setNotFoundHandler()")," within the context of these registered\nplugins."),(0,r.kt)("h4",{id:"seterrorhandler"},"setErrorHandler"),(0,r.kt)("a",{id:"set-error-handler"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.setErrorHandler(handler(error, request, reply))"),": Set a function that\nwill be called whenever an error happens. The handler is bound to the Fastify\ninstance and is fully encapsulated, so different plugins can set different error\nhandlers. ",(0,r.kt)("em",{parentName:"p"},"async-await")," is supported as well."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: If the error ",(0,r.kt)("inlineCode",{parentName:"em"},"statusCode")," is less than 400, Fastify will automatically\nset it at 500 before calling the error handler.")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Also note")," that ",(0,r.kt)("inlineCode",{parentName:"p"},"setErrorHandler")," will ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"not"))," catch any error inside\nan ",(0,r.kt)("inlineCode",{parentName:"p"},"onResponse")," hook because the response has already been sent to the client."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.setErrorHandler(function (error, request, reply) {\n  // Log error\n  this.log.error(error)\n  // Send error response\n  reply.status(409).send({ ok: false })\n})\n")),(0,r.kt)("p",null,"Fastify is provided with a default function that is called if no error handler\nis set. It can be accessed using ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.errorHandler")," and it logs the error\nwith respect to its ",(0,r.kt)("inlineCode",{parentName:"p"},"statusCode"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var statusCode = error.statusCode\nif (statusCode >= 500) {\n  log.error(error)\n} else if (statusCode >= 400) {\n  log.info(error)\n} else {\n  log.error(error)\n}\n")),(0,r.kt)("h4",{id:"addconstraintstrategy"},"addConstraintStrategy"),(0,r.kt)("a",{id:"addConstraintStrategy"}),(0,r.kt)("p",null,"Function to add a custom constraint strategy. To register a new type of\nconstraint, you must add a new constraint strategy that knows how to match\nvalues to handlers, and that knows how to get the constraint value from a\nrequest."),(0,r.kt)("p",null,"Add a custom constraint strategy using the ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.addConstraintStrategy"),"\nmethod:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const customResponseTypeStrategy = {\n  // strategy name for referencing in the route handler `constraints` options\n  name: 'accept',\n  // storage factory for storing routes in the find-my-way route tree\n  storage: function () {\n    let handlers = {}\n    return {\n      get: (type) => { return handlers[type] || null },\n      set: (type, store) => { handlers[type] = store }\n    }\n  },\n  // function to get the value of the constraint from each incoming request\n  deriveConstraint: (req, ctx) => {\n    return req.headers['accept']\n  },\n  // optional flag marking if handlers without constraints can match requests that have a value for this constraint\n  mustMatchWhenDerived: true\n}\n\nconst router = Fastify();\nrouter.addConstraintStrategy(customResponseTypeStrategy);\n")),(0,r.kt)("h4",{id:"hasconstraintstrategy"},"hasConstraintStrategy"),(0,r.kt)("a",{id:"hasConstraintStrategy"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.hasConstraintStrategy(strategyName)")," checks if there already exists\na custom constraint strategy with the same name."),(0,r.kt)("h4",{id:"printroutes"},"printRoutes"),(0,r.kt)("a",{id:"print-routes"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.printRoutes()"),": Prints the representation of the internal radix tree\nused by the router, useful for debugging. Alternatively, ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.printRoutes({\ncommonPrefix: false })")," can be used to print the flattened routes tree."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Remember to call it inside or after a ",(0,r.kt)("inlineCode",{parentName:"em"},"ready")," call.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/test', () => {})\nfastify.get('/test/hello', () => {})\nfastify.get('/hello/world', () => {})\nfastify.get('/helicopter', () => {})\n\nfastify.ready(() => {\n  console.log(fastify.printRoutes())\n  // \u2514\u2500\u2500 /\n  //     \u251c\u2500\u2500 test (GET)\n  //     \u2502   \u2514\u2500\u2500 /hello (GET)\n  //     \u2514\u2500\u2500 hel\n  //         \u251c\u2500\u2500 lo/world (GET)\n  //         \u2514\u2500\u2500 licopter (GET)\n\n  console.log(fastify.printRoutes({ commonPrefix: false }))\n  // \u2514\u2500\u2500 / (-)\n  //     \u251c\u2500\u2500 test (GET)\n  //     \u2502   \u2514\u2500\u2500 /hello (GET)\n  //     \u251c\u2500\u2500 hello/world (GET)\n  //     \u2514\u2500\u2500 helicopter (GET)\n\n})\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.printRoutes({ includeMeta: (true | []) })")," will display properties from\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"route.store")," object for each displayed route. This can be an ",(0,r.kt)("inlineCode",{parentName:"p"},"array")," of\nkeys (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"['onRequest', Symbol('key')]"),"), or ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to display all properties.\nA shorthand option, ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.printRoutes({ includeHooks: true })")," will include\nall ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/Hooks"},"hooks"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'  console.log(fastify.printRoutes({ includeHooks: true, includeMeta: [\'metaProperty\'] }))\n  // \u2514\u2500\u2500 /\n  //     \u251c\u2500\u2500 test (GET)\n  //     \u2502   \u2022 (onRequest) ["anonymous()","namedFunction()"]\n  //     \u2502   \u2022 (metaProperty) "value"\n  //     \u2502   \u2514\u2500\u2500 /hello (GET)\n  //     \u2514\u2500\u2500 hel\n  //         \u251c\u2500\u2500 lo/world (GET)\n  //         \u2502   \u2022 (onTimeout) ["anonymous()"]\n  //         \u2514\u2500\u2500 licopter (GET)\n\n  console.log(fastify.printRoutes({ includeHooks: true }))\n  // \u2514\u2500\u2500 /\n  //     \u251c\u2500\u2500 test (GET)\n  //     \u2502   \u2022 (onRequest) ["anonymous()","namedFunction()"]\n  //     \u2502   \u2514\u2500\u2500 /hello (GET)\n  //     \u2514\u2500\u2500 hel\n  //         \u251c\u2500\u2500 lo/world (GET)\n  //         \u2502   \u2022 (onTimeout) ["anonymous()"]\n  //         \u2514\u2500\u2500 licopter (GET)\n')),(0,r.kt)("h4",{id:"printplugins"},"printPlugins"),(0,r.kt)("a",{id:"print-plugins"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.printPlugins()"),": Prints the representation of the internal plugin tree\nused by the avvio, useful for debugging require order issues."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Remember to call it inside or after a ",(0,r.kt)("inlineCode",{parentName:"em"},"ready")," call.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.register(async function foo (instance) {\n  instance.register(async function bar () {})\n})\nfastify.register(async function baz () {})\n\nfastify.ready(() => {\n  console.error(fastify.printPlugins())\n  // will output the following to stderr:\n  // \u2514\u2500\u2500 root\n  //     \u251c\u2500\u2500 foo\n  //     \u2502   \u2514\u2500\u2500 bar\n  //     \u2514\u2500\u2500 baz\n})\n")),(0,r.kt)("h4",{id:"addcontenttypeparser"},"addContentTypeParser"),(0,r.kt)("a",{id:"addContentTypeParser"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.addContentTypeParser(content-type, options, parser)")," is used to pass\ncustom parser for a given content type. Useful for adding parsers for custom\ncontent types, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"text/json, application/vnd.oasis.opendocument.text"),".\n",(0,r.kt)("inlineCode",{parentName:"p"},"content-type")," can be a string, string array or RegExp."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// The two arguments passed to getDefaultJsonParser are for ProtoType poisoning\n// and Constructor Poisoning configuration respectively. The possible values are\n// 'ignore', 'remove', 'error'. ignore  skips all validations and it is similar\n// to calling JSON.parse() directly. See the\n// [`secure-json-parse` documentation](https://github.com/fastify/secure-json-parse#api) for more information.\n\nfastify.addContentTypeParser('text/json', { asString: true }, fastify.getDefaultJsonParser('ignore', 'ignore'))\n")),(0,r.kt)("h4",{id:"hascontenttypeparser"},"hasContentTypeParser"),(0,r.kt)("a",{id:"hasContentTypeParser"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.hasContentTypeParser(contentType)")," is used to check whether there is a\ncontent type parser in the current context for the specified content type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.hasContentTypeParser('text/json')\n\nfastify.hasContentTypeParser(/^.+\\/json$/)\n")),(0,r.kt)("h4",{id:"removecontenttypeparser"},"removeContentTypeParser"),(0,r.kt)("a",{id:"removeContentTypeParser"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.removeContentTypeParser(contentType)")," is used to remove content type\nparsers in the current context. This method allows for example to remove the\nboth built-in parsers for ",(0,r.kt)("inlineCode",{parentName:"p"},"application/json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"text/plain"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.removeContentTypeParser('application/json')\n\nfastify.removeContentTypeParser(['application/json', 'text/plain'])\n")),(0,r.kt)("h4",{id:"removeallcontenttypeparsers"},"removeAllContentTypeParsers"),(0,r.kt)("a",{id:"removeAllContentTypeParsers"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.removeAllContentTypeParsers()")," method allows all content type\nparsers in the current context to be removed. A use case of this method is the\nimplementation of catch-all content type parser. Before adding this parser with\n",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.addContentTypeParser()")," one could call the\n",(0,r.kt)("inlineCode",{parentName:"p"},"removeAllContentTypeParsers")," method."),(0,r.kt)("p",null,"For more details about the usage of the different content type parser APIs see\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.9.x/Reference/ContentTypeParser#usage"},"here"),"."),(0,r.kt)("h4",{id:"getdefaultjsonparser"},"getDefaultJsonParser"),(0,r.kt)("a",{id:"getDefaultJsonParser"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.getDefaultJsonParser(onProtoPoisoning, onConstructorPoisoning)")," takes\ntwo arguments. First argument is ProtoType poisoning configuration and second\nargument is constructor poisoning configuration. See the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/secure-json-parse#api"},(0,r.kt)("inlineCode",{parentName:"a"},"secure-json-parse"),"\ndocumentation")," for more\ninformation."),(0,r.kt)("h4",{id:"defaulttextparser"},"defaultTextParser"),(0,r.kt)("a",{id:"defaultTextParser"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.defaultTextParser()")," can be used to parse content as plain text."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.addContentTypeParser('text/json', { asString: true }, fastify.defaultTextParser())\n")),(0,r.kt)("h4",{id:"errorhandler"},"errorHandler"),(0,r.kt)("a",{id:"errorHandler"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.errorHandler")," can be used to handle errors using fastify's default\nerror handler."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.get('/', {\n  errorHandler: (error, request, reply) => {\n    if (error.code === 'SOMETHING_SPECIFIC') {\n      reply.send({ custom: 'response' })\n      return\n    }\n\n    fastify.errorHandler(error, request, response)\n  }\n}, handler)\n")),(0,r.kt)("h4",{id:"initialconfig"},"initialConfig"),(0,r.kt)("a",{id:"initial-config"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fastify.initialConfig"),": Exposes a frozen read-only object registering the\ninitial options passed down by the user to the Fastify instance."),(0,r.kt)("p",null,"Currently the properties that can be exposed are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"connectionTimeout"),(0,r.kt)("li",{parentName:"ul"},"keepAliveTimeout"),(0,r.kt)("li",{parentName:"ul"},"bodyLimit"),(0,r.kt)("li",{parentName:"ul"},"caseSensitive"),(0,r.kt)("li",{parentName:"ul"},"allowUnsafeRegex"),(0,r.kt)("li",{parentName:"ul"},"http2"),(0,r.kt)("li",{parentName:"ul"},"https (it will return ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"{ allowHTTP1: true/false }")," if\nexplicitly passed)"),(0,r.kt)("li",{parentName:"ul"},"ignoreTrailingSlash"),(0,r.kt)("li",{parentName:"ul"},"disableRequestLogging"),(0,r.kt)("li",{parentName:"ul"},"maxParamLength"),(0,r.kt)("li",{parentName:"ul"},"onProtoPoisoning"),(0,r.kt)("li",{parentName:"ul"},"onConstructorPoisoning"),(0,r.kt)("li",{parentName:"ul"},"pluginTimeout"),(0,r.kt)("li",{parentName:"ul"},"requestIdHeader"),(0,r.kt)("li",{parentName:"ul"},"requestIdLogLabel"),(0,r.kt)("li",{parentName:"ul"},"http2SessionTimeout")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { readFileSync } = require('fs')\nconst Fastify = require('fastify')\n\nconst fastify = Fastify({\n  https: {\n    allowHTTP1: true,\n    key: readFileSync('./fastify.key'),\n    cert: readFileSync('./fastify.cert')\n  },\n  logger: { level: 'trace'},\n  ignoreTrailingSlash: true,\n  maxParamLength: 200,\n  caseSensitive: true,\n  trustProxy: '127.0.0.1,192.168.1.1/24',\n})\n\nconsole.log(fastify.initialConfig)\n/*\nwill log :\n{\n  caseSensitive: true,\n  https: { allowHTTP1: true },\n  ignoreTrailingSlash: true,\n  maxParamLength: 200\n}\n*/\n\nfastify.register(async (instance, opts) => {\n  instance.get('/', async (request, reply) => {\n    return instance.initialConfig\n    /*\n    will return :\n    {\n      caseSensitive: true,\n      https: { allowHTTP1: true },\n      ignoreTrailingSlash: true,\n      maxParamLength: 200\n    }\n    */\n  })\n\n  instance.get('/error', async (request, reply) => {\n    // will throw an error because initialConfig is read-only\n    // and can not be modified\n    instance.initialConfig.https.allowHTTP1 = false\n\n    return instance.initialConfig\n  })\n})\n\n// Start listening.\nfastify.listen({ port: 3000 }, (err) => {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n})\n")))}u.isMDXComponent=!0}}]);