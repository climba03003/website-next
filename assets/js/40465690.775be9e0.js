"use strict";(self.webpackChunk_fastify_website=self.webpackChunk_fastify_website||[]).push([[55260],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},61860:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const i={},o=void 0,s={unversionedId:"Reference/Validation-and-Serialization",id:"version-v4.11.x/Reference/Validation-and-Serialization",title:"Validation-and-Serialization",description:"Validation and Serialization",source:"@site/versioned_docs/version-v4.11.x/Reference/Validation-and-Serialization.md",sourceDirName:"Reference",slug:"/Reference/Validation-and-Serialization",permalink:"/website-next/docs/v4.11.x/Reference/Validation-and-Serialization",draft:!1,editUrl:"https://github.com/fastify/fastify/edit/main/docs/Reference/Validation-and-Serialization.md",tags:[],version:"v4.11.x",frontMatter:{},sidebar:"docsSidebar",previous:{title:"TypeScript",permalink:"/website-next/docs/v4.11.x/Reference/TypeScript"}},l={},p=[{value:"Validation and Serialization",id:"validation-and-serialization",level:2},{value:"Core concepts",id:"core-concepts",level:3},{value:"Adding a shared schema",id:"adding-a-shared-schema",level:4},{value:"Retrieving the shared schemas",id:"retrieving-the-shared-schemas",level:4},{value:"Validation",id:"validation",level:3},{value:"Ajv Plugins",id:"ajv-plugins",level:4},{value:"Validator Compiler",id:"validator-compiler",level:4},{value:"Using other validation libraries",id:"using-other-validation-libraries",level:5},{value:".statusCode property",id:"statuscode-property",level:5},{value:"Validation messages with other validation libraries",id:"validation-messages-with-other-validation-libraries",level:5},{value:"Serialization",id:"serialization",level:3},{value:"Serializer Compiler",id:"serializer-compiler",level:4},{value:"Error Handling",id:"error-handling",level:3},{value:"<code>schemaErrorFormatter</code>",id:"schemaerrorformatter",level:4},{value:"JSON Schema support",id:"json-schema-support",level:3},{value:"Examples",id:"examples",level:4},{value:"Usage of <code>$ref</code> to <code>$id</code> in same JSON Schema",id:"usage-of-ref-to-id-in-same-json-schema",level:5},{value:"Usage of <code>$ref</code> to <code>/definitions</code> in same JSON Schema",id:"usage-of-ref-to-definitions-in-same-json-schema",level:5},{value:"Usage <code>$ref</code> to a shared schema <code>$id</code> as external schema",id:"usage-ref-to-a-shared-schema-id-as-external-schema",level:5},{value:"Usage <code>$ref</code> to a shared schema <code>/definitions</code> as external schema",id:"usage-ref-to-a-shared-schema-definitions-as-external-schema",level:5},{value:"Resources",id:"resources",level:3}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"validation-and-serialization"},"Validation and Serialization"),(0,r.kt)("p",null,"Fastify uses a schema-based approach, and even if it is not mandatory we\nrecommend using ",(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSON Schema")," to validate your routes\nand serialize your outputs. Internally, Fastify compiles the schema into a\nhighly performant function."),(0,r.kt)("p",null,"Validation will only be attempted if the content type is ",(0,r.kt)("inlineCode",{parentName:"p"},"application-json"),", as\ndescribed in the documentation for the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/ContentTypeParser"},"content type\nparser"),"."),(0,r.kt)("p",null,"All the examples in this section are using the ",(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/specification-links.html#draft-7"},"JSON Schema Draft\n7")," specification."),(0,r.kt)("blockquote",null,(0,r.kt)("h2",{parentName:"blockquote",id:"--security-notice"},"\u26a0  Security Notice"),(0,r.kt)("p",{parentName:"blockquote"},"Treat the schema definition as application code. Validation and serialization\nfeatures dynamically evaluate code with ",(0,r.kt)("inlineCode",{parentName:"p"},"new Function()"),", which is not safe to\nuse with user-provided schemas. See ",(0,r.kt)("a",{parentName:"p",href:"https://npm.im/ajv"},"Ajv")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://npm.im/fast-json-stringify"},"fast-json-stringify")," for more details."),(0,r.kt)("p",{parentName:"blockquote"},"Moreover, the ",(0,r.kt)("a",{parentName:"p",href:"https://ajv.js.org/guide/async-validation.html"},(0,r.kt)("inlineCode",{parentName:"a"},"$async")," Ajv\nfeature")," should not be used as\npart of the first validation strategy. This option is used to access Databases\nand reading them during the validation process may lead to Denial of Service\nAttacks to your application. If you need to run ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," tasks, use ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/Hooks"},"Fastify's\nhooks")," instead after validation completes, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"preHandler"),".")),(0,r.kt)("h3",{id:"core-concepts"},"Core concepts"),(0,r.kt)("p",null,"The validation and the serialization tasks are processed by two different, and\ncustomizable, actors:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/ajv"},"Ajv v8")," for the validation of a request"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/fast-json-stringify"},"fast-json-stringify")," for\nthe serialization of a response's body")),(0,r.kt)("p",null,"These two separate entities share only the JSON schemas added to Fastify's\ninstance through ",(0,r.kt)("inlineCode",{parentName:"p"},".addSchema(schema)"),"."),(0,r.kt)("h4",{id:"adding-a-shared-schema"},"Adding a shared schema"),(0,r.kt)("a",{id:"shared-schema"}),(0,r.kt)("p",null,"Thanks to the ",(0,r.kt)("inlineCode",{parentName:"p"},"addSchema")," API, you can add multiple schemas to the Fastify\ninstance and then reuse them in multiple parts of your application. As usual,\nthis API is encapsulated."),(0,r.kt)("p",null,"The shared schemas can be reused through the JSON Schema\n",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/draft-handrews-json-schema-01#section-8"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"$ref"))),"\nkeyword. Here is an overview of ",(0,r.kt)("em",{parentName:"p"},"how")," references work:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"myField: { $ref: '#foo'}")," will search for field with ",(0,r.kt)("inlineCode",{parentName:"li"},"$id: '#foo'")," inside the\ncurrent schema"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"myField: { $ref: '#/definitions/foo'}")," will search for field\n",(0,r.kt)("inlineCode",{parentName:"li"},"definitions.foo")," inside the current schema"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"myField: { $ref: 'http://url.com/sh.json#'}")," will search for a shared schema\nadded with ",(0,r.kt)("inlineCode",{parentName:"li"},"$id: 'http://url.com/sh.json'")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"myField: { $ref: 'http://url.com/sh.json#/definitions/foo'}")," will search for\na shared schema added with ",(0,r.kt)("inlineCode",{parentName:"li"},"$id: 'http://url.com/sh.json'")," and will use the\nfield ",(0,r.kt)("inlineCode",{parentName:"li"},"definitions.foo")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"myField: { $ref: 'http://url.com/sh.json#foo'}")," will search for a shared\nschema added with ",(0,r.kt)("inlineCode",{parentName:"li"},"$id: 'http://url.com/sh.json'")," and it will look inside of\nit for object with ",(0,r.kt)("inlineCode",{parentName:"li"},"$id: '#foo'"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Simple usage:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.addSchema({\n  $id: 'http://example.com/',\n  type: 'object',\n  properties: {\n    hello: { type: 'string' }\n  }\n})\n\nfastify.post('/', {\n  handler () {},\n  schema: {\n    body: {\n      type: 'array',\n      items: { $ref: 'http://example.com#/properties/hello' }\n    }\n  }\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"$ref")," as root reference:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.addSchema({\n  $id: 'commonSchema',\n  type: 'object',\n  properties: {\n    hello: { type: 'string' }\n  }\n})\n\nfastify.post('/', {\n  handler () {},\n  schema: {\n    body: { $ref: 'commonSchema#' },\n    headers: { $ref: 'commonSchema#' }\n  }\n})\n")),(0,r.kt)("h4",{id:"retrieving-the-shared-schemas"},"Retrieving the shared schemas"),(0,r.kt)("a",{id:"get-shared-schema"}),(0,r.kt)("p",null,"If the validator and the serializer are customized, the ",(0,r.kt)("inlineCode",{parentName:"p"},".addSchema")," method will\nnot be useful since the actors are no longer controlled by Fastify. To access\nthe schemas added to the Fastify instance, you can simply use ",(0,r.kt)("inlineCode",{parentName:"p"},".getSchemas()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.addSchema({\n  $id: 'schemaId',\n  type: 'object',\n  properties: {\n    hello: { type: 'string' }\n  }\n})\n\nconst mySchemas = fastify.getSchemas()\nconst mySchema = fastify.getSchema('schemaId')\n")),(0,r.kt)("p",null,"As usual, the function ",(0,r.kt)("inlineCode",{parentName:"p"},"getSchemas")," is encapsulated and returns the shared\nschemas available in the selected scope:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.addSchema({ $id: 'one', my: 'hello' })\n// will return only `one` schema\nfastify.get('/', (request, reply) => { reply.send(fastify.getSchemas()) })\n\nfastify.register((instance, opts, done) => {\n  instance.addSchema({ $id: 'two', my: 'ciao' })\n  // will return `one` and `two` schemas\n  instance.get('/sub', (request, reply) => { reply.send(instance.getSchemas()) })\n\n  instance.register((subinstance, opts, done) => {\n    subinstance.addSchema({ $id: 'three', my: 'hola' })\n    // will return `one`, `two` and `three`\n    subinstance.get('/deep', (request, reply) => { reply.send(subinstance.getSchemas()) })\n    done()\n  })\n  done()\n})\n")),(0,r.kt)("h3",{id:"validation"},"Validation"),(0,r.kt)("p",null,"The route validation internally relies upon ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/ajv"},"Ajv\nv8")," which is a high-performance JSON Schema\nvalidator. Validating the input is very easy: just add the fields that you need\ninside the route schema, and you are done!"),(0,r.kt)("p",null,"The supported validations are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"body"),": validates the body of the request if it is a POST, PUT, or PATCH\nmethod."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"querystring")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"query"),": validates the query string."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params"),": validates the route params."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"headers"),": validates the request headers.")),(0,r.kt)("p",null,"All the validations can be a complete JSON Schema object (with a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," property\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"'object'")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"'properties'")," object containing parameters) or a simpler\nvariation in which the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"properties")," attributes are forgone and the\nparameters are listed at the top level (see the example below)."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u2139 If you need to use the latest version of Ajv (v8) you should read how to do\nit in the ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/Server#schema-controller"},(0,r.kt)("inlineCode",{parentName:"a"},"schemaController"))," section.")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const bodyJsonSchema = {\n  type: 'object',\n  required: ['requiredKey'],\n  properties: {\n    someKey: { type: 'string' },\n    someOtherKey: { type: 'number' },\n    requiredKey: {\n      type: 'array',\n      maxItems: 3,\n      items: { type: 'integer' }\n    },\n    nullableKey: { type: ['number', 'null'] }, // or { type: 'number', nullable: true }\n    multipleTypesKey: { type: ['boolean', 'number'] },\n    multipleRestrictedTypesKey: {\n      oneOf: [\n        { type: 'string', maxLength: 5 },\n        { type: 'number', minimum: 10 }\n      ]\n    },\n    enumKey: {\n      type: 'string',\n      enum: ['John', 'Foo']\n    },\n    notTypeKey: {\n      not: { type: 'array' }\n    }\n  }\n}\n\nconst queryStringJsonSchema = {\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    excitement: { type: 'integer' }\n  }\n}\n\nconst paramsJsonSchema = {\n  type: 'object',\n  properties: {\n    par1: { type: 'string' },\n    par2: { type: 'number' }\n  }\n}\n\nconst headersJsonSchema = {\n  type: 'object',\n  properties: {\n    'x-foo': { type: 'string' }\n  },\n  required: ['x-foo']\n}\n\nconst schema = {\n  body: bodyJsonSchema,\n  querystring: queryStringJsonSchema,\n  params: paramsJsonSchema,\n  headers: headersJsonSchema\n}\n\nfastify.post('/the/url', { schema }, handler)\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note that Ajv will try to ",(0,r.kt)("a",{parentName:"em",href:"https://ajv.js.org/coercion.html"},"coerce")," the values\nto the types specified in your schema ",(0,r.kt)("inlineCode",{parentName:"em"},"type")," keywords, both to pass the\nvalidation and to use the correctly typed data afterwards.")),(0,r.kt)("p",null,"The Ajv default configuration in Fastify supports coercing array parameters in\n",(0,r.kt)("inlineCode",{parentName:"p"},"querystring"),". Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const opts = {\n  schema: {\n    querystring: {\n      type: 'object',\n      properties: {\n        ids: {\n          type: 'array',\n          default: []\n        },\n      },\n    }\n  }\n}\n\nfastify.get('/', opts, (request, reply) => {\n  reply.send({ params: request.query }) // echo the querystring\n})\n\nfastify.listen({ port: 3000 }, (err) => {\n  if (err) throw err\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X GET "http://localhost:3000/?ids=1\n\n{"params":{"ids":["1"]}}\n')),(0,r.kt)("p",null,"You can also specify a custom schema validator for each parameter type (body,\nquerystring, params, headers)."),(0,r.kt)("p",null,"For example, the following code disable type coercion only for the ",(0,r.kt)("inlineCode",{parentName:"p"},"body"),"\nparameters, changing the ajv default options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const schemaCompilers = {\n  body: new Ajv({\n    removeAdditional: false,\n    coerceTypes: false,\n    allErrors: true\n  }),\n  params: new Ajv({\n    removeAdditional: false,\n    coerceTypes: true,\n    allErrors: true\n  }),\n  querystring: new Ajv({\n    removeAdditional: false,\n    coerceTypes: true,\n    allErrors: true\n  }),\n  headers: new Ajv({\n    removeAdditional: false,\n    coerceTypes: true,\n    allErrors: true\n  })\n}\n\nserver.setValidatorCompiler(req => {\n    if (!req.httpPart) {\n      throw new Error('Missing httpPart')\n    }\n    const compiler = schemaCompilers[req.httpPart]\n    if (!compiler) {\n      throw new Error(`Missing compiler for ${req.httpPart}`)\n    }\n    return compiler.compile(req.schema)\n})\n")),(0,r.kt)("p",null,"For further information see ",(0,r.kt)("a",{parentName:"p",href:"https://ajv.js.org/coercion.html"},"here")),(0,r.kt)("h4",{id:"ajv-plugins"},"Ajv Plugins"),(0,r.kt)("a",{id:"ajv-plugins"}),(0,r.kt)("p",null,"You can provide a list of plugins you want to use with the default ",(0,r.kt)("inlineCode",{parentName:"p"},"ajv"),"\ninstance. Note that the plugin must be ",(0,r.kt)("strong",{parentName:"p"},"compatible with the Ajv version shipped\nwithin Fastify"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Refer to ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/Server#ajv"},(0,r.kt)("inlineCode",{parentName:"a"},"ajv options"))," to check plugins format")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')({\n  ajv: {\n    plugins: [\n      require('ajv-merge-patch')\n    ]\n  }\n})\n\nfastify.post('/', {\n  handler (req, reply) { reply.send({ ok: 1 }) },\n  schema: {\n    body: {\n      $patch: {\n        source: {\n          type: 'object',\n          properties: {\n            q: {\n              type: 'string'\n            }\n          }\n        },\n        with: [\n          {\n            op: 'add',\n            path: '/properties/q',\n            value: { type: 'number' }\n          }\n        ]\n      }\n    }\n  }\n})\n\nfastify.post('/foo', {\n  handler (req, reply) { reply.send({ ok: 1 }) },\n  schema: {\n    body: {\n      $merge: {\n        source: {\n          type: 'object',\n          properties: {\n            q: {\n              type: 'string'\n            }\n          }\n        },\n        with: {\n          required: ['q']\n        }\n      }\n    }\n  }\n})\n")),(0,r.kt)("h4",{id:"validator-compiler"},"Validator Compiler"),(0,r.kt)("a",{id:"schema-validator"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"validatorCompiler")," is a function that returns a function that validates the\nbody, URL  parameters, headers, and query string. The default\n",(0,r.kt)("inlineCode",{parentName:"p"},"validatorCompiler")," returns a function that implements the\n",(0,r.kt)("a",{parentName:"p",href:"https://ajv.js.org/"},"ajv")," validation interface. Fastify uses it internally to\nspeed the validation up."),(0,r.kt)("p",null,"Fastify's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/ajv-compiler#ajv-configuration"},"baseline ajv\nconfiguration")," is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  coerceTypes: true, // change data type of data to match type keyword\n  useDefaults: true, // replace missing properties and items with the values from corresponding default keyword\n  removeAdditional: true, // remove additional properties\n  // Explicitly set allErrors to `false`.\n  // When set to `true`, a DoS attack is possible.\n  allErrors: false\n}\n")),(0,r.kt)("p",null,"This baseline configuration can be modified by providing\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/Server#factory-ajv"},(0,r.kt)("inlineCode",{parentName:"a"},"ajv.customOptions"))," to your Fastify factory."),(0,r.kt)("p",null,"If you want to change or set additional config options, you will need to create\nyour own instance and override the existing one like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')()\nconst Ajv = require('ajv')\nconst ajv = new Ajv({\n  removeAdditional: 'all',\n  useDefaults: true,\n  coerceTypes: 'array',\n  // any other options\n  // ...\n})\nfastify.setValidatorCompiler(({ schema, method, url, httpPart }) => {\n  return ajv.compile(schema)\n})\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"Note:")," If you use a custom instance of any validator (even Ajv), you have to\nadd schemas to the validator instead of Fastify, since Fastify's default\nvalidator is no longer used, and Fastify's ",(0,r.kt)("inlineCode",{parentName:"em"},"addSchema")," method has no idea what\nvalidator you are using.")),(0,r.kt)("h5",{id:"using-other-validation-libraries"},"Using other validation libraries"),(0,r.kt)("a",{id:"using-other-validation-libraries"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"setValidatorCompiler")," function makes it easy to substitute ",(0,r.kt)("inlineCode",{parentName:"p"},"ajv")," with\nalmost any Javascript validation library (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hapijs/joi/"},"joi"),",\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jquense/yup/"},"yup"),", ...) or a custom one:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const Joi = require('joi')\n\nfastify.post('/the/url', {\n  schema: {\n    body: Joi.object().keys({\n      hello: Joi.string().required()\n    }).required()\n  },\n  validatorCompiler: ({ schema, method, url, httpPart }) => {\n    return data => schema.validate(data)\n  }\n}, handler)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const yup = require('yup')\n// Validation options to match ajv's baseline options used in Fastify\nconst yupOptions = {\n  strict: false,\n  abortEarly: false, // return all errors\n  stripUnknown: true, // remove additional properties\n  recursive: true\n}\n\nfastify.post('/the/url', {\n  schema: {\n    body: yup.object({\n      age: yup.number().integer().required(),\n      sub: yup.object().shape({\n        name: yup.string().required()\n      }).required()\n    })\n  },\n  validatorCompiler: ({ schema, method, url, httpPart }) => {\n    return function (data) {\n      // with option strict = false, yup `validateSync` function returns the\n      // coerced value if validation was successful, or throws if validation failed\n      try {\n        const result = schema.validateSync(data, yupOptions)\n        return { value: result }\n      } catch (e) {\n        return { error: e }\n      }\n    }\n  }\n}, handler)\n")),(0,r.kt)("h5",{id:"statuscode-property"},".statusCode property"),(0,r.kt)("p",null,"All validation errors will be added a ",(0,r.kt)("inlineCode",{parentName:"p"},".statusCode")," property set to ",(0,r.kt)("inlineCode",{parentName:"p"},"400"),". This guarantees\nthat the default error handler will set the status code of the response to ",(0,r.kt)("inlineCode",{parentName:"p"},"400"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.setErrorHandler(function (error, request, reply) {\n  request.log.error(error, `This error has status code ${error.statusCode}`)\n  reply.status(error.statusCode).send(error)\n})\n")),(0,r.kt)("h5",{id:"validation-messages-with-other-validation-libraries"},"Validation messages with other validation libraries"),(0,r.kt)("p",null,"Fastify's validation error messages are tightly coupled to the default\nvalidation engine: errors returned from ",(0,r.kt)("inlineCode",{parentName:"p"},"ajv")," are eventually run through the\n",(0,r.kt)("inlineCode",{parentName:"p"},"schemaErrorFormatter")," function which is responsible for building human-friendly\nerror messages. However, the ",(0,r.kt)("inlineCode",{parentName:"p"},"schemaErrorFormatter")," function is written with\n",(0,r.kt)("inlineCode",{parentName:"p"},"ajv")," in mind. As a result, you may run into odd or incomplete error messages\nwhen using other validation libraries."),(0,r.kt)("p",null,"To circumvent this issue, you have 2 main options :"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"make sure your validation function (returned by your custom ",(0,r.kt)("inlineCode",{parentName:"li"},"schemaCompiler"),")\nreturns errors in the same structure and format as ",(0,r.kt)("inlineCode",{parentName:"li"},"ajv")," (although this could\nprove to be difficult and tricky due to differences between validation\nengines)"),(0,r.kt)("li",{parentName:"ol"},"or use a custom ",(0,r.kt)("inlineCode",{parentName:"li"},"errorHandler")," to intercept and format your 'custom'\nvalidation errors")),(0,r.kt)("p",null,"To help you in writing a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"errorHandler"),", Fastify adds 2 properties to all\nvalidation errors:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"validation"),": the content of the ",(0,r.kt)("inlineCode",{parentName:"li"},"error")," property of the object returned by\nthe validation function (returned by your custom ",(0,r.kt)("inlineCode",{parentName:"li"},"schemaCompiler"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"validationContext"),": the 'context' (body, params, query, headers) where the\nvalidation error occurred")),(0,r.kt)("p",null,"A very contrived example of such a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"errorHandler")," handling validation\nerrors is shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const errorHandler = (error, request, reply) => {\n  const statusCode = error.statusCode\n  let response\n\n  const { validation, validationContext } = error\n\n  // check if we have a validation error\n  if (validation) {\n    response = {\n      // validationContext will be 'body' or 'params' or 'headers' or 'query'\n      message: `A validation error occurred when validating the ${validationContext}...`,\n      // this is the result of your validation library...\n      errors: validation\n    }\n  } else {\n    response = {\n      message: 'An error occurred...'\n    }\n  }\n\n  // any additional work here, eg. log error\n  // ...\n\n  reply.status(statusCode).send(response)\n}\n")),(0,r.kt)("h3",{id:"serialization"},"Serialization"),(0,r.kt)("a",{id:"serialization"}),(0,r.kt)("p",null,"Usually, you will send your data to the clients as JSON, and Fastify has a\npowerful tool to help you,\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/fast-json-stringify"},"fast-json-stringify"),", which\nis used if you have provided an output schema in the route options. We encourage\nyou to use an output schema, as it can drastically increase throughput and help\nprevent accidental disclosure of sensitive information."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const schema = {\n  response: {\n    200: {\n      type: 'object',\n      properties: {\n        value: { type: 'string' },\n        otherValue: { type: 'boolean' }\n      }\n    }\n  }\n}\n\nfastify.post('/the/url', { schema }, handler)\n")),(0,r.kt)("p",null,"As you can see, the response schema is based on the status code. If you want to\nuse the same schema for multiple status codes, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"'2xx'")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),",\nfor example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const schema = {\n  response: {\n    default: {\n      type: 'object',\n      properties: {\n        error: {\n          type: 'boolean',\n          default: true\n        }\n      }\n    },\n    '2xx': {\n      type: 'object',\n      properties: {\n        value: { type: 'string' },\n        otherValue: { type: 'boolean' }\n      }\n    },\n    201: {\n      // the contract syntax\n      value: { type: 'string' }\n    }\n  }\n}\n\nfastify.post('/the/url', { schema }, handler)\n")),(0,r.kt)("p",null,"You can even have a specific response schema for different content types.\nFor example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const schema = {\n      response: {\n        200: {\n          description: 'Response schema that support different content types'\n          content: {\n            'application/json': {\n              schema: {\n                name: { type: 'string' },\n                image: { type: 'string' },\n                address: { type: 'string' }\n              }\n            },\n            'application/vnd.v1+json': {\n              schema: {\n                type: 'array',\n                items: { $ref: 'test' }\n              }\n            }\n          }\n        },\n        '3xx': {\n          content: {\n            'application/vnd.v2+json': {\n              schema: {\n                fullName: { type: 'string' },\n                phone: { type: 'string' }\n              }\n            }\n          }\n        }\n      }\n    }\n\nfastify.post('/url', { schema }, handler)\n")),(0,r.kt)("h4",{id:"serializer-compiler"},"Serializer Compiler"),(0,r.kt)("a",{id:"schema-serializer"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"serializerCompiler")," is a function that returns a function that must return\na string from an input object. When you define a response JSON Schema, you can\nchange the default serialization method by providing a function to serialize\nevery route where you do."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.setSerializerCompiler(({ schema, method, url, httpStatus, contentType }) => {\n  return data => JSON.stringify(data)\n})\n\nfastify.get('/user', {\n  handler (req, reply) {\n    reply.send({ id: 1, name: 'Foo', image: 'BIG IMAGE' })\n  },\n  schema: {\n    response: {\n      '2xx': {\n        id: { type: 'number' },\n        name: { type: 'string' }\n      }\n    }\n  }\n})\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"If you need a custom serializer in a very specific part of your code, you can\nset one with ",(0,r.kt)("a",{parentName:"em",href:"/website-next/docs/v4.11.x/Reference/Reply#serializerfunc"},(0,r.kt)("inlineCode",{parentName:"a"},"reply.serializer(...)")),".")),(0,r.kt)("h3",{id:"error-handling"},"Error Handling"),(0,r.kt)("p",null,"When schema validation fails for a request, Fastify will automatically return a\nstatus 400 response including the result from the validator in the payload. As\nan example, if you have the following schema for your route"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const schema = {\n  body: {\n    type: 'object',\n    properties: {\n      name: { type: 'string' }\n    },\n    required: ['name']\n  }\n}\n")),(0,r.kt)("p",null,"and fail to satisfy it, the route will immediately return a response with the\nfollowing payload"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "statusCode": 400,\n  "error": "Bad Request",\n  "message": "body should have required property \'name\'"\n}\n')),(0,r.kt)("p",null,"If you want to handle errors inside the route, you can specify the\n",(0,r.kt)("inlineCode",{parentName:"p"},"attachValidation")," option for your route. If there is a ",(0,r.kt)("em",{parentName:"p"},"validation error"),", the\n",(0,r.kt)("inlineCode",{parentName:"p"},"validationError")," property of the request will contain the ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," object with\nthe raw ",(0,r.kt)("inlineCode",{parentName:"p"},"validation")," result as shown below"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = Fastify()\n\nfastify.post('/', { schema, attachValidation: true }, function (req, reply) {\n  if (req.validationError) {\n    // `req.validationError.validation` contains the raw validation error\n    reply.code(400).send(req.validationError)\n  }\n})\n")),(0,r.kt)("h4",{id:"schemaerrorformatter"},(0,r.kt)("inlineCode",{parentName:"h4"},"schemaErrorFormatter")),(0,r.kt)("p",null,"If you want to format errors yourself, you can provide a sync function that must\nreturn an error as the ",(0,r.kt)("inlineCode",{parentName:"p"},"schemaErrorFormatter")," option to Fastify when\ninstantiating. The context function will be the Fastify server instance."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"errors")," is an array of Fastify schema errors ",(0,r.kt)("inlineCode",{parentName:"p"},"FastifySchemaValidationError"),".\n",(0,r.kt)("inlineCode",{parentName:"p"},"dataVar")," is the currently validated part of the schema. (params | body |\nquerystring | headers)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = Fastify({\n  schemaErrorFormatter: (errors, dataVar) => {\n    // ... my formatting logic\n    return new Error(myErrorMessage)\n  }\n})\n\n// or\nfastify.setSchemaErrorFormatter(function (errors, dataVar) {\n  this.log.error({ err: errors }, 'Validation failed')\n  // ... my formatting logic\n  return new Error(myErrorMessage)\n})\n")),(0,r.kt)("p",null,"You can also use ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v4.11.x/Reference/Server#seterrorhandler"},"setErrorHandler")," to define a\ncustom response for validation errors such as"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.setErrorHandler(function (error, request, reply) {\n  if (error.validation) {\n     reply.status(422).send(new Error('validation failed'))\n  }\n})\n")),(0,r.kt)("p",null,"If you want a custom error response in the schema without headaches, and\nquickly, take a look at\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/epoberezkin/ajv-errors"},(0,r.kt)("inlineCode",{parentName:"a"},"ajv-errors")),". Check out the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/example/blob/HEAD/validation-messages/custom-errors-messages.js"},"example"),"\nusage."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Make sure to install version 1.0.1 of ",(0,r.kt)("inlineCode",{parentName:"p"},"ajv-errors"),", because later versions of\nit are not compatible with AJV v6 (the version shipped by Fastify v3).")),(0,r.kt)("p",null,"Below is an example showing how to add ",(0,r.kt)("strong",{parentName:"p"},"custom error messages for each\nproperty")," of a schema by supplying custom AJV options. Inline comments in the\nschema below describe how to configure it to show a different error message for\neach case:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = Fastify({\n  ajv: {\n    customOptions: {\n      jsonPointers: true,\n      // Warning: Enabling this option may lead to this security issue https://www.cvedetails.com/cve/CVE-2020-8192/\n      allErrors: true\n    },\n    plugins: [\n      require('ajv-errors')\n    ]\n  }\n})\n\nconst schema = {\n  body: {\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n        errorMessage: {\n          type: 'Bad name'\n        }\n      },\n      age: {\n        type: 'number',\n        errorMessage: {\n          type: 'Bad age', // specify custom message for\n          min: 'Too young' // all constraints except required\n        }\n      }\n    },\n    required: ['name', 'age'],\n    errorMessage: {\n      required: {\n        name: 'Why no name!', // specify error message for when the\n        age: 'Why no age!' // property is missing from input\n      }\n    }\n  }\n}\n\nfastify.post('/', { schema, }, (request, reply) => {\n  reply.send({\n    hello: 'world'\n  })\n})\n")),(0,r.kt)("p",null,"If you want to return localized error messages, take a look at\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/epoberezkin/ajv-i18n"},"ajv-i18n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const localize = require('ajv-i18n')\n\nconst fastify = Fastify()\n\nconst schema = {\n  body: {\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n      },\n      age: {\n        type: 'number',\n      }\n    },\n    required: ['name', 'age'],\n  }\n}\n\nfastify.setErrorHandler(function (error, request, reply) {\n  if (error.validation) {\n    localize.ru(error.validation)\n    reply.status(400).send(error.validation)\n    return\n  }\n  reply.send(error)\n})\n")),(0,r.kt)("h3",{id:"json-schema-support"},"JSON Schema support"),(0,r.kt)("p",null,"JSON Schema provides utilities to optimize your schemas that, in conjunction\nwith Fastify's shared schema, let you reuse all your schemas easily."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Use Case"),(0,r.kt)("th",{parentName:"tr",align:null},"Validator"),(0,r.kt)("th",{parentName:"tr",align:null},"Serializer"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"$ref")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"$id")),(0,r.kt)("td",{parentName:"tr",align:null},"\ufe0f\ufe0f\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"$ref")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"/definitions")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"$ref")," to shared schema ",(0,r.kt)("inlineCode",{parentName:"td"},"$id")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"$ref")," to shared schema ",(0,r.kt)("inlineCode",{parentName:"td"},"/definitions")),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f")))),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("h5",{id:"usage-of-ref-to-id-in-same-json-schema"},"Usage of ",(0,r.kt)("inlineCode",{parentName:"h5"},"$ref")," to ",(0,r.kt)("inlineCode",{parentName:"h5"},"$id")," in same JSON Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const refToId = {\n  type: 'object',\n  definitions: {\n    foo: {\n      $id: '#address',\n      type: 'object',\n      properties: {\n        city: { type: 'string' }\n      }\n    }\n  },\n  properties: {\n    home: { $ref: '#address' },\n    work: { $ref: '#address' }\n  }\n}\n")),(0,r.kt)("h5",{id:"usage-of-ref-to-definitions-in-same-json-schema"},"Usage of ",(0,r.kt)("inlineCode",{parentName:"h5"},"$ref")," to ",(0,r.kt)("inlineCode",{parentName:"h5"},"/definitions")," in same JSON Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const refToDefinitions = {\n  type: 'object',\n  definitions: {\n    foo: {\n      $id: '#address',\n      type: 'object',\n      properties: {\n        city: { type: 'string' }\n      }\n    }\n  },\n  properties: {\n    home: { $ref: '#/definitions/foo' },\n    work: { $ref: '#/definitions/foo' }\n  }\n}\n")),(0,r.kt)("h5",{id:"usage-ref-to-a-shared-schema-id-as-external-schema"},"Usage ",(0,r.kt)("inlineCode",{parentName:"h5"},"$ref")," to a shared schema ",(0,r.kt)("inlineCode",{parentName:"h5"},"$id")," as external schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.addSchema({\n  $id: 'http://foo/common.json',\n  type: 'object',\n  definitions: {\n    foo: {\n      $id: '#address',\n      type: 'object',\n      properties: {\n        city: { type: 'string' }\n      }\n    }\n  }\n})\n\nconst refToSharedSchemaId = {\n  type: 'object',\n  properties: {\n    home: { $ref: 'http://foo/common.json#address' },\n    work: { $ref: 'http://foo/common.json#address' }\n  }\n}\n")),(0,r.kt)("h5",{id:"usage-ref-to-a-shared-schema-definitions-as-external-schema"},"Usage ",(0,r.kt)("inlineCode",{parentName:"h5"},"$ref")," to a shared schema ",(0,r.kt)("inlineCode",{parentName:"h5"},"/definitions")," as external schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.addSchema({\n  $id: 'http://foo/shared.json',\n  type: 'object',\n  definitions: {\n    foo: {\n      type: 'object',\n      properties: {\n        city: { type: 'string' }\n      }\n    }\n  }\n})\n\nconst refToSharedSchemaDefinitions = {\n  type: 'object',\n  properties: {\n    home: { $ref: 'http://foo/shared.json#/definitions/foo' },\n    work: { $ref: 'http://foo/shared.json#/definitions/foo' }\n  }\n}\n")),(0,r.kt)("h3",{id:"resources"},"Resources"),(0,r.kt)("a",{id:"resources"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://json-schema.org/"},"JSON Schema")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://spacetelescope.github.io/understanding-json-schema/"},"Understanding JSON\nSchema")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/fastify/fast-json-stringify"},"fast-json-stringify\ndocumentation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/epoberezkin/ajv/blob/master/README.md"},"Ajv documentation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/epoberezkin/ajv-i18n"},"Ajv i18n")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/epoberezkin/ajv-errors"},"Ajv custom errors")),(0,r.kt)("li",{parentName:"ul"},"Custom error handling with core methods with error file dumping\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/fastify/example/tree/master/validation-messages"},"example"))))}c.isMDXComponent=!0}}]);