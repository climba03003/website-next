"use strict";(self.webpackChunk_fastify_website=self.webpackChunk_fastify_website||[]).push([[22476],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},40723:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o="The hitchhiker's guide to plugins",s={unversionedId:"Guides/Plugins-Guide",id:"version-v3.29.x/Guides/Plugins-Guide",title:"The hitchhiker's guide to plugins",description:"First of all, DON'T PANIC!",source:"@site/versioned_docs/version-v3.29.x/Guides/Plugins-Guide.md",sourceDirName:"Guides",slug:"/Guides/Plugins-Guide",permalink:"/website-next/docs/v3.29.x/Guides/Plugins-Guide",draft:!1,tags:[],version:"v3.29.x",frontMatter:{},sidebar:"docsSidebar",previous:{title:"V3 Migration Guide",permalink:"/website-next/docs/v3.29.x/Guides/Migration-Guide-V3"},next:{title:"Prototype-Poisoning",permalink:"/website-next/docs/v3.29.x/Guides/Prototype-Poisoning"}},l={},p=[{value:"Register",id:"register",level:2},{value:"Decorators",id:"decorators",level:2},{value:"Hooks",id:"hooks",level:2},{value:"How to handle encapsulation and distribution",id:"how-to-handle-encapsulation-and-distribution",level:2},{value:"ESM support",id:"esm-support",level:2},{value:"Handle errors",id:"handle-errors",level:2},{value:"Custom errors",id:"custom-errors",level:2},{value:"Emit Warnings",id:"emit-warnings",level:2},{value:"Let&#39;s start!",id:"lets-start",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-hitchhikers-guide-to-plugins"},"The hitchhiker's guide to plugins"),(0,r.kt)("p",null,"First of all, ",(0,r.kt)("inlineCode",{parentName:"p"},"DON'T PANIC"),"!"),(0,r.kt)("p",null,"Fastify was built from the beginning to be an extremely modular system. We built\na powerful API that allows you to add methods and utilities to Fastify by\ncreating a namespace. We built a system that creates an encapsulation model,\nwhich allows you to split your application into multiple microservices at any\nmoment, without the need to refactor the entire application."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Table of contents")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#the-hitchhikers-guide-to-plugins"},"The hitchhiker's guide to plugins"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#register"},"Register")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#decorators"},"Decorators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#hooks"},"Hooks")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-to-handle-encapsulation-and-distribution"},"How to handle encapsulation and\ndistribution")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#esm-support"},"ESM support")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#handle-errors"},"Handle errors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#custom-errors"},"Custom errors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#emit-warnings"},"Emit Warnings")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#lets-start"},"Let's start!"))))),(0,r.kt)("h2",{id:"register"},"Register"),(0,r.kt)("a",{id:"register"}),(0,r.kt)("p",null,"As with JavaScript, where everything is an object, in Fastify everything is a\nplugin."),(0,r.kt)("p",null,"Your routes, your utilities, and so on are all plugins. To add a new plugin,\nwhatever its functionality may be, in Fastify you have a nice and unique API:\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v3.29.x/Reference/Plugins"},(0,r.kt)("inlineCode",{parentName:"a"},"register")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.register(\n  require('./my-plugin'),\n  { options }\n)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"register")," creates a new Fastify context, which means that if you perform any\nchanges on the Fastify instance, those changes will not be reflected in the\ncontext's ancestors. In other words, encapsulation!"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Why is encapsulation important?")),(0,r.kt)("p",null,"Well, let's say you are creating a new disruptive startup, what do you do? You\ncreate an API server with all your stuff, everything in the same place, a\nmonolith!"),(0,r.kt)("p",null,"Ok, you are growing very fast and you want to change your architecture and try\nmicroservices. Usually, this implies a huge amount of work, because of cross\ndependencies and a lack of separation of concerns in the codebase."),(0,r.kt)("p",null,"Fastify helps you in that regard. Thanks to the encapsulation model, it will\ncompletely avoid cross dependencies and will help you structure your code into\ncohesive blocks."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Let's return to how to correctly use ",(0,r.kt)("inlineCode",{parentName:"em"},"register"),".")),(0,r.kt)("p",null,"As you probably know, the required plugins must expose a single function with\nthe following signature"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = function (fastify, options, done) {}\n")),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify")," is the encapsulated Fastify instance, ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," is the options\nobject, and ",(0,r.kt)("inlineCode",{parentName:"p"},"done")," is the function you ",(0,r.kt)("strong",{parentName:"p"},"must")," call when your plugin is ready."),(0,r.kt)("p",null,"Fastify's plugin model is fully reentrant and graph-based, it handles\nasynchronous code without any problems and it enforces both the load and close\norder of plugins. ",(0,r.kt)("em",{parentName:"p"},"How?")," Glad you asked, check out\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mcollina/avvio"},(0,r.kt)("inlineCode",{parentName:"a"},"avvio")),"! Fastify starts loading the plugin\n",(0,r.kt)("strong",{parentName:"p"},"after")," ",(0,r.kt)("inlineCode",{parentName:"p"},".listen()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".inject()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".ready()")," are called."),(0,r.kt)("p",null,"Inside a plugin you can do whatever you want, register routes, utilities (we\nwill see this in a moment) and do nested registers, just remember to call ",(0,r.kt)("inlineCode",{parentName:"p"},"done"),"\nwhen everything is set up!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = function (fastify, options, done) {\n  fastify.get('/plugin', (request, reply) => {\n    reply.send({ hello: 'world' })\n  })\n\n  done()\n}\n")),(0,r.kt)("p",null,"Well, now you know how to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"register")," API and how it works, but how do we\nadd new functionality to Fastify and even better, share them with other\ndevelopers?"),(0,r.kt)("h2",{id:"decorators"},"Decorators"),(0,r.kt)("a",{id:"decorators"}),(0,r.kt)("p",null,"Okay, let's say that you wrote a utility that is so good that you decided to\nmake it available along with all your code. How would you do it? Probably\nsomething like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// your-awesome-utility.js\nmodule.exports = function (a, b) {\n  return a + b\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const util = require('./your-awesome-utility')\nconsole.log(util('that is ', 'awesome'))\n")),(0,r.kt)("p",null,"Now you will import your utility in every file you need it in. (And do not\nforget that you will probably also need it in your tests)."),(0,r.kt)("p",null,"Fastify offers you a more elegant and comfortable way to do this, ",(0,r.kt)("em",{parentName:"p"},"decorators"),".\nCreating a decorator is extremely easy, just use the\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v3.29.x/Reference/Decorators"},(0,r.kt)("inlineCode",{parentName:"a"},"decorate"))," API:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.decorate('util', (a, b) => a + b)\n")),(0,r.kt)("p",null,"Now you can access your utility just by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify.util")," whenever you need\nit - even inside your test."),(0,r.kt)("p",null,"And here starts the magic; do you remember how just now we were talking about\nencapsulation? Well, using ",(0,r.kt)("inlineCode",{parentName:"p"},"register")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"decorate")," in conjunction enable\nexactly that, let me show you an example to clarify this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.register((instance, opts, done) => {\n  instance.decorate('util', (a, b) => a + b)\n  console.log(instance.util('that is ', 'awesome'))\n\n  done()\n})\n\nfastify.register((instance, opts, done) => {\n  console.log(instance.util('that is ', 'awesome')) // This will throw an error\n\n  done()\n})\n")),(0,r.kt)("p",null,"Inside the second register call ",(0,r.kt)("inlineCode",{parentName:"p"},"instance.util")," will throw an error because\n",(0,r.kt)("inlineCode",{parentName:"p"},"util")," exists only inside the first register context."),(0,r.kt)("p",null,"Let's step back for a moment and dig deeper into this: every time you use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"register")," API, a new context is created which avoids the negative situations\nmentioned above."),(0,r.kt)("p",null,"Do note that encapsulation applies to the ancestors and siblings, but not the\nchildren."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.register((instance, opts, done) => {\n  instance.decorate('util', (a, b) => a + b)\n  console.log(instance.util('that is ', 'awesome'))\n\n  fastify.register((instance, opts, done) => {\n    console.log(instance.util('that is ', 'awesome')) // This will not throw an error\n    done()\n  })\n\n  done()\n})\n\nfastify.register((instance, opts, done) => {\n  console.log(instance.util('that is ', 'awesome')) // This will throw an error\n\n  done()\n})\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Take home message: if you need a utility that is available in every part of\nyour application, take care that it is declared in the root scope of your\napplication. If that is not an option,  you can use the ",(0,r.kt)("inlineCode",{parentName:"em"},"fastify-plugin")," utility\nas described ",(0,r.kt)("a",{parentName:"em",href:"#distribution"},"here"),".")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"decorate")," is not the only API that you can use to extend the server\nfunctionality, you can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"decorateRequest")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"decorateReply"),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"decorateRequest")," and ",(0,r.kt)("inlineCode",{parentName:"em"},"decorateReply"),"? Why do we need them if we already have\n",(0,r.kt)("inlineCode",{parentName:"em"},"decorate"),"?")),(0,r.kt)("p",null,"Good question, we added them to make Fastify more developer-friendly. Let's see\nan example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.decorate('html', payload => {\n  return generateHtml(payload)\n})\n\nfastify.get('/html', (request, reply) => {\n  reply\n    .type('text/html')\n    .send(fastify.html({ hello: 'world' }))\n})\n")),(0,r.kt)("p",null,"It works, but it could be much better!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.decorateReply('html', function (payload) {\n  this.type('text/html') // This is the 'Reply' object\n  this.send(generateHtml(payload))\n})\n\nfastify.get('/html', (request, reply) => {\n  reply.html({ hello: 'world' })\n})\n")),(0,r.kt)("p",null,"In the same way you can do this for the ",(0,r.kt)("inlineCode",{parentName:"p"},"request")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.decorate('getHeader', (req, header) => {\n  return req.headers[header]\n})\n\nfastify.addHook('preHandler', (request, reply, done) => {\n  request.isHappy = fastify.getHeader(request.raw, 'happy')\n  done()\n})\n\nfastify.get('/happiness', (request, reply) => {\n  reply.send({ happy: request.isHappy })\n})\n")),(0,r.kt)("p",null,"Again, it works, but it can be much better!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.decorateRequest('setHeader', function (header) {\n  this.isHappy = this.headers[header]\n})\n\nfastify.decorateRequest('isHappy', false) // This will be added to the Request object prototype, yay speed!\n\nfastify.addHook('preHandler', (request, reply, done) => {\n  request.setHeader('happy')\n  done()\n})\n\nfastify.get('/happiness', (request, reply) => {\n  reply.send({ happy: request.isHappy })\n})\n")),(0,r.kt)("p",null,'We have seen how to extend server functionality and how to handle the\nencapsulation system, but what if you need to add a function that must be\nexecuted every time when the server "',(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v3.29.x/Reference/Lifecycle"},"emits"),'" an\nevent?'),(0,r.kt)("h2",{id:"hooks"},"Hooks"),(0,r.kt)("a",{id:"hooks"}),(0,r.kt)("p",null,"You just built an amazing utility, but now you need to execute that for every\nrequest, this is what you will likely do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.decorate('util', (request, key, value) => { request[key] = value })\n\nfastify.get('/plugin1', (request, reply) => {\n  fastify.util(request, 'timestamp', new Date())\n  reply.send(request)\n})\n\nfastify.get('/plugin2', (request, reply) => {\n  fastify.util(request, 'timestamp', new Date())\n  reply.send(request)\n})\n")),(0,r.kt)("p",null,"I think we all agree that this is terrible. Repeated code, awful readability and\nit cannot scale."),(0,r.kt)("p",null,"So what can you do to avoid this annoying issue? Yes, you are right, use a\n",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v3.29.x/Reference/Hooks"},"hook"),"!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.decorate('util', (request, key, value) => { request[key] = value })\n\nfastify.addHook('preHandler', (request, reply, done) => {\n  fastify.util(request, 'timestamp', new Date())\n  done()\n})\n\nfastify.get('/plugin1', (request, reply) => {\n  reply.send(request)\n})\n\nfastify.get('/plugin2', (request, reply) => {\n  reply.send(request)\n})\n")),(0,r.kt)("p",null,"Now for every request, you will run your utility. You can register as many hooks\nas you need."),(0,r.kt)("p",null,"Sometimes you want a hook that should be executed for just a subset of routes,\nhow can you do that? Yep, encapsulation!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify.register((instance, opts, done) => {\n  instance.decorate('util', (request, key, value) => { request[key] = value })\n\n  instance.addHook('preHandler', (request, reply, done) => {\n    instance.util(request, 'timestamp', new Date())\n    done()\n  })\n\n  instance.get('/plugin1', (request, reply) => {\n    reply.send(request)\n  })\n\n  done()\n})\n\nfastify.get('/plugin2', (request, reply) => {\n  reply.send(request)\n})\n")),(0,r.kt)("p",null,"Now your hook will run just for the first route!"),(0,r.kt)("p",null,"As you probably noticed by now, ",(0,r.kt)("inlineCode",{parentName:"p"},"request")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"reply")," are not the standard\nNodejs ",(0,r.kt)("em",{parentName:"p"},"request")," and ",(0,r.kt)("em",{parentName:"p"},"response")," objects, but Fastify's objects."),(0,r.kt)("h2",{id:"how-to-handle-encapsulation-and-distribution"},"How to handle encapsulation and distribution"),(0,r.kt)("a",{id:"distribution"}),(0,r.kt)("p",null,"Perfect, now you know (almost) all of the tools that you can use to extend\nFastify. Nevertheless, chances are that you came across one big issue: how is\ndistribution handled?"),(0,r.kt)("p",null,"The preferred way to distribute a utility is to wrap all your code inside a\n",(0,r.kt)("inlineCode",{parentName:"p"},"register"),". Using this, your plugin can support asynchronous bootstrapping\n",(0,r.kt)("em",{parentName:"p"},"(since ",(0,r.kt)("inlineCode",{parentName:"em"},"decorate")," is a synchronous API)"),", in the case of a database connection\nfor example."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Wait, what? Didn't you tell me that ",(0,r.kt)("inlineCode",{parentName:"em"},"register")," creates an encapsulation and\nthat the stuff I create inside will not be available outside?")),(0,r.kt)("p",null,"Yes, I said that. However, what I didn't tell you is that you can tell Fastify\nto avoid this behavior with the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-plugin"},(0,r.kt)("inlineCode",{parentName:"a"},"fastify-plugin"))," module."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fp = require('fastify-plugin')\nconst dbClient = require('db-client')\n\nfunction dbPlugin (fastify, opts, done) {\n  dbClient.connect(opts.url, (err, conn) => {\n    fastify.decorate('db', conn)\n    done()\n  })\n}\n\nmodule.exports = fp(dbPlugin)\n")),(0,r.kt)("p",null,"You can also tell ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify-plugin")," to check the installed version of Fastify, in\ncase you need a specific API."),(0,r.kt)("p",null,"As we mentioned earlier, Fastify starts loading its plugins ",(0,r.kt)("strong",{parentName:"p"},"after"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},".listen()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".inject()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".ready()")," are called and as such, ",(0,r.kt)("strong",{parentName:"p"},"after")," they\nhave been declared. This means that, even though the plugin may inject variables\nto the external Fastify instance via ",(0,r.kt)("a",{parentName:"p",href:"/website-next/docs/v3.29.x/Reference/Decorators"},(0,r.kt)("inlineCode",{parentName:"a"},"decorate")),",\nthe decorated variables will not be accessible before calling ",(0,r.kt)("inlineCode",{parentName:"p"},".listen()"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},".inject()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".ready()"),"."),(0,r.kt)("p",null,"In case you rely on a variable injected by a preceding plugin and want to pass\nthat in the ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," argument of ",(0,r.kt)("inlineCode",{parentName:"p"},"register"),", you can do so by using a function\ninstead of an object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fastify = require('fastify')()\nconst fp = require('fastify-plugin')\nconst dbClient = require('db-client')\n\nfunction dbPlugin (fastify, opts, done) {\n  dbClient.connect(opts.url, (err, conn) => {\n    fastify.decorate('db', conn)\n    done()\n  })\n}\n\nfastify.register(fp(dbPlugin), { url: 'https://example.com' })\nfastify.register(require('your-plugin'), parent => {\n  return { connection: parent.db, otherOption: 'foo-bar' }\n})\n")),(0,r.kt)("p",null,"In the above example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"parent")," variable of the function passed in as the\nsecond argument of ",(0,r.kt)("inlineCode",{parentName:"p"},"register")," is a copy of the ",(0,r.kt)("strong",{parentName:"p"},"external Fastify instance"),"\nthat the plugin was registered at. This means that we are able to access any\nvariables that were injected by preceding plugins in the order of declaration."),(0,r.kt)("h2",{id:"esm-support"},"ESM support"),(0,r.kt)("a",{id:"esm-support"}),(0,r.kt)("p",null,"ESM is supported as well from ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/esm.html"},"Node.js\n",(0,r.kt)("inlineCode",{parentName:"a"},"v13.3.0"))," and above! Just export your plugin\nas ESM module and you are good to go!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// plugin.mjs\nasync function plugin (fastify, opts) {\n  fastify.get('/', async (req, reply) => {\n    return { hello: 'world' }\n  })\n}\n\nexport default plugin\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": Fastify does not support named imports within an ESM context. Instead,\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," export is available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// server.mjs\nimport Fastify from 'fastify'\n\nconst fastify = Fastify()\n\n///...\n\nfastify.listen(3000, (err, address) => {\n  if (err) {\n    fastify.log.error(err)\n    process.exit(1)\n  }\n})\n")),(0,r.kt)("h2",{id:"handle-errors"},"Handle errors"),(0,r.kt)("a",{id:"handle-errors"}),(0,r.kt)("p",null,"It can happen that one of your plugins fails during startup. Maybe you expect it\nand you have a custom logic that will be triggered in that case. How can you\nimplement this? The ",(0,r.kt)("inlineCode",{parentName:"p"},"after")," API is what you need. ",(0,r.kt)("inlineCode",{parentName:"p"},"after")," simply registers a\ncallback that will be executed just after a register, and it can take up to\nthree parameters."),(0,r.kt)("p",null,"The callback changes based on the parameters you are giving:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If no parameter is given to the callback and there is an error, that error\nwill be passed to the next error handler."),(0,r.kt)("li",{parentName:"ol"},"If one parameter is given to the callback, that parameter will be the error\nobject."),(0,r.kt)("li",{parentName:"ol"},"If two parameters are given to the callback, the first will be the error\nobject; the second will be the done callback."),(0,r.kt)("li",{parentName:"ol"},"If three parameters are given to the callback, the first will be the error\nobject, the second will be the top-level context unless you have specified\nboth server and override, in that case, the context will be what the override\nreturns, and the third the done callback.")),(0,r.kt)("p",null,"Let's see how to use it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fastify\n  .register(require('./database-connector'))\n  .after(err => {\n    if (err) throw err\n  })\n")),(0,r.kt)("h2",{id:"custom-errors"},"Custom errors"),(0,r.kt)("a",{id:"custom-errors"}),(0,r.kt)("p",null,"If your plugin needs to expose custom errors, you can easily generate consistent\nerror objects across your codebase and plugins with the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-error"},(0,r.kt)("inlineCode",{parentName:"a"},"@fastify/error"))," module."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const createError = require('@fastify/error')\nconst CustomError = createError('ERROR_CODE', 'message')\nconsole.log(new CustomError())\n")),(0,r.kt)("h2",{id:"emit-warnings"},"Emit Warnings"),(0,r.kt)("a",{id:"emit-warnings"}),(0,r.kt)("p",null,"If you want to deprecate an API, or you want to warn the user about a specific\nuse case, you can use the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify-warning"},(0,r.kt)("inlineCode",{parentName:"a"},"fastify-warning"))," module."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const warning = require('fastify-warning')()\nwarning.create('FastifyDeprecation', 'FST_ERROR_CODE', 'message')\nwarning.emit('FST_ERROR_CODE')\n")),(0,r.kt)("h2",{id:"lets-start"},"Let's start!"),(0,r.kt)("a",{id:"start"}),(0,r.kt)("p",null,"Awesome, now you know everything you need to know about Fastify and its plugin\nsystem to start building your first plugin, and please if you do, tell us! We\nwill add it to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fastify/fastify#ecosystem"},(0,r.kt)("em",{parentName:"a"},"ecosystem")),"\nsection of our documentation!"),(0,r.kt)("p",null,"If you want to see some real-world examples, check out:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/fastify/point-of-view"},(0,r.kt)("inlineCode",{parentName:"a"},"point-of-view"))," Templates\nrendering (",(0,r.kt)("em",{parentName:"li"},"ejs, pug, handlebars, marko"),") plugin support for Fastify."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/fastify/fastify-mongodb"},(0,r.kt)("inlineCode",{parentName:"a"},"@fastify/mongodb"))," Fastify\nMongoDB connection plugin, with this you can share the same MongoDB connection\npool in every part of your server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/fastify/fastify-multipart"},(0,r.kt)("inlineCode",{parentName:"a"},"@fastify/multipart"))," Multipart\nsupport for Fastify"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/fastify/fastify-helmet"},(0,r.kt)("inlineCode",{parentName:"a"},"@fastify/helmet"))," Important\nsecurity headers for Fastify")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Do you feel like something is missing here? Let us know! :)")))}d.isMDXComponent=!0}}]);