"use strict";(self.webpackChunkfastify_website=self.webpackChunkfastify_website||[]).push([[3840],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),h=s,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2183:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=n(7462),s=n(3366),o=(n(7294),n(3905)),a=["components"],i={title:"Recommendations",sidebar_label:"Recommendations",hide_title:!1},l=void 0,c={unversionedId:"Recommendations",id:"version-v2/Recommendations",isDocsHomePage:!1,title:"Recommendations",description:"This document contains a set recommendations, or best practices, when using",source:"@site/versioned_docs/version-v2/Recommendations.md",sourceDirName:".",slug:"/Recommendations",permalink:"/website-next/docs/v2/Recommendations",editUrl:"https://github.com/fastify/website-next/edit/main/docs/versioned_docs/version-v2/Recommendations.md",tags:[],version:"v2",frontMatter:{title:"Recommendations",sidebar_label:"Recommendations",hide_title:!1},sidebar:"version-v2/tutorialSidebar",previous:{title:"Plugins",permalink:"/website-next/docs/v2/Plugins"},next:{title:"Reply",permalink:"/website-next/docs/v2/Reply"}},p=[{value:"Use A Reverse Proxy",id:"use-a-reverse-proxy",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,s.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document contains a set recommendations, or best practices, when using\nFastify."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#use-a-reverse-proxy"},"Use A Reverse Proxy"))),(0,o.kt)("h2",{id:"use-a-reverse-proxy"},"Use A Reverse Proxy"),(0,o.kt)("a",{id:"reverseproxy"}),(0,o.kt)("p",null,"Node.js is an early adopter of frameworks shipping with an easy to use web\nserver within the standard library. Previously, with languages like PHP or\nPython, one would need either a web server with specific support for the\nlanguage or the ability to setup some sort of ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Common_Gateway_Interface"},"CGI gateway")," that works\nwith the language. With Node.js, one can simply write an application that\n",(0,o.kt)("em",{parentName:"p"},"directly")," handles HTTP requests. As a result, the temptation is to write\napplications that handle requests for multiple domains, listen on multiple\nports (i.e. HTTP ",(0,o.kt)("em",{parentName:"p"},"and")," HTTPS), and various other scenarios and combinations\nthereof. Further, the temptation is to then expose these applications directly\nto the Internet to handle requests."),(0,o.kt)("p",null,"The Fastify team ",(0,o.kt)("strong",{parentName:"p"},"strongly")," considers this to be an anti-pattern and extremely\nbad practice:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"It adds unnecessary complexity to the application by diluting its focus."),(0,o.kt)("li",{parentName:"ol"},"It prevents ",(0,o.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Scalability#Horizontal"},"horizontal scalability"),".")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20190821102906/https://medium.com/intrinsic/why-should-i-use-a-reverse-proxy-if-node-js-is-production-ready-5a079408b2ca"},"Why should I use a Reverse Proxy if Node.js is Production Ready?"),"\nfor a more thorough discussion of why one should opt to use a reverse proxy."),(0,o.kt)("p",null,"For a concrete example, consider the situation where:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The app needs multiple instances to handle load."),(0,o.kt)("li",{parentName:"ol"},"The app needs TLS termination."),(0,o.kt)("li",{parentName:"ol"},"The app needs to redirect HTTP requests to HTTPS."),(0,o.kt)("li",{parentName:"ol"},"The app needs to serve multiple domains."),(0,o.kt)("li",{parentName:"ol"},"The app needs to serve static resources, e.g. jpeg files.")),(0,o.kt)("p",null,"There are many reverse proxy solutions available, and your environment may\ndictate the solution to use, e.g. AWS or GCP. But given the above, we could use\n",(0,o.kt)("a",{parentName:"p",href:"https://www.haproxy.org/"},"HAProxy")," to solve these requirements:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-conf"},'# The global section defines base HAProxy (engine) instance configuration.\nglobal\n  log /dev/log syslog\n  maxconn 4096\n  chroot /var/lib/haproxy\n  user haproxy\n  group haproxy\n\n  # Set some baseline TLS options.\n  tune.ssl.default-dh-param 2048\n  ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11\n  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n  ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11\n  ssl-default-server-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n\n# Each defaults section defines options that will apply to each subsequent\n# subsection until another defaults section is encountered.\ndefaults\n  log   global\n  mode  http\n  option        httplog\n  option        dontlognull\n  retries       3\n  option redispatch\n  # The following option make haproxy close connections to backend servers\n  # instead of keeping them open. This can alleviate unexpected connection\n  # reset errors in the Node process.\n  option http-server-close\n  maxconn       2000\n  timeout connect 5000\n  timeout client 50000\n  timeout server 50000\n\n  # Enable content compression for specific content types.\n  compression algo gzip\n  compression type text/html text/plain text/css application/javascript\n\n# A "frontend" section defines a public listener, i.e. an "http server"\n# as far as clients are concerned.\nfrontend proxy\n  # The IP address here would be the _public_ IP address of the server.\n  # Here, we use a private address as an example.\n  bind 10.0.0.10:80\n  # This redirect rule will redirect all traffic that is not TLS traffic\n  # to the same incoming request URL on the HTTPS port.\n  redirect scheme https code 308 if !{ ssl_fc }\n  # Technically this use_backend directive is useless since we are simply\n  # redirecting all traffic to this frontend to the HTTPS frontend. It is\n  # merely included here for completeness sake.\n  use_backend default-server\n\n# This frontend defines our primary, TLS only, listener. It is here where\n# we will define the TLS certificates to expose and how to direct incoming\n# requests.\nfrontend proxy-ssl\n  # The `/etc/haproxy/certs` directory in this example contains a set of\n  # certificate PEM files that are named for the domains the certificates are\n  # issued for. When HAProxy starts, it will read this directory, load all of\n  # the certificates it finds here, and use SNI matching to apply the correct\n  # certificate to the connection.\n  bind 10.0.0.10:443 ssl crt /etc/haproxy/certs\n\n  # Here we define rule pairs to handle static resources. Any incoming request\n  # that has a path starting with `/static`, e.g.\n  # `https://one.example.com/static/foo.jpeg`, will be redirected to the\n  # static resources server.\n  acl is_static path -i -m beg /static\n  use_backend static-backend if is_static\n\n  # Here we define rule pairs to direct requests to appropriate Node.js\n  # servers based on the requested domain. The `acl` line is used to match\n  # the incoming hostname and define a boolean indicating if it is a match.\n  # The `use_backend` line is used to direct the traffic if the boolean is\n  # true.\n  acl example1 hdr_sub(Host) one.example.com\n  use_backend example1-backend if example1\n\n  acl example2 hdr_sub(Host) two.example.com\n  use_backend example2-backend if example2\n\n  # Finally, we have a fallback redirect if none of the requested hosts\n  # match the above rules.\n  default_backend default-server\n\n# A "backend" is used to tell HAProxy where to request information for the\n# proxied request. These sections are where we will define where our Node.js\n# apps live and any other servers for things like static assets.\nbackend default-server\n  # In this example we are defaulting unmatched domain requests to a single\n  # backend server for all requests. Notice that the backend server does not\n  # have to be serving TLS requests. This is called "TLS termination": the TLS\n  # connection is "terminated" at the reverse proxy.\n  # It is possible to also proxy to backend servers that are themselves serving\n  # requests over TLS, but that is outside the scope of this example.\n  server server1 10.10.10.2:80\n\n# This backend configuration will serve requests for `https://one.example.com`\n# by proxying requests to three backend servers in a round-robin manner.\nbackend example1-backend\n  server example1-1 10.10.11.2:80\n  server example1-2 10.10.11.2:80\n  server example2-2 10.10.11.3:80\n\n# This one serves requests for `https://two.example.com`\nbackend example2-backend\n  server example2-1 10.10.12.2:80\n  server example2-2 10.10.12.2:80\n  server example2-3 10.10.12.3:80\n\n# This backend handles the static resources requests.\nbackend static-backend\n  server static-server1 10.10.9.2:80\n')))}u.isMDXComponent=!0}}]);